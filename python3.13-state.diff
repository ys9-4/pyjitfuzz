diff --git a/Python/bltinmodule.c b/Python/bltinmodule.c
index 06bf4d38f9e..cbde2f611d9 100644
--- a/Python/bltinmodule.c
+++ b/Python/bltinmodule.c
@@ -21,6 +21,228 @@
 #endif
 
 
+/* built-in function for cpython JIT fuzzing */
+static PyObject*
+builtin_probe_state(PyObject *module, PyObject *arg)
+{
+    PyTypeObject* type = arg->ob_type;
+
+    PyObject* state_str = PyUnicode_FromString("");
+    PyObject* temp_str = NULL;
+    PyObject* result = NULL;
+       
+    /* 1. mm field */
+    temp_str = PyUnicode_FromFormat("name:%s;", type->tp_name);
+    PyUnicode_Append(&state_str, temp_str);
+    Py_DECREF(temp_str);
+    
+    temp_str = PyUnicode_FromFormat("basicsize:%zd;", type->tp_basicsize);
+    PyUnicode_Append(&state_str, temp_str);
+    Py_DECREF(temp_str);
+    
+    temp_str = PyUnicode_FromFormat("itemsize:%zd;", type->tp_itemsize);
+    PyUnicode_Append(&state_str, temp_str);
+    Py_DECREF(temp_str);
+    
+    temp_str = PyUnicode_FromFormat("alloc:%p;", type->tp_alloc);
+    PyUnicode_Append(&state_str, temp_str);
+    Py_DECREF(temp_str);
+    
+    temp_str = PyUnicode_FromFormat("new:%p;", type->tp_new);
+    PyUnicode_Append(&state_str, temp_str);
+    Py_DECREF(temp_str);
+    
+    temp_str = PyUnicode_FromFormat("free:%p;", type->tp_free);
+    PyUnicode_Append(&state_str, temp_str);
+    Py_DECREF(temp_str);
+    
+    /* ref count field */
+    temp_str = PyUnicode_FromFormat("dealloc:%p;", type->tp_dealloc);
+    PyUnicode_Append(&state_str, temp_str);
+    Py_DECREF(temp_str);
+    
+    temp_str = PyUnicode_FromFormat("clear:%p;", type->tp_clear);
+    PyUnicode_Append(&state_str, temp_str);
+    Py_DECREF(temp_str);
+    
+    temp_str = PyUnicode_FromFormat("del:%p;", type->tp_del);
+    PyUnicode_Append(&state_str, temp_str);
+    Py_DECREF(temp_str);
+    
+    temp_str = PyUnicode_FromFormat("finalize:%p;", type->tp_finalize);
+    PyUnicode_Append(&state_str, temp_str);
+    Py_DECREF(temp_str);
+    
+    /* cache/opt field */
+    temp_str = PyUnicode_FromFormat("version_tag:%u;", type->tp_version_tag);
+    PyUnicode_Append(&state_str, temp_str);
+    Py_DECREF(temp_str);
+    
+    temp_str = PyUnicode_FromFormat("vectorcall:%p;", type->tp_vectorcall);
+    PyUnicode_Append(&state_str, temp_str);
+    Py_DECREF(temp_str);
+    
+    temp_str = PyUnicode_FromFormat("vectorcall_offset:%zd;", type->tp_vectorcall_offset);
+    PyUnicode_Append(&state_str, temp_str);
+    Py_DECREF(temp_str);
+    
+    /* gc field */
+    temp_str = PyUnicode_FromFormat("traverse:%p;", type->tp_traverse);
+    PyUnicode_Append(&state_str, temp_str);
+    Py_DECREF(temp_str);
+    
+    temp_str = PyUnicode_FromFormat("is_gc:%p;", type->tp_is_gc);
+    PyUnicode_Append(&state_str, temp_str);
+    Py_DECREF(temp_str);
+    
+    /* fp field */
+    temp_str = PyUnicode_FromFormat("as_number:%p;", type->tp_as_number);
+    PyUnicode_Append(&state_str, temp_str);
+    Py_DECREF(temp_str);
+    
+    temp_str = PyUnicode_FromFormat("as_sequence:%p;", type->tp_as_sequence);
+    PyUnicode_Append(&state_str, temp_str);
+    Py_DECREF(temp_str);
+    
+    temp_str = PyUnicode_FromFormat("as_mapping:%p;", type->tp_as_mapping);
+    PyUnicode_Append(&state_str, temp_str);
+    Py_DECREF(temp_str);
+    
+    temp_str = PyUnicode_FromFormat("as_buffer:%p;", type->tp_as_buffer);
+    PyUnicode_Append(&state_str, temp_str);
+    Py_DECREF(temp_str);
+    
+    temp_str = PyUnicode_FromFormat("as_async:%p;", type->tp_as_async);
+    PyUnicode_Append(&state_str, temp_str);
+    Py_DECREF(temp_str);
+    
+    /* dynamic field */
+    if (type->tp_dict) {
+        temp_str = PyUnicode_FromFormat("tp_dict_id:%p;", type->tp_dict);
+        PyUnicode_Append(&state_str, temp_str);
+        Py_DECREF(temp_str);
+        
+        temp_str = PyUnicode_FromFormat("tp_dict_refcount:%ld;", Py_REFCNT(type->tp_dict));
+        PyUnicode_Append(&state_str, temp_str);
+        Py_DECREF(temp_str);
+    } else {
+        temp_str = PyUnicode_FromString("tp_dict:None;");
+        PyUnicode_Append(&state_str, temp_str);
+        Py_DECREF(temp_str);
+    }
+    
+    if (type->tp_base) {
+        temp_str = PyUnicode_FromFormat("tp_base_name:%s;", type->tp_base->tp_name);
+        PyUnicode_Append(&state_str, temp_str);
+        Py_DECREF(temp_str);
+    } else {
+        temp_str = PyUnicode_FromString("tp_base:None;");
+        PyUnicode_Append(&state_str, temp_str);
+        Py_DECREF(temp_str);
+    }
+    
+    if (type->tp_bases) {
+        temp_str = PyUnicode_FromFormat("tp_bases_id:%p;", type->tp_bases);
+        PyUnicode_Append(&state_str, temp_str);
+        Py_DECREF(temp_str);
+    } else {
+        temp_str = PyUnicode_FromString("tp_bases:None;");
+        PyUnicode_Append(&state_str, temp_str);
+        Py_DECREF(temp_str);
+    }
+    
+    if (type->tp_mro) {
+        temp_str = PyUnicode_FromFormat("tp_mro_id:%p;", type->tp_mro);
+        PyUnicode_Append(&state_str, temp_str);
+        Py_DECREF(temp_str);
+    } else {
+        temp_str = PyUnicode_FromString("tp_mro:None;");
+        PyUnicode_Append(&state_str, temp_str);
+        Py_DECREF(temp_str);
+    }
+    
+    /* offset field */
+    temp_str = PyUnicode_FromFormat("dictoffset:%zd;", type->tp_dictoffset);
+    PyUnicode_Append(&state_str, temp_str);
+    Py_DECREF(temp_str);
+    
+    temp_str = PyUnicode_FromFormat("weaklistoffset:%zd;", type->tp_weaklistoffset);
+    PyUnicode_Append(&state_str, temp_str);
+    Py_DECREF(temp_str);
+    
+    /* ? field */
+    temp_str = PyUnicode_FromFormat("watched:%u;", type->tp_watched);
+    PyUnicode_Append(&state_str, temp_str);
+    Py_DECREF(temp_str);
+    
+    temp_str = PyUnicode_FromFormat("versions_used:%u;", type->tp_versions_used);
+    PyUnicode_Append(&state_str, temp_str);
+    Py_DECREF(temp_str);
+    
+    /* flags */
+    temp_str = PyUnicode_FromFormat("flags:%lu;", type->tp_flags);
+    PyUnicode_Append(&state_str, temp_str);
+    Py_DECREF(temp_str);
+    
+    /* encoding utf-8 */
+    PyObject* bytes_obj = PyUnicode_AsUTF8String(state_str);
+    if (!bytes_obj) {
+        Py_DECREF(state_str);
+        return NULL;
+    }
+    
+    /* hash to sha256 */
+    PyObject* hashlib_module = PyImport_ImportModule("hashlib");
+    if (!hashlib_module) {
+        Py_DECREF(state_str);
+        Py_DECREF(bytes_obj);
+        return NULL;
+    }
+    
+    PyObject* sha256_func = PyObject_GetAttrString(hashlib_module, "sha256");
+    if (!sha256_func) {
+        Py_DECREF(state_str);
+        Py_DECREF(bytes_obj);
+        Py_DECREF(hashlib_module);
+        return NULL;
+    }
+    
+    PyObject* hash_obj = PyObject_CallFunctionObjArgs(sha256_func, bytes_obj, NULL);
+    if (!hash_obj) {
+        Py_DECREF(state_str);
+        Py_DECREF(bytes_obj);
+        Py_DECREF(hashlib_module);
+        Py_DECREF(sha256_func);
+        return NULL;
+    }
+    
+    result = PyObject_CallMethod(hash_obj, "hexdigest", NULL);
+    
+    Py_DECREF(state_str);
+    Py_DECREF(bytes_obj);
+    Py_DECREF(hashlib_module);
+    Py_DECREF(sha256_func);
+    Py_DECREF(hash_obj);
+    
+    return result;
+}
+
+PyDoc_STRVAR(probe_state_doc,
+    "probe_state()\n\
+    \n\
+    probe state");
+
+static PyObject*
+builtin_save_state(PyObject *module, PyObject *args)
+{
+    Py_RETURN_NONE;
+}
+
+PyDoc_STRVAR(save_state_doc,
+    "save_state()\n\
+    \n\
+    save state");
+
 static PyObject*
 update_bases(PyObject *bases, PyObject *const *args, Py_ssize_t nargs)
 {
@@ -3128,6 +3350,9 @@ static PyMethodDef builtin_methods[] = {
     BUILTIN_SORTED_METHODDEF
     BUILTIN_SUM_METHODDEF
     {"vars",            builtin_vars,       METH_VARARGS, vars_doc},
+    /* add to cpython JIT fuzzing */
+    {"probe_state", builtin_probe_state, METH_O , probe_state_doc},
+    {"save_state", builtin_save_state, METH_NOARGS , save_state_doc},
     {NULL,              NULL},
 };
 
