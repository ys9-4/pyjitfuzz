// 69ef73357a3537094a330e525d20754b746da77a5612b152c6c544b5932986a8
// $ /usr/local/bin/python3.13 ./Tools/jit/build.py x86_64-pc-linux-gnu

void
emit__BINARY_OP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_BINARY_OP.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 4c 8b 7d f0                   movq    -0x10(%rbp), %r15
    // 5: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 9: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x10 <_JIT_ENTRY+0x10>
    // 000000000000000c:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 10: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x17 <_JIT_ENTRY+0x17>
    // 0000000000000013:  R_X86_64_REX_GOTPCRELX       _PyEval_BinaryOps-0x4
    // 17: 4c 89 ff                      movq    %r15, %rdi
    // 1a: 48 89 de                      movq    %rbx, %rsi
    // 1d: ff 14 c1                      callq   *(%rcx,%rax,8)
    // 20: 49 89 c6                      movq    %rax, %r14
    // 23: 49 8b 07                      movq    (%r15), %rax
    // 26: 85 c0                         testl   %eax, %eax
    // 28: 78 08                         js      0x32 <_JIT_ENTRY+0x32>
    // 2a: 48 ff c8                      decq    %rax
    // 2d: 49 89 07                      movq    %rax, (%r15)
    // 30: 74 1a                         je      0x4c <_JIT_ENTRY+0x4c>
    // 32: 48 8b 03                      movq    (%rbx), %rax
    // 35: 85 c0                         testl   %eax, %eax
    // 37: 78 23                         js      0x5c <_JIT_ENTRY+0x5c>
    // 39: 48 ff c8                      decq    %rax
    // 3c: 48 89 03                      movq    %rax, (%rbx)
    // 3f: 75 1b                         jne     0x5c <_JIT_ENTRY+0x5c>
    // 41: 48 89 df                      movq    %rbx, %rdi
    // 44: ff 15 00 00 00 00             callq   *(%rip)                 # 0x4a <_JIT_ENTRY+0x4a>
    // 0000000000000046:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 4a: eb 10                         jmp     0x5c <_JIT_ENTRY+0x5c>
    // 4c: 4c 89 ff                      movq    %r15, %rdi
    // 4f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x55 <_JIT_ENTRY+0x55>
    // 0000000000000051:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 55: 48 8b 03                      movq    (%rbx), %rax
    // 58: 85 c0                         testl   %eax, %eax
    // 5a: 79 dd                         jns     0x39 <_JIT_ENTRY+0x39>
    // 5c: 4d 85 f6                      testq   %r14, %r14
    // 5f: 74 0f                         je      0x70 <_JIT_ENTRY+0x70>
    // 61: 4c 89 75 f0                   movq    %r14, -0x10(%rbp)
    // 65: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 69: 58                            popq    %rax
    // 6a: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x70 <_JIT_ENTRY+0x70>
    // 000000000000006c:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 70: 58                            popq    %rax
    // 71: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x77 <_JIT_ENTRY+0x77>
    // 0000000000000073:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 77: 
    const unsigned char code_body[119] = {
        0x50, 0x4c, 0x8b, 0x7d, 0xf0, 0x48, 0x8b, 0x5d,
        0xf8, 0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x4c,
        0x89, 0xff, 0x48, 0x89, 0xde, 0xff, 0x14, 0xc1,
        0x49, 0x89, 0xc6, 0x49, 0x8b, 0x07, 0x85, 0xc0,
        0x78, 0x08, 0x48, 0xff, 0xc8, 0x49, 0x89, 0x07,
        0x74, 0x1a, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78,
        0x23, 0x48, 0xff, 0xc8, 0x48, 0x89, 0x03, 0x75,
        0x1b, 0x48, 0x89, 0xdf, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0xeb, 0x10, 0x4c, 0x89, 0xff, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x03,
        0x85, 0xc0, 0x79, 0xdd, 0x4d, 0x85, 0xf6, 0x74,
        0x0f, 0x4c, 0x89, 0x75, 0xf0, 0x48, 0x83, 0xc5,
        0xf8, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: &_PyEval_BinaryOps+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_BinaryOps);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0xc, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x13, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x46, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x51, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x6c, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x73, (uintptr_t)data + 0x1c);
}

void
emit__BINARY_OP_ADD_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_BINARY_OP_ADD_FLOAT.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 4c 8b 75 f0                   movq    -0x10(%rbp), %r14
    // 5: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 9: f2 41 0f 10 46 10             movsd   0x10(%r14), %xmm0
    // f: f2 0f 58 43 10                addsd   0x10(%rbx), %xmm0
    // 14: 49 83 3e 01                   cmpq    $0x1, (%r14)
    // 18: 75 24                         jne     0x3e <_JIT_ENTRY+0x3e>
    // 1a: f2 41 0f 11 46 10             movsd   %xmm0, 0x10(%r14)
    // 20: 48 8b 03                      movq    (%rbx), %rax
    // 23: 85 c0                         testl   %eax, %eax
    // 25: 78 08                         js      0x2f <_JIT_ENTRY+0x2f>
    // 27: 48 ff c8                      decq    %rax
    // 2a: 48 89 03                      movq    %rax, (%rbx)
    // 2d: 74 70                         je      0x9f <_JIT_ENTRY+0x9f>
    // 2f: 4c 89 75 f0                   movq    %r14, -0x10(%rbp)
    // 33: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 37: 58                            popq    %rax
    // 38: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x3e <_JIT_ENTRY+0x3e>
    // 000000000000003a:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 3e: 48 83 3b 01                   cmpq    $0x1, (%rbx)
    // 42: 75 24                         jne     0x68 <_JIT_ENTRY+0x68>
    // 44: f2 0f 11 43 10                movsd   %xmm0, 0x10(%rbx)
    // 49: 49 8b 06                      movq    (%r14), %rax
    // 4c: 85 c0                         testl   %eax, %eax
    // 4e: 78 06                         js      0x56 <_JIT_ENTRY+0x56>
    // 50: 48 ff c8                      decq    %rax
    // 53: 49 89 06                      movq    %rax, (%r14)
    // 56: 49 89 de                      movq    %rbx, %r14
    // 59: 4c 89 75 f0                   movq    %r14, -0x10(%rbp)
    // 5d: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 61: 58                            popq    %rax
    // 62: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x68 <_JIT_ENTRY+0x68>
    // 0000000000000064:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 68: ff 15 00 00 00 00             callq   *(%rip)                 # 0x6e <_JIT_ENTRY+0x6e>
    // 000000000000006a:  R_X86_64_GOTPCRELX   PyFloat_FromDouble-0x4
    // 6e: 48 85 c0                      testq   %rax, %rax
    // 71: 74 68                         je      0xdb <_JIT_ENTRY+0xdb>
    // 73: 49 8b 0e                      movq    (%r14), %rcx
    // 76: 85 c9                         testl   %ecx, %ecx
    // 78: 78 06                         js      0x80 <_JIT_ENTRY+0x80>
    // 7a: 48 ff c9                      decq    %rcx
    // 7d: 49 89 0e                      movq    %rcx, (%r14)
    // 80: 48 8b 0b                      movq    (%rbx), %rcx
    // 83: 85 c9                         testl   %ecx, %ecx
    // 85: 78 06                         js      0x8d <_JIT_ENTRY+0x8d>
    // 87: 48 ff c9                      decq    %rcx
    // 8a: 48 89 0b                      movq    %rcx, (%rbx)
    // 8d: 49 89 c6                      movq    %rax, %r14
    // 90: 4c 89 75 f0                   movq    %r14, -0x10(%rbp)
    // 94: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 98: 58                            popq    %rax
    // 99: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x9f <_JIT_ENTRY+0x9f>
    // 000000000000009b:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 9f: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0xa6 <_JIT_ENTRY+0xa6>
    // 00000000000000a2:  R_X86_64_REX_GOTPCRELX       _PyRuntime-0x4
    // a6: 48 8b 81 48 28 00 00          movq    0x2848(%rcx), %rax
    // ad: 48 85 c0                      testq   %rax, %rax
    // b0: 74 11                         je      0xc3 <_JIT_ENTRY+0xc3>
    // b2: 48 8b 91 50 28 00 00          movq    0x2850(%rcx), %rdx
    // b9: 48 89 df                      movq    %rbx, %rdi
    // bc: be 01 00 00 00                movl    $0x1, %esi
    // c1: ff d0                         callq   *%rax
    // c3: 48 89 df                      movq    %rbx, %rdi
    // c6: ff 15 00 00 00 00             callq   *(%rip)                 # 0xcc <_JIT_ENTRY+0xcc>
    // 00000000000000c8:  R_X86_64_GOTPCRELX   _PyFloat_ExactDealloc-0x4
    // cc: 4c 89 75 f0                   movq    %r14, -0x10(%rbp)
    // d0: 48 83 c5 f8                   addq    $-0x8, %rbp
    // d4: 58                            popq    %rax
    // d5: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xdb <_JIT_ENTRY+0xdb>
    // 00000000000000d7:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // db: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0xe2 <_JIT_ENTRY+0xe2>
    // 00000000000000de:  R_X86_64_REX_GOTPCRELX       _JIT_EXECUTOR-0x4
    // e2: 49 89 84 24 10 01 00 00       movq    %rax, 0x110(%r12)
    // ea: 4c 29 ed                      subq    %r13, %rbp
    // ed: 48 83 c5 b8                   addq    $-0x48, %rbp
    // f1: 48 c1 ed 03                   shrq    $0x3, %rbp
    // f5: 41 89 6d 40                   movl    %ebp, 0x40(%r13)
    // f9: 31 c0                         xorl    %eax, %eax
    // fb: 59                            popq    %rcx
    // fc: c3                            retq
    // fd: 
    const unsigned char code_body[253] = {
        0x50, 0x4c, 0x8b, 0x75, 0xf0, 0x48, 0x8b, 0x5d,
        0xf8, 0xf2, 0x41, 0x0f, 0x10, 0x46, 0x10, 0xf2,
        0x0f, 0x58, 0x43, 0x10, 0x49, 0x83, 0x3e, 0x01,
        0x75, 0x24, 0xf2, 0x41, 0x0f, 0x11, 0x46, 0x10,
        0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x08, 0x48,
        0xff, 0xc8, 0x48, 0x89, 0x03, 0x74, 0x70, 0x4c,
        0x89, 0x75, 0xf0, 0x48, 0x83, 0xc5, 0xf8, 0x58,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83,
        0x3b, 0x01, 0x75, 0x24, 0xf2, 0x0f, 0x11, 0x43,
        0x10, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x06,
        0x48, 0xff, 0xc8, 0x49, 0x89, 0x06, 0x49, 0x89,
        0xde, 0x4c, 0x89, 0x75, 0xf0, 0x48, 0x83, 0xc5,
        0xf8, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85,
        0xc0, 0x74, 0x68, 0x49, 0x8b, 0x0e, 0x85, 0xc9,
        0x78, 0x06, 0x48, 0xff, 0xc9, 0x49, 0x89, 0x0e,
        0x48, 0x8b, 0x0b, 0x85, 0xc9, 0x78, 0x06, 0x48,
        0xff, 0xc9, 0x48, 0x89, 0x0b, 0x49, 0x89, 0xc6,
        0x4c, 0x89, 0x75, 0xf0, 0x48, 0x83, 0xc5, 0xf8,
        0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x81, 0x48, 0x28, 0x00, 0x00, 0x48, 0x85, 0xc0,
        0x74, 0x11, 0x48, 0x8b, 0x91, 0x50, 0x28, 0x00,
        0x00, 0x48, 0x89, 0xdf, 0xbe, 0x01, 0x00, 0x00,
        0x00, 0xff, 0xd0, 0x48, 0x89, 0xdf, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x75, 0xf0,
        0x48, 0x83, 0xc5, 0xf8, 0x58, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x89, 0x84, 0x24, 0x10, 0x01,
        0x00, 0x00, 0x4c, 0x29, 0xed, 0x48, 0x83, 0xc5,
        0xb8, 0x48, 0xc1, 0xed, 0x03, 0x41, 0x89, 0x6d,
        0x40, 0x31, 0xc0, 0x59, 0xc3,
    };
    // 0: 
    // 0: CONTINUE
    // 8: &PyFloat_FromDouble+0x0
    // 10: &_PyRuntime+0x0
    // 18: &_PyFloat_ExactDealloc+0x0
    // 20: EXECUTOR
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, (uintptr_t)&PyFloat_FromDouble);
    patch_64(data + 0x10, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x18, (uintptr_t)&_PyFloat_ExactDealloc);
    patch_64(data + 0x20, (uintptr_t)executor);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3a, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x64, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x6a, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x9b, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xa2, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xc8, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xd7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xde, (uintptr_t)data + 0x1c);
}

void
emit__BINARY_OP_ADD_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_BINARY_OP_ADD_INT.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 4c 8b 75 f0                   movq    -0x10(%rbp), %r14
    // 5: 4c 8b 7d f8                   movq    -0x8(%rbp), %r15
    // 9: 4c 89 f7                      movq    %r14, %rdi
    // c: 4c 89 fe                      movq    %r15, %rsi
    // f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x15 <_JIT_ENTRY+0x15>
    // 0000000000000011:  R_X86_64_GOTPCRELX   _PyLong_Add-0x4
    // 15: 48 89 c3                      movq    %rax, %rbx
    // 18: 49 8b 07                      movq    (%r15), %rax
    // 1b: 85 c0                         testl   %eax, %eax
    // 1d: 78 08                         js      0x27 <_JIT_ENTRY+0x27>
    // 1f: 48 ff c8                      decq    %rax
    // 22: 49 89 07                      movq    %rax, (%r15)
    // 25: 74 3e                         je      0x65 <_JIT_ENTRY+0x65>
    // 27: 49 8b 06                      movq    (%r14), %rax
    // 2a: 85 c0                         testl   %eax, %eax
    // 2c: 78 6b                         js      0x99 <_JIT_ENTRY+0x99>
    // 2e: 48 ff c8                      decq    %rax
    // 31: 49 89 06                      movq    %rax, (%r14)
    // 34: 75 63                         jne     0x99 <_JIT_ENTRY+0x99>
    // 36: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x3d <_JIT_ENTRY+0x3d>
    // 0000000000000039:  R_X86_64_REX_GOTPCRELX       _PyRuntime-0x4
    // 3d: 48 8b 81 48 28 00 00          movq    0x2848(%rcx), %rax
    // 44: 48 85 c0                      testq   %rax, %rax
    // 47: 74 11                         je      0x5a <_JIT_ENTRY+0x5a>
    // 49: 48 8b 91 50 28 00 00          movq    0x2850(%rcx), %rdx
    // 50: 4c 89 f7                      movq    %r14, %rdi
    // 53: be 01 00 00 00                movl    $0x1, %esi
    // 58: ff d0                         callq   *%rax
    // 5a: 4c 89 f7                      movq    %r14, %rdi
    // 5d: ff 15 00 00 00 00             callq   *(%rip)                 # 0x63 <_JIT_ENTRY+0x63>
    // 000000000000005f:  R_X86_64_GOTPCRELX   PyObject_Free-0x4
    // 63: eb 34                         jmp     0x99 <_JIT_ENTRY+0x99>
    // 65: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x6c <_JIT_ENTRY+0x6c>
    // 0000000000000068:  R_X86_64_REX_GOTPCRELX       _PyRuntime-0x4
    // 6c: 48 8b 81 48 28 00 00          movq    0x2848(%rcx), %rax
    // 73: 48 85 c0                      testq   %rax, %rax
    // 76: 74 11                         je      0x89 <_JIT_ENTRY+0x89>
    // 78: 48 8b 91 50 28 00 00          movq    0x2850(%rcx), %rdx
    // 7f: 4c 89 ff                      movq    %r15, %rdi
    // 82: be 01 00 00 00                movl    $0x1, %esi
    // 87: ff d0                         callq   *%rax
    // 89: 4c 89 ff                      movq    %r15, %rdi
    // 8c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x92 <_JIT_ENTRY+0x92>
    // 000000000000008e:  R_X86_64_GOTPCRELX   PyObject_Free-0x4
    // 92: 49 8b 06                      movq    (%r14), %rax
    // 95: 85 c0                         testl   %eax, %eax
    // 97: 79 95                         jns     0x2e <_JIT_ENTRY+0x2e>
    // 99: 48 85 db                      testq   %rbx, %rbx
    // 9c: 74 0f                         je      0xad <_JIT_ENTRY+0xad>
    // 9e: 48 89 5d f0                   movq    %rbx, -0x10(%rbp)
    // a2: 48 83 c5 f8                   addq    $-0x8, %rbp
    // a6: 58                            popq    %rax
    // a7: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xad <_JIT_ENTRY+0xad>
    // 00000000000000a9:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // ad: 58                            popq    %rax
    // ae: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xb4 <_JIT_ENTRY+0xb4>
    // 00000000000000b0:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // b4: 
    const unsigned char code_body[180] = {
        0x50, 0x4c, 0x8b, 0x75, 0xf0, 0x4c, 0x8b, 0x7d,
        0xf8, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc3,
        0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x08, 0x48,
        0xff, 0xc8, 0x49, 0x89, 0x07, 0x74, 0x3e, 0x49,
        0x8b, 0x06, 0x85, 0xc0, 0x78, 0x6b, 0x48, 0xff,
        0xc8, 0x49, 0x89, 0x06, 0x75, 0x63, 0x48, 0x8b,
        0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x81,
        0x48, 0x28, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74,
        0x11, 0x48, 0x8b, 0x91, 0x50, 0x28, 0x00, 0x00,
        0x4c, 0x89, 0xf7, 0xbe, 0x01, 0x00, 0x00, 0x00,
        0xff, 0xd0, 0x4c, 0x89, 0xf7, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0xeb, 0x34, 0x48, 0x8b, 0x0d,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x81, 0x48,
        0x28, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x11,
        0x48, 0x8b, 0x91, 0x50, 0x28, 0x00, 0x00, 0x4c,
        0x89, 0xff, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xff,
        0xd0, 0x4c, 0x89, 0xff, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x79,
        0x95, 0x48, 0x85, 0xdb, 0x74, 0x0f, 0x48, 0x89,
        0x5d, 0xf0, 0x48, 0x83, 0xc5, 0xf8, 0x58, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &_PyLong_Add+0x0
    // 8: &_PyRuntime+0x0
    // 10: &PyObject_Free+0x0
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyLong_Add);
    patch_64(data + 0x8, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x10, (uintptr_t)&PyObject_Free);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x11, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x39, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x5f, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x68, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x8e, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xa9, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xb0, (uintptr_t)data + 0x1c);
}

void
emit__BINARY_OP_ADD_UNICODE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_BINARY_OP_ADD_UNICODE.o:      file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 4c 8b 7d f0                   movq    -0x10(%rbp), %r15
    // 5: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 9: 4c 89 ff                      movq    %r15, %rdi
    // c: 4c 89 f6                      movq    %r14, %rsi
    // f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x15 <_JIT_ENTRY+0x15>
    // 0000000000000011:  R_X86_64_GOTPCRELX   PyUnicode_Concat-0x4
    // 15: 48 89 c3                      movq    %rax, %rbx
    // 18: 49 8b 07                      movq    (%r15), %rax
    // 1b: 85 c0                         testl   %eax, %eax
    // 1d: 78 08                         js      0x27 <_JIT_ENTRY+0x27>
    // 1f: 48 ff c8                      decq    %rax
    // 22: 49 89 07                      movq    %rax, (%r15)
    // 25: 74 3e                         je      0x65 <_JIT_ENTRY+0x65>
    // 27: 49 8b 06                      movq    (%r14), %rax
    // 2a: 85 c0                         testl   %eax, %eax
    // 2c: 78 6b                         js      0x99 <_JIT_ENTRY+0x99>
    // 2e: 48 ff c8                      decq    %rax
    // 31: 49 89 06                      movq    %rax, (%r14)
    // 34: 75 63                         jne     0x99 <_JIT_ENTRY+0x99>
    // 36: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x3d <_JIT_ENTRY+0x3d>
    // 0000000000000039:  R_X86_64_REX_GOTPCRELX       _PyRuntime-0x4
    // 3d: 48 8b 81 48 28 00 00          movq    0x2848(%rcx), %rax
    // 44: 48 85 c0                      testq   %rax, %rax
    // 47: 74 11                         je      0x5a <_JIT_ENTRY+0x5a>
    // 49: 48 8b 91 50 28 00 00          movq    0x2850(%rcx), %rdx
    // 50: 4c 89 f7                      movq    %r14, %rdi
    // 53: be 01 00 00 00                movl    $0x1, %esi
    // 58: ff d0                         callq   *%rax
    // 5a: 4c 89 f7                      movq    %r14, %rdi
    // 5d: ff 15 00 00 00 00             callq   *(%rip)                 # 0x63 <_JIT_ENTRY+0x63>
    // 000000000000005f:  R_X86_64_GOTPCRELX   _PyUnicode_ExactDealloc-0x4
    // 63: eb 34                         jmp     0x99 <_JIT_ENTRY+0x99>
    // 65: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x6c <_JIT_ENTRY+0x6c>
    // 0000000000000068:  R_X86_64_REX_GOTPCRELX       _PyRuntime-0x4
    // 6c: 48 8b 81 48 28 00 00          movq    0x2848(%rcx), %rax
    // 73: 48 85 c0                      testq   %rax, %rax
    // 76: 74 11                         je      0x89 <_JIT_ENTRY+0x89>
    // 78: 48 8b 91 50 28 00 00          movq    0x2850(%rcx), %rdx
    // 7f: 4c 89 ff                      movq    %r15, %rdi
    // 82: be 01 00 00 00                movl    $0x1, %esi
    // 87: ff d0                         callq   *%rax
    // 89: 4c 89 ff                      movq    %r15, %rdi
    // 8c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x92 <_JIT_ENTRY+0x92>
    // 000000000000008e:  R_X86_64_GOTPCRELX   _PyUnicode_ExactDealloc-0x4
    // 92: 49 8b 06                      movq    (%r14), %rax
    // 95: 85 c0                         testl   %eax, %eax
    // 97: 79 95                         jns     0x2e <_JIT_ENTRY+0x2e>
    // 99: 48 85 db                      testq   %rbx, %rbx
    // 9c: 74 0f                         je      0xad <_JIT_ENTRY+0xad>
    // 9e: 48 89 5d f0                   movq    %rbx, -0x10(%rbp)
    // a2: 48 83 c5 f8                   addq    $-0x8, %rbp
    // a6: 58                            popq    %rax
    // a7: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xad <_JIT_ENTRY+0xad>
    // 00000000000000a9:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // ad: 58                            popq    %rax
    // ae: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xb4 <_JIT_ENTRY+0xb4>
    // 00000000000000b0:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // b4: 
    const unsigned char code_body[180] = {
        0x50, 0x4c, 0x8b, 0x7d, 0xf0, 0x4c, 0x8b, 0x75,
        0xf8, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc3,
        0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x08, 0x48,
        0xff, 0xc8, 0x49, 0x89, 0x07, 0x74, 0x3e, 0x49,
        0x8b, 0x06, 0x85, 0xc0, 0x78, 0x6b, 0x48, 0xff,
        0xc8, 0x49, 0x89, 0x06, 0x75, 0x63, 0x48, 0x8b,
        0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x81,
        0x48, 0x28, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74,
        0x11, 0x48, 0x8b, 0x91, 0x50, 0x28, 0x00, 0x00,
        0x4c, 0x89, 0xf7, 0xbe, 0x01, 0x00, 0x00, 0x00,
        0xff, 0xd0, 0x4c, 0x89, 0xf7, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0xeb, 0x34, 0x48, 0x8b, 0x0d,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x81, 0x48,
        0x28, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x11,
        0x48, 0x8b, 0x91, 0x50, 0x28, 0x00, 0x00, 0x4c,
        0x89, 0xff, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xff,
        0xd0, 0x4c, 0x89, 0xff, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x79,
        0x95, 0x48, 0x85, 0xdb, 0x74, 0x0f, 0x48, 0x89,
        0x5d, 0xf0, 0x48, 0x83, 0xc5, 0xf8, 0x58, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &PyUnicode_Concat+0x0
    // 8: &_PyRuntime+0x0
    // 10: &_PyUnicode_ExactDealloc+0x0
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyUnicode_Concat);
    patch_64(data + 0x8, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x10, (uintptr_t)&_PyUnicode_ExactDealloc);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x11, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x39, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x5f, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x68, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x8e, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xa9, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xb0, (uintptr_t)data + 0x1c);
}

void
emit__BINARY_OP_MULTIPLY_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_BINARY_OP_MULTIPLY_FLOAT.o:   file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 4c 8b 75 f0                   movq    -0x10(%rbp), %r14
    // 5: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 9: f2 41 0f 10 46 10             movsd   0x10(%r14), %xmm0
    // f: f2 0f 59 43 10                mulsd   0x10(%rbx), %xmm0
    // 14: 49 83 3e 01                   cmpq    $0x1, (%r14)
    // 18: 75 24                         jne     0x3e <_JIT_ENTRY+0x3e>
    // 1a: f2 41 0f 11 46 10             movsd   %xmm0, 0x10(%r14)
    // 20: 48 8b 03                      movq    (%rbx), %rax
    // 23: 85 c0                         testl   %eax, %eax
    // 25: 78 08                         js      0x2f <_JIT_ENTRY+0x2f>
    // 27: 48 ff c8                      decq    %rax
    // 2a: 48 89 03                      movq    %rax, (%rbx)
    // 2d: 74 70                         je      0x9f <_JIT_ENTRY+0x9f>
    // 2f: 4c 89 75 f0                   movq    %r14, -0x10(%rbp)
    // 33: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 37: 58                            popq    %rax
    // 38: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x3e <_JIT_ENTRY+0x3e>
    // 000000000000003a:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 3e: 48 83 3b 01                   cmpq    $0x1, (%rbx)
    // 42: 75 24                         jne     0x68 <_JIT_ENTRY+0x68>
    // 44: f2 0f 11 43 10                movsd   %xmm0, 0x10(%rbx)
    // 49: 49 8b 06                      movq    (%r14), %rax
    // 4c: 85 c0                         testl   %eax, %eax
    // 4e: 78 06                         js      0x56 <_JIT_ENTRY+0x56>
    // 50: 48 ff c8                      decq    %rax
    // 53: 49 89 06                      movq    %rax, (%r14)
    // 56: 49 89 de                      movq    %rbx, %r14
    // 59: 4c 89 75 f0                   movq    %r14, -0x10(%rbp)
    // 5d: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 61: 58                            popq    %rax
    // 62: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x68 <_JIT_ENTRY+0x68>
    // 0000000000000064:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 68: ff 15 00 00 00 00             callq   *(%rip)                 # 0x6e <_JIT_ENTRY+0x6e>
    // 000000000000006a:  R_X86_64_GOTPCRELX   PyFloat_FromDouble-0x4
    // 6e: 48 85 c0                      testq   %rax, %rax
    // 71: 74 68                         je      0xdb <_JIT_ENTRY+0xdb>
    // 73: 49 8b 0e                      movq    (%r14), %rcx
    // 76: 85 c9                         testl   %ecx, %ecx
    // 78: 78 06                         js      0x80 <_JIT_ENTRY+0x80>
    // 7a: 48 ff c9                      decq    %rcx
    // 7d: 49 89 0e                      movq    %rcx, (%r14)
    // 80: 48 8b 0b                      movq    (%rbx), %rcx
    // 83: 85 c9                         testl   %ecx, %ecx
    // 85: 78 06                         js      0x8d <_JIT_ENTRY+0x8d>
    // 87: 48 ff c9                      decq    %rcx
    // 8a: 48 89 0b                      movq    %rcx, (%rbx)
    // 8d: 49 89 c6                      movq    %rax, %r14
    // 90: 4c 89 75 f0                   movq    %r14, -0x10(%rbp)
    // 94: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 98: 58                            popq    %rax
    // 99: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x9f <_JIT_ENTRY+0x9f>
    // 000000000000009b:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 9f: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0xa6 <_JIT_ENTRY+0xa6>
    // 00000000000000a2:  R_X86_64_REX_GOTPCRELX       _PyRuntime-0x4
    // a6: 48 8b 81 48 28 00 00          movq    0x2848(%rcx), %rax
    // ad: 48 85 c0                      testq   %rax, %rax
    // b0: 74 11                         je      0xc3 <_JIT_ENTRY+0xc3>
    // b2: 48 8b 91 50 28 00 00          movq    0x2850(%rcx), %rdx
    // b9: 48 89 df                      movq    %rbx, %rdi
    // bc: be 01 00 00 00                movl    $0x1, %esi
    // c1: ff d0                         callq   *%rax
    // c3: 48 89 df                      movq    %rbx, %rdi
    // c6: ff 15 00 00 00 00             callq   *(%rip)                 # 0xcc <_JIT_ENTRY+0xcc>
    // 00000000000000c8:  R_X86_64_GOTPCRELX   _PyFloat_ExactDealloc-0x4
    // cc: 4c 89 75 f0                   movq    %r14, -0x10(%rbp)
    // d0: 48 83 c5 f8                   addq    $-0x8, %rbp
    // d4: 58                            popq    %rax
    // d5: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xdb <_JIT_ENTRY+0xdb>
    // 00000000000000d7:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // db: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0xe2 <_JIT_ENTRY+0xe2>
    // 00000000000000de:  R_X86_64_REX_GOTPCRELX       _JIT_EXECUTOR-0x4
    // e2: 49 89 84 24 10 01 00 00       movq    %rax, 0x110(%r12)
    // ea: 4c 29 ed                      subq    %r13, %rbp
    // ed: 48 83 c5 b8                   addq    $-0x48, %rbp
    // f1: 48 c1 ed 03                   shrq    $0x3, %rbp
    // f5: 41 89 6d 40                   movl    %ebp, 0x40(%r13)
    // f9: 31 c0                         xorl    %eax, %eax
    // fb: 59                            popq    %rcx
    // fc: c3                            retq
    // fd: 
    const unsigned char code_body[253] = {
        0x50, 0x4c, 0x8b, 0x75, 0xf0, 0x48, 0x8b, 0x5d,
        0xf8, 0xf2, 0x41, 0x0f, 0x10, 0x46, 0x10, 0xf2,
        0x0f, 0x59, 0x43, 0x10, 0x49, 0x83, 0x3e, 0x01,
        0x75, 0x24, 0xf2, 0x41, 0x0f, 0x11, 0x46, 0x10,
        0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x08, 0x48,
        0xff, 0xc8, 0x48, 0x89, 0x03, 0x74, 0x70, 0x4c,
        0x89, 0x75, 0xf0, 0x48, 0x83, 0xc5, 0xf8, 0x58,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83,
        0x3b, 0x01, 0x75, 0x24, 0xf2, 0x0f, 0x11, 0x43,
        0x10, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x06,
        0x48, 0xff, 0xc8, 0x49, 0x89, 0x06, 0x49, 0x89,
        0xde, 0x4c, 0x89, 0x75, 0xf0, 0x48, 0x83, 0xc5,
        0xf8, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85,
        0xc0, 0x74, 0x68, 0x49, 0x8b, 0x0e, 0x85, 0xc9,
        0x78, 0x06, 0x48, 0xff, 0xc9, 0x49, 0x89, 0x0e,
        0x48, 0x8b, 0x0b, 0x85, 0xc9, 0x78, 0x06, 0x48,
        0xff, 0xc9, 0x48, 0x89, 0x0b, 0x49, 0x89, 0xc6,
        0x4c, 0x89, 0x75, 0xf0, 0x48, 0x83, 0xc5, 0xf8,
        0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x81, 0x48, 0x28, 0x00, 0x00, 0x48, 0x85, 0xc0,
        0x74, 0x11, 0x48, 0x8b, 0x91, 0x50, 0x28, 0x00,
        0x00, 0x48, 0x89, 0xdf, 0xbe, 0x01, 0x00, 0x00,
        0x00, 0xff, 0xd0, 0x48, 0x89, 0xdf, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x75, 0xf0,
        0x48, 0x83, 0xc5, 0xf8, 0x58, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x89, 0x84, 0x24, 0x10, 0x01,
        0x00, 0x00, 0x4c, 0x29, 0xed, 0x48, 0x83, 0xc5,
        0xb8, 0x48, 0xc1, 0xed, 0x03, 0x41, 0x89, 0x6d,
        0x40, 0x31, 0xc0, 0x59, 0xc3,
    };
    // 0: 
    // 0: CONTINUE
    // 8: &PyFloat_FromDouble+0x0
    // 10: &_PyRuntime+0x0
    // 18: &_PyFloat_ExactDealloc+0x0
    // 20: EXECUTOR
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, (uintptr_t)&PyFloat_FromDouble);
    patch_64(data + 0x10, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x18, (uintptr_t)&_PyFloat_ExactDealloc);
    patch_64(data + 0x20, (uintptr_t)executor);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3a, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x64, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x6a, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x9b, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xa2, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xc8, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xd7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xde, (uintptr_t)data + 0x1c);
}

void
emit__BINARY_OP_MULTIPLY_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_BINARY_OP_MULTIPLY_INT.o:     file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 4c 8b 75 f0                   movq    -0x10(%rbp), %r14
    // 5: 4c 8b 7d f8                   movq    -0x8(%rbp), %r15
    // 9: 4c 89 f7                      movq    %r14, %rdi
    // c: 4c 89 fe                      movq    %r15, %rsi
    // f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x15 <_JIT_ENTRY+0x15>
    // 0000000000000011:  R_X86_64_GOTPCRELX   _PyLong_Multiply-0x4
    // 15: 48 89 c3                      movq    %rax, %rbx
    // 18: 49 8b 07                      movq    (%r15), %rax
    // 1b: 85 c0                         testl   %eax, %eax
    // 1d: 78 08                         js      0x27 <_JIT_ENTRY+0x27>
    // 1f: 48 ff c8                      decq    %rax
    // 22: 49 89 07                      movq    %rax, (%r15)
    // 25: 74 3e                         je      0x65 <_JIT_ENTRY+0x65>
    // 27: 49 8b 06                      movq    (%r14), %rax
    // 2a: 85 c0                         testl   %eax, %eax
    // 2c: 78 6b                         js      0x99 <_JIT_ENTRY+0x99>
    // 2e: 48 ff c8                      decq    %rax
    // 31: 49 89 06                      movq    %rax, (%r14)
    // 34: 75 63                         jne     0x99 <_JIT_ENTRY+0x99>
    // 36: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x3d <_JIT_ENTRY+0x3d>
    // 0000000000000039:  R_X86_64_REX_GOTPCRELX       _PyRuntime-0x4
    // 3d: 48 8b 81 48 28 00 00          movq    0x2848(%rcx), %rax
    // 44: 48 85 c0                      testq   %rax, %rax
    // 47: 74 11                         je      0x5a <_JIT_ENTRY+0x5a>
    // 49: 48 8b 91 50 28 00 00          movq    0x2850(%rcx), %rdx
    // 50: 4c 89 f7                      movq    %r14, %rdi
    // 53: be 01 00 00 00                movl    $0x1, %esi
    // 58: ff d0                         callq   *%rax
    // 5a: 4c 89 f7                      movq    %r14, %rdi
    // 5d: ff 15 00 00 00 00             callq   *(%rip)                 # 0x63 <_JIT_ENTRY+0x63>
    // 000000000000005f:  R_X86_64_GOTPCRELX   PyObject_Free-0x4
    // 63: eb 34                         jmp     0x99 <_JIT_ENTRY+0x99>
    // 65: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x6c <_JIT_ENTRY+0x6c>
    // 0000000000000068:  R_X86_64_REX_GOTPCRELX       _PyRuntime-0x4
    // 6c: 48 8b 81 48 28 00 00          movq    0x2848(%rcx), %rax
    // 73: 48 85 c0                      testq   %rax, %rax
    // 76: 74 11                         je      0x89 <_JIT_ENTRY+0x89>
    // 78: 48 8b 91 50 28 00 00          movq    0x2850(%rcx), %rdx
    // 7f: 4c 89 ff                      movq    %r15, %rdi
    // 82: be 01 00 00 00                movl    $0x1, %esi
    // 87: ff d0                         callq   *%rax
    // 89: 4c 89 ff                      movq    %r15, %rdi
    // 8c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x92 <_JIT_ENTRY+0x92>
    // 000000000000008e:  R_X86_64_GOTPCRELX   PyObject_Free-0x4
    // 92: 49 8b 06                      movq    (%r14), %rax
    // 95: 85 c0                         testl   %eax, %eax
    // 97: 79 95                         jns     0x2e <_JIT_ENTRY+0x2e>
    // 99: 48 85 db                      testq   %rbx, %rbx
    // 9c: 74 0f                         je      0xad <_JIT_ENTRY+0xad>
    // 9e: 48 89 5d f0                   movq    %rbx, -0x10(%rbp)
    // a2: 48 83 c5 f8                   addq    $-0x8, %rbp
    // a6: 58                            popq    %rax
    // a7: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xad <_JIT_ENTRY+0xad>
    // 00000000000000a9:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // ad: 58                            popq    %rax
    // ae: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xb4 <_JIT_ENTRY+0xb4>
    // 00000000000000b0:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // b4: 
    const unsigned char code_body[180] = {
        0x50, 0x4c, 0x8b, 0x75, 0xf0, 0x4c, 0x8b, 0x7d,
        0xf8, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc3,
        0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x08, 0x48,
        0xff, 0xc8, 0x49, 0x89, 0x07, 0x74, 0x3e, 0x49,
        0x8b, 0x06, 0x85, 0xc0, 0x78, 0x6b, 0x48, 0xff,
        0xc8, 0x49, 0x89, 0x06, 0x75, 0x63, 0x48, 0x8b,
        0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x81,
        0x48, 0x28, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74,
        0x11, 0x48, 0x8b, 0x91, 0x50, 0x28, 0x00, 0x00,
        0x4c, 0x89, 0xf7, 0xbe, 0x01, 0x00, 0x00, 0x00,
        0xff, 0xd0, 0x4c, 0x89, 0xf7, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0xeb, 0x34, 0x48, 0x8b, 0x0d,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x81, 0x48,
        0x28, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x11,
        0x48, 0x8b, 0x91, 0x50, 0x28, 0x00, 0x00, 0x4c,
        0x89, 0xff, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xff,
        0xd0, 0x4c, 0x89, 0xff, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x79,
        0x95, 0x48, 0x85, 0xdb, 0x74, 0x0f, 0x48, 0x89,
        0x5d, 0xf0, 0x48, 0x83, 0xc5, 0xf8, 0x58, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &_PyLong_Multiply+0x0
    // 8: &_PyRuntime+0x0
    // 10: &PyObject_Free+0x0
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyLong_Multiply);
    patch_64(data + 0x8, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x10, (uintptr_t)&PyObject_Free);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x11, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x39, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x5f, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x68, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x8e, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xa9, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xb0, (uintptr_t)data + 0x1c);
}

void
emit__BINARY_OP_SUBTRACT_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_BINARY_OP_SUBTRACT_FLOAT.o:   file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 4c 8b 75 f0                   movq    -0x10(%rbp), %r14
    // 5: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 9: f2 41 0f 10 46 10             movsd   0x10(%r14), %xmm0
    // f: f2 0f 5c 43 10                subsd   0x10(%rbx), %xmm0
    // 14: 49 83 3e 01                   cmpq    $0x1, (%r14)
    // 18: 75 24                         jne     0x3e <_JIT_ENTRY+0x3e>
    // 1a: f2 41 0f 11 46 10             movsd   %xmm0, 0x10(%r14)
    // 20: 48 8b 03                      movq    (%rbx), %rax
    // 23: 85 c0                         testl   %eax, %eax
    // 25: 78 08                         js      0x2f <_JIT_ENTRY+0x2f>
    // 27: 48 ff c8                      decq    %rax
    // 2a: 48 89 03                      movq    %rax, (%rbx)
    // 2d: 74 70                         je      0x9f <_JIT_ENTRY+0x9f>
    // 2f: 4c 89 75 f0                   movq    %r14, -0x10(%rbp)
    // 33: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 37: 58                            popq    %rax
    // 38: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x3e <_JIT_ENTRY+0x3e>
    // 000000000000003a:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 3e: 48 83 3b 01                   cmpq    $0x1, (%rbx)
    // 42: 75 24                         jne     0x68 <_JIT_ENTRY+0x68>
    // 44: f2 0f 11 43 10                movsd   %xmm0, 0x10(%rbx)
    // 49: 49 8b 06                      movq    (%r14), %rax
    // 4c: 85 c0                         testl   %eax, %eax
    // 4e: 78 06                         js      0x56 <_JIT_ENTRY+0x56>
    // 50: 48 ff c8                      decq    %rax
    // 53: 49 89 06                      movq    %rax, (%r14)
    // 56: 49 89 de                      movq    %rbx, %r14
    // 59: 4c 89 75 f0                   movq    %r14, -0x10(%rbp)
    // 5d: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 61: 58                            popq    %rax
    // 62: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x68 <_JIT_ENTRY+0x68>
    // 0000000000000064:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 68: ff 15 00 00 00 00             callq   *(%rip)                 # 0x6e <_JIT_ENTRY+0x6e>
    // 000000000000006a:  R_X86_64_GOTPCRELX   PyFloat_FromDouble-0x4
    // 6e: 48 85 c0                      testq   %rax, %rax
    // 71: 74 68                         je      0xdb <_JIT_ENTRY+0xdb>
    // 73: 49 8b 0e                      movq    (%r14), %rcx
    // 76: 85 c9                         testl   %ecx, %ecx
    // 78: 78 06                         js      0x80 <_JIT_ENTRY+0x80>
    // 7a: 48 ff c9                      decq    %rcx
    // 7d: 49 89 0e                      movq    %rcx, (%r14)
    // 80: 48 8b 0b                      movq    (%rbx), %rcx
    // 83: 85 c9                         testl   %ecx, %ecx
    // 85: 78 06                         js      0x8d <_JIT_ENTRY+0x8d>
    // 87: 48 ff c9                      decq    %rcx
    // 8a: 48 89 0b                      movq    %rcx, (%rbx)
    // 8d: 49 89 c6                      movq    %rax, %r14
    // 90: 4c 89 75 f0                   movq    %r14, -0x10(%rbp)
    // 94: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 98: 58                            popq    %rax
    // 99: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x9f <_JIT_ENTRY+0x9f>
    // 000000000000009b:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 9f: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0xa6 <_JIT_ENTRY+0xa6>
    // 00000000000000a2:  R_X86_64_REX_GOTPCRELX       _PyRuntime-0x4
    // a6: 48 8b 81 48 28 00 00          movq    0x2848(%rcx), %rax
    // ad: 48 85 c0                      testq   %rax, %rax
    // b0: 74 11                         je      0xc3 <_JIT_ENTRY+0xc3>
    // b2: 48 8b 91 50 28 00 00          movq    0x2850(%rcx), %rdx
    // b9: 48 89 df                      movq    %rbx, %rdi
    // bc: be 01 00 00 00                movl    $0x1, %esi
    // c1: ff d0                         callq   *%rax
    // c3: 48 89 df                      movq    %rbx, %rdi
    // c6: ff 15 00 00 00 00             callq   *(%rip)                 # 0xcc <_JIT_ENTRY+0xcc>
    // 00000000000000c8:  R_X86_64_GOTPCRELX   _PyFloat_ExactDealloc-0x4
    // cc: 4c 89 75 f0                   movq    %r14, -0x10(%rbp)
    // d0: 48 83 c5 f8                   addq    $-0x8, %rbp
    // d4: 58                            popq    %rax
    // d5: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xdb <_JIT_ENTRY+0xdb>
    // 00000000000000d7:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // db: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0xe2 <_JIT_ENTRY+0xe2>
    // 00000000000000de:  R_X86_64_REX_GOTPCRELX       _JIT_EXECUTOR-0x4
    // e2: 49 89 84 24 10 01 00 00       movq    %rax, 0x110(%r12)
    // ea: 4c 29 ed                      subq    %r13, %rbp
    // ed: 48 83 c5 b8                   addq    $-0x48, %rbp
    // f1: 48 c1 ed 03                   shrq    $0x3, %rbp
    // f5: 41 89 6d 40                   movl    %ebp, 0x40(%r13)
    // f9: 31 c0                         xorl    %eax, %eax
    // fb: 59                            popq    %rcx
    // fc: c3                            retq
    // fd: 
    const unsigned char code_body[253] = {
        0x50, 0x4c, 0x8b, 0x75, 0xf0, 0x48, 0x8b, 0x5d,
        0xf8, 0xf2, 0x41, 0x0f, 0x10, 0x46, 0x10, 0xf2,
        0x0f, 0x5c, 0x43, 0x10, 0x49, 0x83, 0x3e, 0x01,
        0x75, 0x24, 0xf2, 0x41, 0x0f, 0x11, 0x46, 0x10,
        0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x08, 0x48,
        0xff, 0xc8, 0x48, 0x89, 0x03, 0x74, 0x70, 0x4c,
        0x89, 0x75, 0xf0, 0x48, 0x83, 0xc5, 0xf8, 0x58,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83,
        0x3b, 0x01, 0x75, 0x24, 0xf2, 0x0f, 0x11, 0x43,
        0x10, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x06,
        0x48, 0xff, 0xc8, 0x49, 0x89, 0x06, 0x49, 0x89,
        0xde, 0x4c, 0x89, 0x75, 0xf0, 0x48, 0x83, 0xc5,
        0xf8, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85,
        0xc0, 0x74, 0x68, 0x49, 0x8b, 0x0e, 0x85, 0xc9,
        0x78, 0x06, 0x48, 0xff, 0xc9, 0x49, 0x89, 0x0e,
        0x48, 0x8b, 0x0b, 0x85, 0xc9, 0x78, 0x06, 0x48,
        0xff, 0xc9, 0x48, 0x89, 0x0b, 0x49, 0x89, 0xc6,
        0x4c, 0x89, 0x75, 0xf0, 0x48, 0x83, 0xc5, 0xf8,
        0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x81, 0x48, 0x28, 0x00, 0x00, 0x48, 0x85, 0xc0,
        0x74, 0x11, 0x48, 0x8b, 0x91, 0x50, 0x28, 0x00,
        0x00, 0x48, 0x89, 0xdf, 0xbe, 0x01, 0x00, 0x00,
        0x00, 0xff, 0xd0, 0x48, 0x89, 0xdf, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x75, 0xf0,
        0x48, 0x83, 0xc5, 0xf8, 0x58, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x89, 0x84, 0x24, 0x10, 0x01,
        0x00, 0x00, 0x4c, 0x29, 0xed, 0x48, 0x83, 0xc5,
        0xb8, 0x48, 0xc1, 0xed, 0x03, 0x41, 0x89, 0x6d,
        0x40, 0x31, 0xc0, 0x59, 0xc3,
    };
    // 0: 
    // 0: CONTINUE
    // 8: &PyFloat_FromDouble+0x0
    // 10: &_PyRuntime+0x0
    // 18: &_PyFloat_ExactDealloc+0x0
    // 20: EXECUTOR
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, (uintptr_t)&PyFloat_FromDouble);
    patch_64(data + 0x10, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x18, (uintptr_t)&_PyFloat_ExactDealloc);
    patch_64(data + 0x20, (uintptr_t)executor);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3a, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x64, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x6a, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x9b, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xa2, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xc8, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xd7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xde, (uintptr_t)data + 0x1c);
}

void
emit__BINARY_OP_SUBTRACT_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_BINARY_OP_SUBTRACT_INT.o:     file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 4c 8b 75 f0                   movq    -0x10(%rbp), %r14
    // 5: 4c 8b 7d f8                   movq    -0x8(%rbp), %r15
    // 9: 4c 89 f7                      movq    %r14, %rdi
    // c: 4c 89 fe                      movq    %r15, %rsi
    // f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x15 <_JIT_ENTRY+0x15>
    // 0000000000000011:  R_X86_64_GOTPCRELX   _PyLong_Subtract-0x4
    // 15: 48 89 c3                      movq    %rax, %rbx
    // 18: 49 8b 07                      movq    (%r15), %rax
    // 1b: 85 c0                         testl   %eax, %eax
    // 1d: 78 08                         js      0x27 <_JIT_ENTRY+0x27>
    // 1f: 48 ff c8                      decq    %rax
    // 22: 49 89 07                      movq    %rax, (%r15)
    // 25: 74 3e                         je      0x65 <_JIT_ENTRY+0x65>
    // 27: 49 8b 06                      movq    (%r14), %rax
    // 2a: 85 c0                         testl   %eax, %eax
    // 2c: 78 6b                         js      0x99 <_JIT_ENTRY+0x99>
    // 2e: 48 ff c8                      decq    %rax
    // 31: 49 89 06                      movq    %rax, (%r14)
    // 34: 75 63                         jne     0x99 <_JIT_ENTRY+0x99>
    // 36: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x3d <_JIT_ENTRY+0x3d>
    // 0000000000000039:  R_X86_64_REX_GOTPCRELX       _PyRuntime-0x4
    // 3d: 48 8b 81 48 28 00 00          movq    0x2848(%rcx), %rax
    // 44: 48 85 c0                      testq   %rax, %rax
    // 47: 74 11                         je      0x5a <_JIT_ENTRY+0x5a>
    // 49: 48 8b 91 50 28 00 00          movq    0x2850(%rcx), %rdx
    // 50: 4c 89 f7                      movq    %r14, %rdi
    // 53: be 01 00 00 00                movl    $0x1, %esi
    // 58: ff d0                         callq   *%rax
    // 5a: 4c 89 f7                      movq    %r14, %rdi
    // 5d: ff 15 00 00 00 00             callq   *(%rip)                 # 0x63 <_JIT_ENTRY+0x63>
    // 000000000000005f:  R_X86_64_GOTPCRELX   PyObject_Free-0x4
    // 63: eb 34                         jmp     0x99 <_JIT_ENTRY+0x99>
    // 65: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x6c <_JIT_ENTRY+0x6c>
    // 0000000000000068:  R_X86_64_REX_GOTPCRELX       _PyRuntime-0x4
    // 6c: 48 8b 81 48 28 00 00          movq    0x2848(%rcx), %rax
    // 73: 48 85 c0                      testq   %rax, %rax
    // 76: 74 11                         je      0x89 <_JIT_ENTRY+0x89>
    // 78: 48 8b 91 50 28 00 00          movq    0x2850(%rcx), %rdx
    // 7f: 4c 89 ff                      movq    %r15, %rdi
    // 82: be 01 00 00 00                movl    $0x1, %esi
    // 87: ff d0                         callq   *%rax
    // 89: 4c 89 ff                      movq    %r15, %rdi
    // 8c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x92 <_JIT_ENTRY+0x92>
    // 000000000000008e:  R_X86_64_GOTPCRELX   PyObject_Free-0x4
    // 92: 49 8b 06                      movq    (%r14), %rax
    // 95: 85 c0                         testl   %eax, %eax
    // 97: 79 95                         jns     0x2e <_JIT_ENTRY+0x2e>
    // 99: 48 85 db                      testq   %rbx, %rbx
    // 9c: 74 0f                         je      0xad <_JIT_ENTRY+0xad>
    // 9e: 48 89 5d f0                   movq    %rbx, -0x10(%rbp)
    // a2: 48 83 c5 f8                   addq    $-0x8, %rbp
    // a6: 58                            popq    %rax
    // a7: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xad <_JIT_ENTRY+0xad>
    // 00000000000000a9:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // ad: 58                            popq    %rax
    // ae: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xb4 <_JIT_ENTRY+0xb4>
    // 00000000000000b0:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // b4: 
    const unsigned char code_body[180] = {
        0x50, 0x4c, 0x8b, 0x75, 0xf0, 0x4c, 0x8b, 0x7d,
        0xf8, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc3,
        0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x08, 0x48,
        0xff, 0xc8, 0x49, 0x89, 0x07, 0x74, 0x3e, 0x49,
        0x8b, 0x06, 0x85, 0xc0, 0x78, 0x6b, 0x48, 0xff,
        0xc8, 0x49, 0x89, 0x06, 0x75, 0x63, 0x48, 0x8b,
        0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x81,
        0x48, 0x28, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74,
        0x11, 0x48, 0x8b, 0x91, 0x50, 0x28, 0x00, 0x00,
        0x4c, 0x89, 0xf7, 0xbe, 0x01, 0x00, 0x00, 0x00,
        0xff, 0xd0, 0x4c, 0x89, 0xf7, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0xeb, 0x34, 0x48, 0x8b, 0x0d,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x81, 0x48,
        0x28, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x11,
        0x48, 0x8b, 0x91, 0x50, 0x28, 0x00, 0x00, 0x4c,
        0x89, 0xff, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xff,
        0xd0, 0x4c, 0x89, 0xff, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x79,
        0x95, 0x48, 0x85, 0xdb, 0x74, 0x0f, 0x48, 0x89,
        0x5d, 0xf0, 0x48, 0x83, 0xc5, 0xf8, 0x58, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &_PyLong_Subtract+0x0
    // 8: &_PyRuntime+0x0
    // 10: &PyObject_Free+0x0
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyLong_Subtract);
    patch_64(data + 0x8, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x10, (uintptr_t)&PyObject_Free);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x11, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x39, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x5f, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x68, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x8e, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xa9, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xb0, (uintptr_t)data + 0x1c);
}

void
emit__BINARY_SLICE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_BINARY_SLICE.o:       file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 75 f8                   movq    -0x8(%rbp), %rsi
    // 5: 48 8b 5d e8                   movq    -0x18(%rbp), %rbx
    // 9: 48 8b 7d f0                   movq    -0x10(%rbp), %rdi
    // d: ff 15 00 00 00 00             callq   *(%rip)                 # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  R_X86_64_GOTPCRELX   _PyBuildSlice_ConsumeRefs-0x4
    // 13: 48 85 c0                      testq   %rax, %rax
    // 16: 74 2c                         je      0x44 <_JIT_ENTRY+0x44>
    // 18: 49 89 c7                      movq    %rax, %r15
    // 1b: 48 89 df                      movq    %rbx, %rdi
    // 1e: 48 89 c6                      movq    %rax, %rsi
    // 21: ff 15 00 00 00 00             callq   *(%rip)                 # 0x27 <_JIT_ENTRY+0x27>
    // 0000000000000023:  R_X86_64_GOTPCRELX   PyObject_GetItem-0x4
    // 27: 49 89 c6                      movq    %rax, %r14
    // 2a: 49 8b 07                      movq    (%r15), %rax
    // 2d: 85 c0                         testl   %eax, %eax
    // 2f: 78 16                         js      0x47 <_JIT_ENTRY+0x47>
    // 31: 48 ff c8                      decq    %rax
    // 34: 49 89 07                      movq    %rax, (%r15)
    // 37: 75 0e                         jne     0x47 <_JIT_ENTRY+0x47>
    // 39: 4c 89 ff                      movq    %r15, %rdi
    // 3c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x42 <_JIT_ENTRY+0x42>
    // 000000000000003e:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 42: eb 03                         jmp     0x47 <_JIT_ENTRY+0x47>
    // 44: 45 31 f6                      xorl    %r14d, %r14d
    // 47: 48 8b 03                      movq    (%rbx), %rax
    // 4a: 85 c0                         testl   %eax, %eax
    // 4c: 78 08                         js      0x56 <_JIT_ENTRY+0x56>
    // 4e: 48 ff c8                      decq    %rax
    // 51: 48 89 03                      movq    %rax, (%rbx)
    // 54: 74 14                         je      0x6a <_JIT_ENTRY+0x6a>
    // 56: 4d 85 f6                      testq   %r14, %r14
    // 59: 74 1d                         je      0x78 <_JIT_ENTRY+0x78>
    // 5b: 4c 89 75 e8                   movq    %r14, -0x18(%rbp)
    // 5f: 48 83 c5 f0                   addq    $-0x10, %rbp
    // 63: 58                            popq    %rax
    // 64: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x6a <_JIT_ENTRY+0x6a>
    // 0000000000000066:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 6a: 48 89 df                      movq    %rbx, %rdi
    // 6d: ff 15 00 00 00 00             callq   *(%rip)                 # 0x73 <_JIT_ENTRY+0x73>
    // 000000000000006f:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 73: 4d 85 f6                      testq   %r14, %r14
    // 76: 75 e3                         jne     0x5b <_JIT_ENTRY+0x5b>
    // 78: 58                            popq    %rax
    // 79: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x7f <_JIT_ENTRY+0x7f>
    // 000000000000007b:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 7f: 
    const unsigned char code_body[127] = {
        0x50, 0x48, 0x8b, 0x75, 0xf8, 0x48, 0x8b, 0x5d,
        0xe8, 0x48, 0x8b, 0x7d, 0xf0, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x2c,
        0x49, 0x89, 0xc7, 0x48, 0x89, 0xdf, 0x48, 0x89,
        0xc6, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x89, 0xc6, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78,
        0x16, 0x48, 0xff, 0xc8, 0x49, 0x89, 0x07, 0x75,
        0x0e, 0x4c, 0x89, 0xff, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0xeb, 0x03, 0x45, 0x31, 0xf6, 0x48,
        0x8b, 0x03, 0x85, 0xc0, 0x78, 0x08, 0x48, 0xff,
        0xc8, 0x48, 0x89, 0x03, 0x74, 0x14, 0x4d, 0x85,
        0xf6, 0x74, 0x1d, 0x4c, 0x89, 0x75, 0xe8, 0x48,
        0x83, 0xc5, 0xf0, 0x58, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x4d, 0x85, 0xf6, 0x75, 0xe3,
        0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &_PyBuildSlice_ConsumeRefs+0x0
    // 8: &PyObject_GetItem+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyBuildSlice_ConsumeRefs);
    patch_64(data + 0x8, (uintptr_t)&PyObject_GetItem);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x23, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3e, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x66, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x6f, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x7b, (uintptr_t)data + 0x1c);
}

void
emit__BINARY_SUBSCR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_BINARY_SUBSCR.o:      file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 4c 8b 7d f0                   movq    -0x10(%rbp), %r15
    // 5: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 9: 4c 89 ff                      movq    %r15, %rdi
    // c: 4c 89 f6                      movq    %r14, %rsi
    // f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x15 <_JIT_ENTRY+0x15>
    // 0000000000000011:  R_X86_64_GOTPCRELX   PyObject_GetItem-0x4
    // 15: 48 89 c3                      movq    %rax, %rbx
    // 18: 49 8b 07                      movq    (%r15), %rax
    // 1b: 85 c0                         testl   %eax, %eax
    // 1d: 78 08                         js      0x27 <_JIT_ENTRY+0x27>
    // 1f: 48 ff c8                      decq    %rax
    // 22: 49 89 07                      movq    %rax, (%r15)
    // 25: 74 1a                         je      0x41 <_JIT_ENTRY+0x41>
    // 27: 49 8b 06                      movq    (%r14), %rax
    // 2a: 85 c0                         testl   %eax, %eax
    // 2c: 78 23                         js      0x51 <_JIT_ENTRY+0x51>
    // 2e: 48 ff c8                      decq    %rax
    // 31: 49 89 06                      movq    %rax, (%r14)
    // 34: 75 1b                         jne     0x51 <_JIT_ENTRY+0x51>
    // 36: 4c 89 f7                      movq    %r14, %rdi
    // 39: ff 15 00 00 00 00             callq   *(%rip)                 # 0x3f <_JIT_ENTRY+0x3f>
    // 000000000000003b:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 3f: eb 10                         jmp     0x51 <_JIT_ENTRY+0x51>
    // 41: 4c 89 ff                      movq    %r15, %rdi
    // 44: ff 15 00 00 00 00             callq   *(%rip)                 # 0x4a <_JIT_ENTRY+0x4a>
    // 0000000000000046:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 4a: 49 8b 06                      movq    (%r14), %rax
    // 4d: 85 c0                         testl   %eax, %eax
    // 4f: 79 dd                         jns     0x2e <_JIT_ENTRY+0x2e>
    // 51: 48 85 db                      testq   %rbx, %rbx
    // 54: 74 0f                         je      0x65 <_JIT_ENTRY+0x65>
    // 56: 48 89 5d f0                   movq    %rbx, -0x10(%rbp)
    // 5a: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 5e: 58                            popq    %rax
    // 5f: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x65 <_JIT_ENTRY+0x65>
    // 0000000000000061:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 65: 58                            popq    %rax
    // 66: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x6c <_JIT_ENTRY+0x6c>
    // 0000000000000068:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 6c: 
    const unsigned char code_body[108] = {
        0x50, 0x4c, 0x8b, 0x7d, 0xf0, 0x4c, 0x8b, 0x75,
        0xf8, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc3,
        0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x08, 0x48,
        0xff, 0xc8, 0x49, 0x89, 0x07, 0x74, 0x1a, 0x49,
        0x8b, 0x06, 0x85, 0xc0, 0x78, 0x23, 0x48, 0xff,
        0xc8, 0x49, 0x89, 0x06, 0x75, 0x1b, 0x4c, 0x89,
        0xf7, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0xeb,
        0x10, 0x4c, 0x89, 0xff, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x79,
        0xdd, 0x48, 0x85, 0xdb, 0x74, 0x0f, 0x48, 0x89,
        0x5d, 0xf0, 0x48, 0x83, 0xc5, 0xf8, 0x58, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &PyObject_GetItem+0x0
    // 8: &_Py_Dealloc+0x0
    // 10: CONTINUE
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyObject_GetItem);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x11, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x3b, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x46, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x61, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x68, (uintptr_t)data + 0x14);
}

void
emit__BINARY_SUBSCR_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_BINARY_SUBSCR_DICT.o: file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 4c 8b 7d f0                   movq    -0x10(%rbp), %r15
    // 5: 49 8b 47 08                   movq    0x8(%r15), %rax
    // 9: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x10 <_JIT_ENTRY+0x10>
    // 000000000000000c:  R_X86_64_REX_GOTPCRELX       PyDict_Type-0x4
    // 10: 74 07                         je      0x19 <_JIT_ENTRY+0x19>
    // 12: 58                            popq    %rax
    // 13: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x19 <_JIT_ENTRY+0x19>
    // 0000000000000015:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 19: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 1d: 48 89 e2                      movq    %rsp, %rdx
    // 20: 4c 89 ff                      movq    %r15, %rdi
    // 23: 48 89 de                      movq    %rbx, %rsi
    // 26: ff 15 00 00 00 00             callq   *(%rip)                 # 0x2c <_JIT_ENTRY+0x2c>
    // 0000000000000028:  R_X86_64_GOTPCRELX   PyDict_GetItemRef-0x4
    // 2c: 41 89 c6                      movl    %eax, %r14d
    // 2f: 85 c0                         testl   %eax, %eax
    // 31: 74 09                         je      0x3c <_JIT_ENTRY+0x3c>
    // 33: 49 8b 07                      movq    (%r15), %rax
    // 36: 85 c0                         testl   %eax, %eax
    // 38: 79 12                         jns     0x4c <_JIT_ENTRY+0x4c>
    // 3a: eb 21                         jmp     0x5d <_JIT_ENTRY+0x5d>
    // 3c: 48 89 df                      movq    %rbx, %rdi
    // 3f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x45 <_JIT_ENTRY+0x45>
    // 0000000000000041:  R_X86_64_GOTPCRELX   _PyErr_SetKeyError-0x4
    // 45: 49 8b 07                      movq    (%r15), %rax
    // 48: 85 c0                         testl   %eax, %eax
    // 4a: 78 11                         js      0x5d <_JIT_ENTRY+0x5d>
    // 4c: 48 ff c8                      decq    %rax
    // 4f: 49 89 07                      movq    %rax, (%r15)
    // 52: 75 09                         jne     0x5d <_JIT_ENTRY+0x5d>
    // 54: 4c 89 ff                      movq    %r15, %rdi
    // 57: ff 15 00 00 00 00             callq   *(%rip)                 # 0x5d <_JIT_ENTRY+0x5d>
    // 0000000000000059:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 5d: 48 8b 03                      movq    (%rbx), %rax
    // 60: 85 c0                         testl   %eax, %eax
    // 62: 78 08                         js      0x6c <_JIT_ENTRY+0x6c>
    // 64: 48 ff c8                      decq    %rax
    // 67: 48 89 03                      movq    %rax, (%rbx)
    // 6a: 74 18                         je      0x84 <_JIT_ENTRY+0x84>
    // 6c: 45 85 f6                      testl   %r14d, %r14d
    // 6f: 7e 21                         jle     0x92 <_JIT_ENTRY+0x92>
    // 71: 48 8b 04 24                   movq    (%rsp), %rax
    // 75: 48 89 45 f0                   movq    %rax, -0x10(%rbp)
    // 79: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 7d: 58                            popq    %rax
    // 7e: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x84 <_JIT_ENTRY+0x84>
    // 0000000000000080:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 84: 48 89 df                      movq    %rbx, %rdi
    // 87: ff 15 00 00 00 00             callq   *(%rip)                 # 0x8d <_JIT_ENTRY+0x8d>
    // 0000000000000089:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 8d: 45 85 f6                      testl   %r14d, %r14d
    // 90: 7f df                         jg      0x71 <_JIT_ENTRY+0x71>
    // 92: 58                            popq    %rax
    // 93: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x99 <_JIT_ENTRY+0x99>
    // 0000000000000095:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 99: 
    const unsigned char code_body[153] = {
        0x50, 0x4c, 0x8b, 0x7d, 0xf0, 0x49, 0x8b, 0x47,
        0x08, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x74, 0x07, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x5d, 0xf8, 0x48, 0x89, 0xe2,
        0x4c, 0x89, 0xff, 0x48, 0x89, 0xde, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x41, 0x89, 0xc6, 0x85,
        0xc0, 0x74, 0x09, 0x49, 0x8b, 0x07, 0x85, 0xc0,
        0x79, 0x12, 0xeb, 0x21, 0x48, 0x89, 0xdf, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x07,
        0x85, 0xc0, 0x78, 0x11, 0x48, 0xff, 0xc8, 0x49,
        0x89, 0x07, 0x75, 0x09, 0x4c, 0x89, 0xff, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x03,
        0x85, 0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8, 0x48,
        0x89, 0x03, 0x74, 0x18, 0x45, 0x85, 0xf6, 0x7e,
        0x21, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x89, 0x45,
        0xf0, 0x48, 0x83, 0xc5, 0xf8, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x45, 0x85, 0xf6,
        0x7f, 0xdf, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: 
    // 0: &PyDict_Type+0x0
    // 8: JUMP_TARGET
    // 10: &PyDict_GetItemRef+0x0
    // 18: &_PyErr_SetKeyError+0x0
    // 20: &_Py_Dealloc+0x0
    // 28: CONTINUE
    // 30: ERROR_TARGET
    const unsigned char data_body[56] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyDict_Type);
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&PyDict_GetItemRef);
    patch_64(data + 0x18, (uintptr_t)&_PyErr_SetKeyError);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x28, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x30, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xc, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x15, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x28, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x41, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x59, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x80, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x89, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x95, (uintptr_t)data + 0x2c);
}

void
emit__BINARY_SUBSCR_LIST_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_BINARY_SUBSCR_LIST_INT.o:     file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 5: 49 8b 46 08                   movq    0x8(%r14), %rax
    // 9: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x10 <_JIT_ENTRY+0x10>
    // 000000000000000c:  R_X86_64_REX_GOTPCRELX       PyLong_Type-0x4
    // 10: 0f 85 a2 00 00 00             jne     0xb8 <_JIT_ENTRY+0xb8>
    // 16: 48 8b 5d f0                   movq    -0x10(%rbp), %rbx
    // 1a: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // 1e: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x25 <_JIT_ENTRY+0x25>
    // 0000000000000021:  R_X86_64_REX_GOTPCRELX       PyList_Type-0x4
    // 25: 0f 85 8d 00 00 00             jne     0xb8 <_JIT_ENTRY+0xb8>
    // 2b: 49 83 7e 10 09                cmpq    $0x9, 0x10(%r14)
    // 30: 0f 83 82 00 00 00             jae     0xb8 <_JIT_ENTRY+0xb8>
    // 36: 41 8b 46 18                   movl    0x18(%r14), %eax
    // 3a: 48 39 43 10                   cmpq    %rax, 0x10(%rbx)
    // 3e: 7e 78                         jle     0xb8 <_JIT_ENTRY+0xb8>
    // 40: 48 8b 4b 18                   movq    0x18(%rbx), %rcx
    // 44: 4c 8b 3c c1                   movq    (%rcx,%rax,8), %r15
    // 48: 41 8b 07                      movl    (%r15), %eax
    // 4b: ff c0                         incl    %eax
    // 4d: 74 03                         je      0x52 <_JIT_ENTRY+0x52>
    // 4f: 41 89 07                      movl    %eax, (%r15)
    // 52: 49 8b 06                      movq    (%r14), %rax
    // 55: 85 c0                         testl   %eax, %eax
    // 57: 78 35                         js      0x8e <_JIT_ENTRY+0x8e>
    // 59: 48 ff c8                      decq    %rax
    // 5c: 49 89 06                      movq    %rax, (%r14)
    // 5f: 75 2d                         jne     0x8e <_JIT_ENTRY+0x8e>
    // 61: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x68 <_JIT_ENTRY+0x68>
    // 0000000000000064:  R_X86_64_REX_GOTPCRELX       _PyRuntime-0x4
    // 68: 48 8b 81 48 28 00 00          movq    0x2848(%rcx), %rax
    // 6f: 48 85 c0                      testq   %rax, %rax
    // 72: 74 11                         je      0x85 <_JIT_ENTRY+0x85>
    // 74: 48 8b 91 50 28 00 00          movq    0x2850(%rcx), %rdx
    // 7b: 4c 89 f7                      movq    %r14, %rdi
    // 7e: be 01 00 00 00                movl    $0x1, %esi
    // 83: ff d0                         callq   *%rax
    // 85: 4c 89 f7                      movq    %r14, %rdi
    // 88: ff 15 00 00 00 00             callq   *(%rip)                 # 0x8e <_JIT_ENTRY+0x8e>
    // 000000000000008a:  R_X86_64_GOTPCRELX   PyObject_Free-0x4
    // 8e: 4c 8d 75 f8                   leaq    -0x8(%rbp), %r14
    // 92: 48 8b 03                      movq    (%rbx), %rax
    // 95: 85 c0                         testl   %eax, %eax
    // 97: 78 11                         js      0xaa <_JIT_ENTRY+0xaa>
    // 99: 48 ff c8                      decq    %rax
    // 9c: 48 89 03                      movq    %rax, (%rbx)
    // 9f: 75 09                         jne     0xaa <_JIT_ENTRY+0xaa>
    // a1: 48 89 df                      movq    %rbx, %rdi
    // a4: ff 15 00 00 00 00             callq   *(%rip)                 # 0xaa <_JIT_ENTRY+0xaa>
    // 00000000000000a6:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // aa: 4c 89 7d f0                   movq    %r15, -0x10(%rbp)
    // ae: 4c 89 f5                      movq    %r14, %rbp
    // b1: 58                            popq    %rax
    // b2: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xb8 <_JIT_ENTRY+0xb8>
    // 00000000000000b4:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // b8: 58                            popq    %rax
    // b9: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xbf <_JIT_ENTRY+0xbf>
    // 00000000000000bb:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // bf: 
    const unsigned char code_body[191] = {
        0x50, 0x4c, 0x8b, 0x75, 0xf8, 0x49, 0x8b, 0x46,
        0x08, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0x85, 0xa2, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x5d, 0xf0, 0x48, 0x8b, 0x43, 0x08, 0x48, 0x3b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x85, 0x8d,
        0x00, 0x00, 0x00, 0x49, 0x83, 0x7e, 0x10, 0x09,
        0x0f, 0x83, 0x82, 0x00, 0x00, 0x00, 0x41, 0x8b,
        0x46, 0x18, 0x48, 0x39, 0x43, 0x10, 0x7e, 0x78,
        0x48, 0x8b, 0x4b, 0x18, 0x4c, 0x8b, 0x3c, 0xc1,
        0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x03, 0x41,
        0x89, 0x07, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78,
        0x35, 0x48, 0xff, 0xc8, 0x49, 0x89, 0x06, 0x75,
        0x2d, 0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x81, 0x48, 0x28, 0x00, 0x00, 0x48,
        0x85, 0xc0, 0x74, 0x11, 0x48, 0x8b, 0x91, 0x50,
        0x28, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xbe, 0x01,
        0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0xf7,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8d,
        0x75, 0xf8, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78,
        0x11, 0x48, 0xff, 0xc8, 0x48, 0x89, 0x03, 0x75,
        0x09, 0x48, 0x89, 0xdf, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x4c, 0x89, 0x7d, 0xf0, 0x4c, 0x89,
        0xf5, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &PyLong_Type+0x0
    // 8: &PyList_Type+0x0
    // 10: &_PyRuntime+0x0
    // 18: &PyObject_Free+0x0
    // 20: &_Py_Dealloc+0x0
    // 28: CONTINUE
    // 30: JUMP_TARGET
    const unsigned char data_body[56] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    patch_64(data + 0x8, (uintptr_t)&PyList_Type);
    patch_64(data + 0x10, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x18, (uintptr_t)&PyObject_Free);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x28, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x30, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xc, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x21, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x64, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x8a, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xa6, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xb4, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0xbb, (uintptr_t)data + 0x2c);
}

void
emit__BINARY_SUBSCR_STR_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_BINARY_SUBSCR_STR_INT.o:      file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 5: 49 8b 46 08                   movq    0x8(%r14), %rax
    // 9: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x10 <_JIT_ENTRY+0x10>
    // 000000000000000c:  R_X86_64_REX_GOTPCRELX       PyLong_Type-0x4
    // 10: 0f 85 c2 00 00 00             jne     0xd8 <_JIT_ENTRY+0xd8>
    // 16: 48 8b 5d f0                   movq    -0x10(%rbp), %rbx
    // 1a: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // 1e: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x25 <_JIT_ENTRY+0x25>
    // 0000000000000021:  R_X86_64_REX_GOTPCRELX       PyUnicode_Type-0x4
    // 25: 0f 85 ad 00 00 00             jne     0xd8 <_JIT_ENTRY+0xd8>
    // 2b: 49 83 7e 10 09                cmpq    $0x9, 0x10(%r14)
    // 30: 0f 83 a2 00 00 00             jae     0xd8 <_JIT_ENTRY+0xd8>
    // 36: 41 8b 46 18                   movl    0x18(%r14), %eax
    // 3a: 48 39 43 10                   cmpq    %rax, 0x10(%rbx)
    // 3e: 0f 8e 94 00 00 00             jle     0xd8 <_JIT_ENTRY+0xd8>
    // 44: 8b 4b 20                      movl    0x20(%rbx), %ecx
    // 47: 89 ca                         movl    %ecx, %edx
    // 49: c1 ea 02                      shrl    $0x2, %edx
    // 4c: 83 e2 07                      andl    $0x7, %edx
    // 4f: 83 fa 02                      cmpl    $0x2, %edx
    // 52: 74 15                         je      0x69 <_JIT_ENTRY+0x69>
    // 54: 83 fa 01                      cmpl    $0x1, %edx
    // 57: 75 20                         jne     0x79 <_JIT_ENTRY+0x79>
    // 59: f6 c1 20                      testb   $0x20, %cl
    // 5c: 75 26                         jne     0x84 <_JIT_ENTRY+0x84>
    // 5e: 48 8b 4b 38                   movq    0x38(%rbx), %rcx
    // 62: 44 0f b6 3c 01                movzbl  (%rcx,%rax), %r15d
    // 67: eb 66                         jmp     0xcf <_JIT_ENTRY+0xcf>
    // 69: f6 c1 20                      testb   $0x20, %cl
    // 6c: 75 30                         jne     0x9e <_JIT_ENTRY+0x9e>
    // 6e: 48 8b 4b 38                   movq    0x38(%rbx), %rcx
    // 72: 44 0f b7 3c 41                movzwl  (%rcx,%rax,2), %r15d
    // 77: eb 56                         jmp     0xcf <_JIT_ENTRY+0xcf>
    // 79: f6 c1 20                      testb   $0x20, %cl
    // 7c: 75 3a                         jne     0xb8 <_JIT_ENTRY+0xb8>
    // 7e: 48 8b 4b 38                   movq    0x38(%rbx), %rcx
    // 82: eb 47                         jmp     0xcb <_JIT_ENTRY+0xcb>
    // 84: 31 d2                         xorl    %edx, %edx
    // 86: f6 c1 40                      testb   $0x40, %cl
    // 89: 0f 94 c2                      sete    %dl
    // 8c: c1 e2 04                      shll    $0x4, %edx
    // 8f: 48 8d 0c 13                   leaq    (%rbx,%rdx), %rcx
    // 93: 48 83 c1 28                   addq    $0x28, %rcx
    // 97: 44 0f b6 3c 01                movzbl  (%rcx,%rax), %r15d
    // 9c: eb 31                         jmp     0xcf <_JIT_ENTRY+0xcf>
    // 9e: 31 d2                         xorl    %edx, %edx
    // a0: f6 c1 40                      testb   $0x40, %cl
    // a3: 0f 94 c2                      sete    %dl
    // a6: c1 e2 04                      shll    $0x4, %edx
    // a9: 48 8d 0c 13                   leaq    (%rbx,%rdx), %rcx
    // ad: 48 83 c1 28                   addq    $0x28, %rcx
    // b1: 44 0f b7 3c 41                movzwl  (%rcx,%rax,2), %r15d
    // b6: eb 17                         jmp     0xcf <_JIT_ENTRY+0xcf>
    // b8: 31 d2                         xorl    %edx, %edx
    // ba: f6 c1 40                      testb   $0x40, %cl
    // bd: 0f 94 c2                      sete    %dl
    // c0: c1 e2 04                      shll    $0x4, %edx
    // c3: 48 8d 0c 13                   leaq    (%rbx,%rdx), %rcx
    // c7: 48 83 c1 28                   addq    $0x28, %rcx
    // cb: 44 8b 3c 81                   movl    (%rcx,%rax,4), %r15d
    // cf: 41 81 ff 80 00 00 00          cmpl    $0x80, %r15d
    // d6: 72 07                         jb      0xdf <_JIT_ENTRY+0xdf>
    // d8: 58                            popq    %rax
    // d9: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xdf <_JIT_ENTRY+0xdf>
    // 00000000000000db:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // df: 49 8b 06                      movq    (%r14), %rax
    // e2: 85 c0                         testl   %eax, %eax
    // e4: 78 35                         js      0x11b <_JIT_ENTRY+0x11b>
    // e6: 48 ff c8                      decq    %rax
    // e9: 49 89 06                      movq    %rax, (%r14)
    // ec: 75 2d                         jne     0x11b <_JIT_ENTRY+0x11b>
    // ee: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0xf5 <_JIT_ENTRY+0xf5>
    // 00000000000000f1:  R_X86_64_REX_GOTPCRELX       _PyRuntime-0x4
    // f5: 48 8b 81 48 28 00 00          movq    0x2848(%rcx), %rax
    // fc: 48 85 c0                      testq   %rax, %rax
    // ff: 74 11                         je      0x112 <_JIT_ENTRY+0x112>
    // 101: 48 8b 91 50 28 00 00          movq    0x2850(%rcx), %rdx
    // 108: 4c 89 f7                      movq    %r14, %rdi
    // 10b: be 01 00 00 00                movl    $0x1, %esi
    // 110: ff d0                         callq   *%rax
    // 112: 4c 89 f7                      movq    %r14, %rdi
    // 115: ff 15 00 00 00 00             callq   *(%rip)                 # 0x11b <_JIT_ENTRY+0x11b>
    // 0000000000000117:  R_X86_64_GOTPCRELX   PyObject_Free-0x4
    // 11b: 4c 8d 75 f8                   leaq    -0x8(%rbp), %r14
    // 11f: 48 8b 03                      movq    (%rbx), %rax
    // 122: 85 c0                         testl   %eax, %eax
    // 124: 78 11                         js      0x137 <_JIT_ENTRY+0x137>
    // 126: 48 ff c8                      decq    %rax
    // 129: 48 89 03                      movq    %rax, (%rbx)
    // 12c: 75 09                         jne     0x137 <_JIT_ENTRY+0x137>
    // 12e: 48 89 df                      movq    %rbx, %rdi
    // 131: ff 15 00 00 00 00             callq   *(%rip)                 # 0x137 <_JIT_ENTRY+0x137>
    // 0000000000000133:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 137: 44 89 f8                      movl    %r15d, %eax
    // 13a: 48 8d 04 40                   leaq    (%rax,%rax,2), %rax
    // 13e: 48 c1 e0 04                   shlq    $0x4, %rax
    // 142: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x149 <_JIT_ENTRY+0x149>
    // 0000000000000145:  R_X86_64_REX_GOTPCRELX       _PyRuntime-0x4
    // 149: 48 01 c8                      addq    %rcx, %rax
    // 14c: 48 05 d8 20 01 00             addq    $0x120d8, %rax          # imm = 0x120D8
    // 152: 48 89 45 f0                   movq    %rax, -0x10(%rbp)
    // 156: 4c 89 f5                      movq    %r14, %rbp
    // 159: 58                            popq    %rax
    // 15a: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x160 <_JIT_ENTRY+0x160>
    // 000000000000015c:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 15a: 
    const unsigned char code_body[346] = {
        0x50, 0x4c, 0x8b, 0x75, 0xf8, 0x49, 0x8b, 0x46,
        0x08, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0x85, 0xc2, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x5d, 0xf0, 0x48, 0x8b, 0x43, 0x08, 0x48, 0x3b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x85, 0xad,
        0x00, 0x00, 0x00, 0x49, 0x83, 0x7e, 0x10, 0x09,
        0x0f, 0x83, 0xa2, 0x00, 0x00, 0x00, 0x41, 0x8b,
        0x46, 0x18, 0x48, 0x39, 0x43, 0x10, 0x0f, 0x8e,
        0x94, 0x00, 0x00, 0x00, 0x8b, 0x4b, 0x20, 0x89,
        0xca, 0xc1, 0xea, 0x02, 0x83, 0xe2, 0x07, 0x83,
        0xfa, 0x02, 0x74, 0x15, 0x83, 0xfa, 0x01, 0x75,
        0x20, 0xf6, 0xc1, 0x20, 0x75, 0x26, 0x48, 0x8b,
        0x4b, 0x38, 0x44, 0x0f, 0xb6, 0x3c, 0x01, 0xeb,
        0x66, 0xf6, 0xc1, 0x20, 0x75, 0x30, 0x48, 0x8b,
        0x4b, 0x38, 0x44, 0x0f, 0xb7, 0x3c, 0x41, 0xeb,
        0x56, 0xf6, 0xc1, 0x20, 0x75, 0x3a, 0x48, 0x8b,
        0x4b, 0x38, 0xeb, 0x47, 0x31, 0xd2, 0xf6, 0xc1,
        0x40, 0x0f, 0x94, 0xc2, 0xc1, 0xe2, 0x04, 0x48,
        0x8d, 0x0c, 0x13, 0x48, 0x83, 0xc1, 0x28, 0x44,
        0x0f, 0xb6, 0x3c, 0x01, 0xeb, 0x31, 0x31, 0xd2,
        0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2, 0xc1, 0xe2,
        0x04, 0x48, 0x8d, 0x0c, 0x13, 0x48, 0x83, 0xc1,
        0x28, 0x44, 0x0f, 0xb7, 0x3c, 0x41, 0xeb, 0x17,
        0x31, 0xd2, 0xf6, 0xc1, 0x40, 0x0f, 0x94, 0xc2,
        0xc1, 0xe2, 0x04, 0x48, 0x8d, 0x0c, 0x13, 0x48,
        0x83, 0xc1, 0x28, 0x44, 0x8b, 0x3c, 0x81, 0x41,
        0x81, 0xff, 0x80, 0x00, 0x00, 0x00, 0x72, 0x07,
        0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x8b, 0x06, 0x85, 0xc0, 0x78, 0x35, 0x48, 0xff,
        0xc8, 0x49, 0x89, 0x06, 0x75, 0x2d, 0x48, 0x8b,
        0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x81,
        0x48, 0x28, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74,
        0x11, 0x48, 0x8b, 0x91, 0x50, 0x28, 0x00, 0x00,
        0x4c, 0x89, 0xf7, 0xbe, 0x01, 0x00, 0x00, 0x00,
        0xff, 0xd0, 0x4c, 0x89, 0xf7, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x4c, 0x8d, 0x75, 0xf8, 0x48,
        0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xff,
        0xc8, 0x48, 0x89, 0x03, 0x75, 0x09, 0x48, 0x89,
        0xdf, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x44,
        0x89, 0xf8, 0x48, 0x8d, 0x04, 0x40, 0x48, 0xc1,
        0xe0, 0x04, 0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x01, 0xc8, 0x48, 0x05, 0xd8, 0x20,
        0x01, 0x00, 0x48, 0x89, 0x45, 0xf0, 0x4c, 0x89,
        0xf5, 0x58,
    };
    // 0: 
    // 0: &PyLong_Type+0x0
    // 8: &PyUnicode_Type+0x0
    // 10: JUMP_TARGET
    // 18: &_PyRuntime+0x0
    // 20: &PyObject_Free+0x0
    // 28: &_Py_Dealloc+0x0
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    patch_64(data + 0x8, (uintptr_t)&PyUnicode_Type);
    patch_64(data + 0x10, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x20, (uintptr_t)&PyObject_Free);
    patch_64(data + 0x28, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xc, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x21, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xdb, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xf1, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x117, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x133, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x145, (uintptr_t)data + 0x14);
}

void
emit__BINARY_SUBSCR_TUPLE_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_BINARY_SUBSCR_TUPLE_INT.o:    file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 5: 49 8b 46 08                   movq    0x8(%r14), %rax
    // 9: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x10 <_JIT_ENTRY+0x10>
    // 000000000000000c:  R_X86_64_REX_GOTPCRELX       PyLong_Type-0x4
    // 10: 0f 85 9b 00 00 00             jne     0xb1 <_JIT_ENTRY+0xb1>
    // 16: 48 8b 5d f0                   movq    -0x10(%rbp), %rbx
    // 1a: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // 1e: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x25 <_JIT_ENTRY+0x25>
    // 0000000000000021:  R_X86_64_REX_GOTPCRELX       PyTuple_Type-0x4
    // 25: 0f 85 86 00 00 00             jne     0xb1 <_JIT_ENTRY+0xb1>
    // 2b: 49 83 7e 10 09                cmpq    $0x9, 0x10(%r14)
    // 30: 73 7f                         jae     0xb1 <_JIT_ENTRY+0xb1>
    // 32: 41 8b 46 18                   movl    0x18(%r14), %eax
    // 36: 48 39 43 10                   cmpq    %rax, 0x10(%rbx)
    // 3a: 7e 75                         jle     0xb1 <_JIT_ENTRY+0xb1>
    // 3c: 4c 8b 7c c3 18                movq    0x18(%rbx,%rax,8), %r15
    // 41: 41 8b 07                      movl    (%r15), %eax
    // 44: ff c0                         incl    %eax
    // 46: 74 03                         je      0x4b <_JIT_ENTRY+0x4b>
    // 48: 41 89 07                      movl    %eax, (%r15)
    // 4b: 49 8b 06                      movq    (%r14), %rax
    // 4e: 85 c0                         testl   %eax, %eax
    // 50: 78 35                         js      0x87 <_JIT_ENTRY+0x87>
    // 52: 48 ff c8                      decq    %rax
    // 55: 49 89 06                      movq    %rax, (%r14)
    // 58: 75 2d                         jne     0x87 <_JIT_ENTRY+0x87>
    // 5a: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x61 <_JIT_ENTRY+0x61>
    // 000000000000005d:  R_X86_64_REX_GOTPCRELX       _PyRuntime-0x4
    // 61: 48 8b 81 48 28 00 00          movq    0x2848(%rcx), %rax
    // 68: 48 85 c0                      testq   %rax, %rax
    // 6b: 74 11                         je      0x7e <_JIT_ENTRY+0x7e>
    // 6d: 48 8b 91 50 28 00 00          movq    0x2850(%rcx), %rdx
    // 74: 4c 89 f7                      movq    %r14, %rdi
    // 77: be 01 00 00 00                movl    $0x1, %esi
    // 7c: ff d0                         callq   *%rax
    // 7e: 4c 89 f7                      movq    %r14, %rdi
    // 81: ff 15 00 00 00 00             callq   *(%rip)                 # 0x87 <_JIT_ENTRY+0x87>
    // 0000000000000083:  R_X86_64_GOTPCRELX   PyObject_Free-0x4
    // 87: 4c 8d 75 f8                   leaq    -0x8(%rbp), %r14
    // 8b: 48 8b 03                      movq    (%rbx), %rax
    // 8e: 85 c0                         testl   %eax, %eax
    // 90: 78 11                         js      0xa3 <_JIT_ENTRY+0xa3>
    // 92: 48 ff c8                      decq    %rax
    // 95: 48 89 03                      movq    %rax, (%rbx)
    // 98: 75 09                         jne     0xa3 <_JIT_ENTRY+0xa3>
    // 9a: 48 89 df                      movq    %rbx, %rdi
    // 9d: ff 15 00 00 00 00             callq   *(%rip)                 # 0xa3 <_JIT_ENTRY+0xa3>
    // 000000000000009f:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // a3: 4c 89 7d f0                   movq    %r15, -0x10(%rbp)
    // a7: 4c 89 f5                      movq    %r14, %rbp
    // aa: 58                            popq    %rax
    // ab: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xb1 <_JIT_ENTRY+0xb1>
    // 00000000000000ad:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // b1: 58                            popq    %rax
    // b2: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xb8 <_JIT_ENTRY+0xb8>
    // 00000000000000b4:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // b8: 
    const unsigned char code_body[184] = {
        0x50, 0x4c, 0x8b, 0x75, 0xf8, 0x49, 0x8b, 0x46,
        0x08, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0x85, 0x9b, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x5d, 0xf0, 0x48, 0x8b, 0x43, 0x08, 0x48, 0x3b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x85, 0x86,
        0x00, 0x00, 0x00, 0x49, 0x83, 0x7e, 0x10, 0x09,
        0x73, 0x7f, 0x41, 0x8b, 0x46, 0x18, 0x48, 0x39,
        0x43, 0x10, 0x7e, 0x75, 0x4c, 0x8b, 0x7c, 0xc3,
        0x18, 0x41, 0x8b, 0x07, 0xff, 0xc0, 0x74, 0x03,
        0x41, 0x89, 0x07, 0x49, 0x8b, 0x06, 0x85, 0xc0,
        0x78, 0x35, 0x48, 0xff, 0xc8, 0x49, 0x89, 0x06,
        0x75, 0x2d, 0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x81, 0x48, 0x28, 0x00, 0x00,
        0x48, 0x85, 0xc0, 0x74, 0x11, 0x48, 0x8b, 0x91,
        0x50, 0x28, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xbe,
        0x01, 0x00, 0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89,
        0xf7, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4c,
        0x8d, 0x75, 0xf8, 0x48, 0x8b, 0x03, 0x85, 0xc0,
        0x78, 0x11, 0x48, 0xff, 0xc8, 0x48, 0x89, 0x03,
        0x75, 0x09, 0x48, 0x89, 0xdf, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x4c, 0x89, 0x7d, 0xf0, 0x4c,
        0x89, 0xf5, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &PyLong_Type+0x0
    // 8: &PyTuple_Type+0x0
    // 10: &_PyRuntime+0x0
    // 18: &PyObject_Free+0x0
    // 20: &_Py_Dealloc+0x0
    // 28: CONTINUE
    // 30: JUMP_TARGET
    const unsigned char data_body[56] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    patch_64(data + 0x8, (uintptr_t)&PyTuple_Type);
    patch_64(data + 0x10, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x18, (uintptr_t)&PyObject_Free);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x28, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x30, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xc, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x21, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x5d, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x83, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x9f, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xad, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0xb4, (uintptr_t)data + 0x2c);
}

void
emit__BUILD_CONST_KEY_MAP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_BUILD_CONST_KEY_MAP.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 4c 89 64 24 10                movq    %r12, 0x10(%rsp)
    // 9: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
    // e: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x15 <_JIT_ENTRY+0x15>
    // 0000000000000011:  R_X86_64_REX_GOTPCRELX       _JIT_OPARG-0x4
    // 15: 44 0f b7 e0                   movzwl  %ax, %r12d
    // 19: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 1d: 44 89 e1                      movl    %r12d, %ecx
    // 20: f7 d1                         notl    %ecx
    // 22: 48 63 c9                      movslq  %ecx, %rcx
    // 25: 48 8d 54 cd 00                leaq    (%rbp,%rcx,8), %rdx
    // 2a: 49 8d 7e 18                   leaq    0x18(%r14), %rdi
    // 2e: 0f b7 d8                      movzwl  %ax, %ebx
    // 31: be 01 00 00 00                movl    $0x1, %esi
    // 36: b9 01 00 00 00                movl    $0x1, %ecx
    // 3b: 48 89 54 24 18                movq    %rdx, 0x18(%rsp)
    // 40: 49 89 d8                      movq    %rbx, %r8
    // 43: ff 15 00 00 00 00             callq   *(%rip)                 # 0x49 <_JIT_ENTRY+0x49>
    // 0000000000000045:  R_X86_64_GOTPCRELX   _PyDict_FromItems-0x4
    // 49: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
    // 4e: 66 85 db                      testw   %bx, %bx
    // 51: 74 4f                         je      0xa2 <_JIT_ENTRY+0xa2>
    // 53: 48 ff c3                      incq    %rbx
    // 56: 44 89 e0                      movl    %r12d, %eax
    // 59: f7 d8                         negl    %eax
    // 5b: 48 98                         cltq
    // 5d: 4c 8d 2c c5 f0 ff ff ff       leaq    -0x10(,%rax,8), %r13
    // 65: 49 01 ed                      addq    %rbp, %r13
    // 68: 4c 8b 3d 00 00 00 00          movq    (%rip), %r15            # 0x6f <_JIT_ENTRY+0x6f>
    // 000000000000006b:  R_X86_64_REX_GOTPCRELX       _Py_Dealloc-0x4
    // 6f: eb 18                         jmp     0x89 <_JIT_ENTRY+0x89>
    // 71: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
    // 80: 48 ff cb                      decq    %rbx
    // 83: 48 83 fb 01                   cmpq    $0x1, %rbx
    // 87: 76 19                         jbe     0xa2 <_JIT_ENTRY+0xa2>
    // 89: 49 8b 7c dd f8                movq    -0x8(%r13,%rbx,8), %rdi
    // 8e: 48 8b 07                      movq    (%rdi), %rax
    // 91: 85 c0                         testl   %eax, %eax
    // 93: 78 eb                         js      0x80 <_JIT_ENTRY+0x80>
    // 95: 48 ff c8                      decq    %rax
    // 98: 48 89 07                      movq    %rax, (%rdi)
    // 9b: 75 e3                         jne     0x80 <_JIT_ENTRY+0x80>
    // 9d: 41 ff d7                      callq   *%r15
    // a0: eb de                         jmp     0x80 <_JIT_ENTRY+0x80>
    // a2: 49 8b 06                      movq    (%r14), %rax
    // a5: 85 c0                         testl   %eax, %eax
    // a7: 78 08                         js      0xb1 <_JIT_ENTRY+0xb1>
    // a9: 48 ff c8                      decq    %rax
    // ac: 49 89 06                      movq    %rax, (%r14)
    // af: 74 31                         je      0xe2 <_JIT_ENTRY+0xe2>
    // b1: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
    // b6: 48 85 c9                      testq   %rcx, %rcx
    // b9: 74 3a                         je      0xf5 <_JIT_ENTRY+0xf5>
    // bb: 48 8b 44 24 18                movq    0x18(%rsp), %rax
    // c0: 48 89 08                      movq    %rcx, (%rax)
    // c3: 41 f7 dc                      negl    %r12d
    // c6: 49 63 c4                      movslq  %r12d, %rax
    // c9: 48 8d 6c c5 00                leaq    (%rbp,%rax,8), %rbp
    // ce: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
    // d3: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
    // d8: 48 83 c4 28                   addq    $0x28, %rsp
    // dc: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xe2 <_JIT_ENTRY+0xe2>
    // 00000000000000de:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // e2: 4c 89 f7                      movq    %r14, %rdi
    // e5: ff 15 00 00 00 00             callq   *(%rip)                 # 0xeb <_JIT_ENTRY+0xeb>
    // 00000000000000e7:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // eb: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
    // f0: 48 85 c9                      testq   %rcx, %rcx
    // f3: 75 c6                         jne     0xbb <_JIT_ENTRY+0xbb>
    // f5: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
    // fa: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
    // ff: 48 83 c4 28                   addq    $0x28, %rsp
    // 103: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x109 <_JIT_ENTRY+0x109>
    // 0000000000000105:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 109: 
    const unsigned char code_body[265] = {
        0x48, 0x83, 0xec, 0x28, 0x4c, 0x89, 0x64, 0x24,
        0x10, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x48, 0x8b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7,
        0xe0, 0x4c, 0x8b, 0x75, 0xf8, 0x44, 0x89, 0xe1,
        0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x8d, 0x54,
        0xcd, 0x00, 0x49, 0x8d, 0x7e, 0x18, 0x0f, 0xb7,
        0xd8, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xb9, 0x01,
        0x00, 0x00, 0x00, 0x48, 0x89, 0x54, 0x24, 0x18,
        0x49, 0x89, 0xd8, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0x44, 0x24, 0x20, 0x66, 0x85,
        0xdb, 0x74, 0x4f, 0x48, 0xff, 0xc3, 0x44, 0x89,
        0xe0, 0xf7, 0xd8, 0x48, 0x98, 0x4c, 0x8d, 0x2c,
        0xc5, 0xf0, 0xff, 0xff, 0xff, 0x49, 0x01, 0xed,
        0x4c, 0x8b, 0x3d, 0x00, 0x00, 0x00, 0x00, 0xeb,
        0x18, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x48, 0xff, 0xcb, 0x48, 0x83, 0xfb, 0x01, 0x76,
        0x19, 0x49, 0x8b, 0x7c, 0xdd, 0xf8, 0x48, 0x8b,
        0x07, 0x85, 0xc0, 0x78, 0xeb, 0x48, 0xff, 0xc8,
        0x48, 0x89, 0x07, 0x75, 0xe3, 0x41, 0xff, 0xd7,
        0xeb, 0xde, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78,
        0x08, 0x48, 0xff, 0xc8, 0x49, 0x89, 0x06, 0x74,
        0x31, 0x48, 0x8b, 0x4c, 0x24, 0x20, 0x48, 0x85,
        0xc9, 0x74, 0x3a, 0x48, 0x8b, 0x44, 0x24, 0x18,
        0x48, 0x89, 0x08, 0x41, 0xf7, 0xdc, 0x49, 0x63,
        0xc4, 0x48, 0x8d, 0x6c, 0xc5, 0x00, 0x4c, 0x8b,
        0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x64, 0x24, 0x10,
        0x48, 0x83, 0xc4, 0x28, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x4c, 0x24, 0x20,
        0x48, 0x85, 0xc9, 0x75, 0xc6, 0x4c, 0x8b, 0x6c,
        0x24, 0x08, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x48,
        0x83, 0xc4, 0x28, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: &_PyDict_FromItems+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyDict_FromItems);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x11, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x45, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x6b, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xde, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xe7, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x105, (uintptr_t)data + 0x1c);
}

void
emit__BUILD_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_BUILD_LIST.o: file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 4c 8b 35 00 00 00 00          movq    (%rip), %r14            # 0x8 <_JIT_ENTRY+0x8>
    // 0000000000000004:  R_X86_64_REX_GOTPCRELX       _JIT_OPARG-0x4
    // 8: 41 0f b7 f6                   movzwl  %r14w, %esi
    // c: 8d 04 f5 00 00 00 00          leal    (,%rsi,8), %eax
    // 13: 48 89 eb                      movq    %rbp, %rbx
    // 16: 48 29 c3                      subq    %rax, %rbx
    // 19: 48 89 df                      movq    %rbx, %rdi
    // 1c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x22 <_JIT_ENTRY+0x22>
    // 000000000000001e:  R_X86_64_GOTPCRELX   _PyList_FromArraySteal-0x4
    // 22: 48 85 c0                      testq   %rax, %rax
    // 25: 74 1c                         je      0x43 <_JIT_ENTRY+0x43>
    // 27: 41 0f b7 ce                   movzwl  %r14w, %ecx
    // 2b: 48 89 03                      movq    %rax, (%rbx)
    // 2e: b8 01 00 00 00                movl    $0x1, %eax
    // 33: 29 c8                         subl    %ecx, %eax
    // 35: 48 98                         cltq
    // 37: 48 8d 6c c5 00                leaq    (%rbp,%rax,8), %rbp
    // 3c: 58                            popq    %rax
    // 3d: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x43 <_JIT_ENTRY+0x43>
    // 000000000000003f:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 43: 58                            popq    %rax
    // 44: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x4a <_JIT_ENTRY+0x4a>
    // 0000000000000046:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 4a: 
    const unsigned char code_body[74] = {
        0x50, 0x4c, 0x8b, 0x35, 0x00, 0x00, 0x00, 0x00,
        0x41, 0x0f, 0xb7, 0xf6, 0x8d, 0x04, 0xf5, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xeb, 0x48, 0x29,
        0xc3, 0x48, 0x89, 0xdf, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x1c, 0x41,
        0x0f, 0xb7, 0xce, 0x48, 0x89, 0x03, 0xb8, 0x01,
        0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48,
        0x8d, 0x6c, 0xc5, 0x00, 0x58, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x58, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: &_PyList_FromArraySteal+0x0
    // 10: CONTINUE
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyList_FromArraySteal);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x4, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1e, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3f, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x46, (uintptr_t)data + 0x14);
}

void
emit__BUILD_MAP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_BUILD_MAP.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 18                   subq    $0x18, %rsp
    // 4: 4c 89 64 24 10                movq    %r12, 0x10(%rsp)
    // 9: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
    // e: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x15 <_JIT_ENTRY+0x15>
    // 0000000000000011:  R_X86_64_REX_GOTPCRELX       _JIT_OPARG-0x4
    // 15: 44 0f b7 f0                   movzwl  %ax, %r14d
    // 19: 45 01 f6                      addl    %r14d, %r14d
    // 1c: 44 89 f1                      movl    %r14d, %ecx
    // 1f: f7 d9                         negl    %ecx
    // 21: 48 63 c9                      movslq  %ecx, %rcx
    // 24: 48 8d 1c cd 00 00 00 00       leaq    (,%rcx,8), %rbx
    // 2c: 48 01 eb                      addq    %rbp, %rbx
    // 2f: 48 8d 54 cd 08                leaq    0x8(%rbp,%rcx,8), %rdx
    // 34: 44 0f b7 f8                   movzwl  %ax, %r15d
    // 38: be 02 00 00 00                movl    $0x2, %esi
    // 3d: b9 02 00 00 00                movl    $0x2, %ecx
    // 42: 48 89 df                      movq    %rbx, %rdi
    // 45: 4d 89 f8                      movq    %r15, %r8
    // 48: ff 15 00 00 00 00             callq   *(%rip)                 # 0x4e <_JIT_ENTRY+0x4e>
    // 000000000000004a:  R_X86_64_GOTPCRELX   _PyDict_FromItems-0x4
    // 4e: 49 89 c4                      movq    %rax, %r12
    // 51: 66 45 85 ff                   testw   %r15w, %r15w
    // 55: 75 2b                         jne     0x82 <_JIT_ENTRY+0x82>
    // 57: 4d 85 e4                      testq   %r12, %r12
    // 5a: 74 66                         je      0xc2 <_JIT_ENTRY+0xc2>
    // 5c: 4c 89 23                      movq    %r12, (%rbx)
    // 5f: b8 01 00 00 00                movl    $0x1, %eax
    // 64: 44 29 f0                      subl    %r14d, %eax
    // 67: 48 98                         cltq
    // 69: 48 8d 6c c5 00                leaq    (%rbp,%rax,8), %rbp
    // 6e: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
    // 73: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
    // 78: 48 83 c4 18                   addq    $0x18, %rsp
    // 7c: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x82 <_JIT_ENTRY+0x82>
    // 000000000000007e:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 82: 4e 8d 3c 7d 01 00 00 00       leaq    0x1(,%r15,2), %r15
    // 8a: 4c 8b 2d 00 00 00 00          movq    (%rip), %r13            # 0x91 <_JIT_ENTRY+0x91>
    // 000000000000008d:  R_X86_64_REX_GOTPCRELX       _Py_Dealloc-0x4
    // 91: eb 16                         jmp     0xa9 <_JIT_ENTRY+0xa9>
    // 93: 66 66 66 66 2e 0f 1f 84 00 00 00 00 00        nopw    %cs:(%rax,%rax)
    // a0: 49 ff cf                      decq    %r15
    // a3: 49 83 ff 01                   cmpq    $0x1, %r15
    // a7: 76 ae                         jbe     0x57 <_JIT_ENTRY+0x57>
    // a9: 4a 8b 7c fb f0                movq    -0x10(%rbx,%r15,8), %rdi
    // ae: 48 8b 07                      movq    (%rdi), %rax
    // b1: 85 c0                         testl   %eax, %eax
    // b3: 78 eb                         js      0xa0 <_JIT_ENTRY+0xa0>
    // b5: 48 ff c8                      decq    %rax
    // b8: 48 89 07                      movq    %rax, (%rdi)
    // bb: 75 e3                         jne     0xa0 <_JIT_ENTRY+0xa0>
    // bd: 41 ff d5                      callq   *%r13
    // c0: eb de                         jmp     0xa0 <_JIT_ENTRY+0xa0>
    // c2: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
    // c7: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
    // cc: 48 83 c4 18                   addq    $0x18, %rsp
    // d0: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xd6 <_JIT_ENTRY+0xd6>
    // 00000000000000d2:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // d6: 
    const unsigned char code_body[214] = {
        0x48, 0x83, 0xec, 0x18, 0x4c, 0x89, 0x64, 0x24,
        0x10, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x48, 0x8b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7,
        0xf0, 0x45, 0x01, 0xf6, 0x44, 0x89, 0xf1, 0xf7,
        0xd9, 0x48, 0x63, 0xc9, 0x48, 0x8d, 0x1c, 0xcd,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0xeb, 0x48,
        0x8d, 0x54, 0xcd, 0x08, 0x44, 0x0f, 0xb7, 0xf8,
        0xbe, 0x02, 0x00, 0x00, 0x00, 0xb9, 0x02, 0x00,
        0x00, 0x00, 0x48, 0x89, 0xdf, 0x4d, 0x89, 0xf8,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89,
        0xc4, 0x66, 0x45, 0x85, 0xff, 0x75, 0x2b, 0x4d,
        0x85, 0xe4, 0x74, 0x66, 0x4c, 0x89, 0x23, 0xb8,
        0x01, 0x00, 0x00, 0x00, 0x44, 0x29, 0xf0, 0x48,
        0x98, 0x48, 0x8d, 0x6c, 0xc5, 0x00, 0x4c, 0x8b,
        0x6c, 0x24, 0x08, 0x4c, 0x8b, 0x64, 0x24, 0x10,
        0x48, 0x83, 0xc4, 0x18, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x4e, 0x8d, 0x3c, 0x7d, 0x01, 0x00,
        0x00, 0x00, 0x4c, 0x8b, 0x2d, 0x00, 0x00, 0x00,
        0x00, 0xeb, 0x16, 0x66, 0x66, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x49, 0xff, 0xcf, 0x49, 0x83, 0xff, 0x01, 0x76,
        0xae, 0x4a, 0x8b, 0x7c, 0xfb, 0xf0, 0x48, 0x8b,
        0x07, 0x85, 0xc0, 0x78, 0xeb, 0x48, 0xff, 0xc8,
        0x48, 0x89, 0x07, 0x75, 0xe3, 0x41, 0xff, 0xd5,
        0xeb, 0xde, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x4c,
        0x8b, 0x64, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: &_PyDict_FromItems+0x0
    // 10: CONTINUE
    // 18: &_Py_Dealloc+0x0
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyDict_FromItems);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x11, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x4a, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x7e, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x8d, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xd2, (uintptr_t)data + 0x1c);
}

void
emit__BUILD_SLICE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_BUILD_SLICE.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 18                   subq    $0x18, %rsp
    // 4: 4c 89 64 24 08                movq    %r12, 0x8(%rsp)
    // 9: 4c 89 2c 24                   movq    %r13, (%rsp)
    // d: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x14 <_JIT_ENTRY+0x14>
    // 0000000000000010:  R_X86_64_REX_GOTPCRELX       _JIT_OPARG-0x4
    // 14: 66 83 f8 03                   cmpw    $0x3, %ax
    // 18: 75 0d                         jne     0x27 <_JIT_ENTRY+0x27>
    // 1a: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 1e: 48 c7 c1 fd ff ff ff          movq    $-0x3, %rcx
    // 25: eb 09                         jmp     0x30 <_JIT_ENTRY+0x30>
    // 27: 48 c7 c1 fe ff ff ff          movq    $-0x2, %rcx
    // 2e: 31 db                         xorl    %ebx, %ebx
    // 30: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x37 <_JIT_ENTRY+0x37>
    // 0000000000000033:  R_X86_64_REX_GOTPCRELX       _JIT_OPARG-0x4
    // 37: 45 31 ed                      xorl    %r13d, %r13d
    // 3a: 66 83 f8 03                   cmpw    $0x3, %ax
    // 3e: 41 0f 94 c5                   sete    %r13b
    // 42: 49 f7 d5                      notq    %r13
    // 45: 4e 8b 7c ed 00                movq    (%rbp,%r13,8), %r15
    // 4a: 48 89 4c 24 10                movq    %rcx, 0x10(%rsp)
    // 4f: 4c 8b 74 cd 00                movq    (%rbp,%rcx,8), %r14
    // 54: 4c 89 f7                      movq    %r14, %rdi
    // 57: 4c 89 fe                      movq    %r15, %rsi
    // 5a: 48 89 da                      movq    %rbx, %rdx
    // 5d: ff 15 00 00 00 00             callq   *(%rip)                 # 0x63 <_JIT_ENTRY+0x63>
    // 000000000000005f:  R_X86_64_GOTPCRELX   PySlice_New-0x4
    // 63: 49 89 c4                      movq    %rax, %r12
    // 66: 49 8b 06                      movq    (%r14), %rax
    // 69: 85 c0                         testl   %eax, %eax
    // 6b: 78 08                         js      0x75 <_JIT_ENTRY+0x75>
    // 6d: 48 ff c8                      decq    %rax
    // 70: 49 89 06                      movq    %rax, (%r14)
    // 73: 74 1a                         je      0x8f <_JIT_ENTRY+0x8f>
    // 75: 49 8b 07                      movq    (%r15), %rax
    // 78: 85 c0                         testl   %eax, %eax
    // 7a: 78 23                         js      0x9f <_JIT_ENTRY+0x9f>
    // 7c: 48 ff c8                      decq    %rax
    // 7f: 49 89 07                      movq    %rax, (%r15)
    // 82: 75 1b                         jne     0x9f <_JIT_ENTRY+0x9f>
    // 84: 4c 89 ff                      movq    %r15, %rdi
    // 87: ff 15 00 00 00 00             callq   *(%rip)                 # 0x8d <_JIT_ENTRY+0x8d>
    // 0000000000000089:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 8d: eb 10                         jmp     0x9f <_JIT_ENTRY+0x9f>
    // 8f: 4c 89 f7                      movq    %r14, %rdi
    // 92: ff 15 00 00 00 00             callq   *(%rip)                 # 0x98 <_JIT_ENTRY+0x98>
    // 0000000000000094:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 98: 49 8b 07                      movq    (%r15), %rax
    // 9b: 85 c0                         testl   %eax, %eax
    // 9d: 79 dd                         jns     0x7c <_JIT_ENTRY+0x7c>
    // 9f: 48 85 db                      testq   %rbx, %rbx
    // a2: 74 0f                         je      0xb3 <_JIT_ENTRY+0xb3>
    // a4: 48 8b 03                      movq    (%rbx), %rax
    // a7: 85 c0                         testl   %eax, %eax
    // a9: 78 08                         js      0xb3 <_JIT_ENTRY+0xb3>
    // ab: 48 ff c8                      decq    %rax
    // ae: 48 89 03                      movq    %rax, (%rbx)
    // b1: 74 30                         je      0xe3 <_JIT_ENTRY+0xe3>
    // b3: 4d 85 e4                      testq   %r12, %r12
    // b6: 74 39                         je      0xf1 <_JIT_ENTRY+0xf1>
    // b8: 4a 8d 04 ed 00 00 00 00       leaq    (,%r13,8), %rax
    // c0: 48 01 e8                      addq    %rbp, %rax
    // c3: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
    // c8: 4c 89 64 cd 00                movq    %r12, (%rbp,%rcx,8)
    // cd: 4c 8b 2c 24                   movq    (%rsp), %r13
    // d1: 48 89 c5                      movq    %rax, %rbp
    // d4: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
    // d9: 48 83 c4 18                   addq    $0x18, %rsp
    // dd: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xe3 <_JIT_ENTRY+0xe3>
    // 00000000000000df:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // e3: 48 89 df                      movq    %rbx, %rdi
    // e6: ff 15 00 00 00 00             callq   *(%rip)                 # 0xec <_JIT_ENTRY+0xec>
    // 00000000000000e8:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // ec: 4d 85 e4                      testq   %r12, %r12
    // ef: 75 c7                         jne     0xb8 <_JIT_ENTRY+0xb8>
    // f1: 4c 8b 2c 24                   movq    (%rsp), %r13
    // f5: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
    // fa: 48 83 c4 18                   addq    $0x18, %rsp
    // fe: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x104 <_JIT_ENTRY+0x104>
    // 0000000000000100:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 104: 
    const unsigned char code_body[260] = {
        0x48, 0x83, 0xec, 0x18, 0x4c, 0x89, 0x64, 0x24,
        0x08, 0x4c, 0x89, 0x2c, 0x24, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x66, 0x83, 0xf8, 0x03,
        0x75, 0x0d, 0x48, 0x8b, 0x5d, 0xf8, 0x48, 0xc7,
        0xc1, 0xfd, 0xff, 0xff, 0xff, 0xeb, 0x09, 0x48,
        0xc7, 0xc1, 0xfe, 0xff, 0xff, 0xff, 0x31, 0xdb,
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x45,
        0x31, 0xed, 0x66, 0x83, 0xf8, 0x03, 0x41, 0x0f,
        0x94, 0xc5, 0x49, 0xf7, 0xd5, 0x4e, 0x8b, 0x7c,
        0xed, 0x00, 0x48, 0x89, 0x4c, 0x24, 0x10, 0x4c,
        0x8b, 0x74, 0xcd, 0x00, 0x4c, 0x89, 0xf7, 0x4c,
        0x89, 0xfe, 0x48, 0x89, 0xda, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x89, 0xc4, 0x49, 0x8b,
        0x06, 0x85, 0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8,
        0x49, 0x89, 0x06, 0x74, 0x1a, 0x49, 0x8b, 0x07,
        0x85, 0xc0, 0x78, 0x23, 0x48, 0xff, 0xc8, 0x49,
        0x89, 0x07, 0x75, 0x1b, 0x4c, 0x89, 0xff, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x4c,
        0x89, 0xf7, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x8b, 0x07, 0x85, 0xc0, 0x79, 0xdd, 0x48,
        0x85, 0xdb, 0x74, 0x0f, 0x48, 0x8b, 0x03, 0x85,
        0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8, 0x48, 0x89,
        0x03, 0x74, 0x30, 0x4d, 0x85, 0xe4, 0x74, 0x39,
        0x4a, 0x8d, 0x04, 0xed, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x01, 0xe8, 0x48, 0x8b, 0x4c, 0x24, 0x10,
        0x4c, 0x89, 0x64, 0xcd, 0x00, 0x4c, 0x8b, 0x2c,
        0x24, 0x48, 0x89, 0xc5, 0x4c, 0x8b, 0x64, 0x24,
        0x08, 0x48, 0x83, 0xc4, 0x18, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4d, 0x85, 0xe4, 0x75,
        0xc7, 0x4c, 0x8b, 0x2c, 0x24, 0x4c, 0x8b, 0x64,
        0x24, 0x08, 0x48, 0x83, 0xc4, 0x18, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: &PySlice_New+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PySlice_New);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x10, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x33, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x5f, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x89, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x94, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xdf, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xe8, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x100, (uintptr_t)data + 0x1c);
}

void
emit__BUILD_STRING(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_BUILD_STRING.o:       file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 18                   subq    $0x18, %rsp
    // 4: 4c 89 64 24 10                movq    %r12, 0x10(%rsp)
    // 9: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
    // e: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x15 <_JIT_ENTRY+0x15>
    // 0000000000000011:  R_X86_64_REX_GOTPCRELX       _JIT_OPARG-0x4
    // 15: 44 0f b7 f8                   movzwl  %ax, %r15d
    // 19: 42 8d 04 fd 00 00 00 00       leal    (,%r15,8), %eax
    // 21: 48 89 eb                      movq    %rbp, %rbx
    // 24: 48 29 c3                      subq    %rax, %rbx
    // 27: bf e8 89 00 00                movl    $0x89e8, %edi           # imm = 0x89E8
    // 2c: 48 03 3d 00 00 00 00          addq    (%rip), %rdi            # 0x33 <_JIT_ENTRY+0x33>
    // 000000000000002f:  R_X86_64_REX_GOTPCRELX       _PyRuntime-0x4
    // 33: 48 89 de                      movq    %rbx, %rsi
    // 36: 4c 89 fa                      movq    %r15, %rdx
    // 39: ff 15 00 00 00 00             callq   *(%rip)                 # 0x3f <_JIT_ENTRY+0x3f>
    // 000000000000003b:  R_X86_64_GOTPCRELX   _PyUnicode_JoinArray-0x4
    // 3f: 49 89 c4                      movq    %rax, %r12
    // 42: 66 45 85 ff                   testw   %r15w, %r15w
    // 46: 74 3c                         je      0x84 <_JIT_ENTRY+0x84>
    // 48: 49 ff c7                      incq    %r15
    // 4b: 4c 8d 75 f8                   leaq    -0x8(%rbp), %r14
    // 4f: 4c 8b 2d 00 00 00 00          movq    (%rip), %r13            # 0x56 <_JIT_ENTRY+0x56>
    // 0000000000000052:  R_X86_64_REX_GOTPCRELX       _Py_Dealloc-0x4
    // 56: eb 15                         jmp     0x6d <_JIT_ENTRY+0x6d>
    // 58: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
    // 60: 49 ff cf                      decq    %r15
    // 63: 49 83 c6 f8                   addq    $-0x8, %r14
    // 67: 49 83 ff 01                   cmpq    $0x1, %r15
    // 6b: 76 17                         jbe     0x84 <_JIT_ENTRY+0x84>
    // 6d: 49 8b 3e                      movq    (%r14), %rdi
    // 70: 48 8b 07                      movq    (%rdi), %rax
    // 73: 85 c0                         testl   %eax, %eax
    // 75: 78 e9                         js      0x60 <_JIT_ENTRY+0x60>
    // 77: 48 ff c8                      decq    %rax
    // 7a: 48 89 07                      movq    %rax, (%rdi)
    // 7d: 75 e1                         jne     0x60 <_JIT_ENTRY+0x60>
    // 7f: 41 ff d5                      callq   *%r13
    // 82: eb dc                         jmp     0x60 <_JIT_ENTRY+0x60>
    // 84: 4d 85 e4                      testq   %r12, %r12
    // 87: 74 30                         je      0xb9 <_JIT_ENTRY+0xb9>
    // 89: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x90 <_JIT_ENTRY+0x90>
    // 000000000000008c:  R_X86_64_REX_GOTPCRELX       _JIT_OPARG-0x4
    // 90: 0f b7 c0                      movzwl  %ax, %eax
    // 93: 4c 89 23                      movq    %r12, (%rbx)
    // 96: b9 01 00 00 00                movl    $0x1, %ecx
    // 9b: 29 c1                         subl    %eax, %ecx
    // 9d: 48 63 c1                      movslq  %ecx, %rax
    // a0: 48 8d 6c c5 00                leaq    (%rbp,%rax,8), %rbp
    // a5: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
    // aa: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
    // af: 48 83 c4 18                   addq    $0x18, %rsp
    // b3: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xb9 <_JIT_ENTRY+0xb9>
    // 00000000000000b5:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // b9: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
    // be: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
    // c3: 48 83 c4 18                   addq    $0x18, %rsp
    // c7: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xcd <_JIT_ENTRY+0xcd>
    // 00000000000000c9:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // cd: 
    const unsigned char code_body[205] = {
        0x48, 0x83, 0xec, 0x18, 0x4c, 0x89, 0x64, 0x24,
        0x10, 0x4c, 0x89, 0x6c, 0x24, 0x08, 0x48, 0x8b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7,
        0xf8, 0x42, 0x8d, 0x04, 0xfd, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xeb, 0x48, 0x29, 0xc3, 0xbf,
        0xe8, 0x89, 0x00, 0x00, 0x48, 0x03, 0x3d, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xde, 0x4c, 0x89,
        0xfa, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x89, 0xc4, 0x66, 0x45, 0x85, 0xff, 0x74, 0x3c,
        0x49, 0xff, 0xc7, 0x4c, 0x8d, 0x75, 0xf8, 0x4c,
        0x8b, 0x2d, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x15,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x49, 0xff, 0xcf, 0x49, 0x83, 0xc6, 0xf8, 0x49,
        0x83, 0xff, 0x01, 0x76, 0x17, 0x49, 0x8b, 0x3e,
        0x48, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0xe9, 0x48,
        0xff, 0xc8, 0x48, 0x89, 0x07, 0x75, 0xe1, 0x41,
        0xff, 0xd5, 0xeb, 0xdc, 0x4d, 0x85, 0xe4, 0x74,
        0x30, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xb7, 0xc0, 0x4c, 0x89, 0x23, 0xb9, 0x01,
        0x00, 0x00, 0x00, 0x29, 0xc1, 0x48, 0x63, 0xc1,
        0x48, 0x8d, 0x6c, 0xc5, 0x00, 0x4c, 0x8b, 0x6c,
        0x24, 0x08, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x48,
        0x83, 0xc4, 0x18, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x4c, 0x8b, 0x6c, 0x24, 0x08, 0x4c, 0x8b,
        0x64, 0x24, 0x10, 0x48, 0x83, 0xc4, 0x18, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: &_PyRuntime+0x0
    // 10: &_PyUnicode_JoinArray+0x0
    // 18: &_Py_Dealloc+0x0
    // 20: CONTINUE
    // 28: ERROR_TARGET
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x10, (uintptr_t)&_PyUnicode_JoinArray);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x28, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x11, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2f, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3b, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x52, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x8c, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xb5, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xc9, (uintptr_t)data + 0x24);
}

void
emit__BUILD_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_BUILD_TUPLE.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 4c 8b 35 00 00 00 00          movq    (%rip), %r14            # 0x8 <_JIT_ENTRY+0x8>
    // 0000000000000004:  R_X86_64_REX_GOTPCRELX       _JIT_OPARG-0x4
    // 8: 41 0f b7 f6                   movzwl  %r14w, %esi
    // c: 8d 04 f5 00 00 00 00          leal    (,%rsi,8), %eax
    // 13: 48 89 eb                      movq    %rbp, %rbx
    // 16: 48 29 c3                      subq    %rax, %rbx
    // 19: 48 89 df                      movq    %rbx, %rdi
    // 1c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x22 <_JIT_ENTRY+0x22>
    // 000000000000001e:  R_X86_64_GOTPCRELX   _PyTuple_FromArraySteal-0x4
    // 22: 48 85 c0                      testq   %rax, %rax
    // 25: 74 1c                         je      0x43 <_JIT_ENTRY+0x43>
    // 27: 41 0f b7 ce                   movzwl  %r14w, %ecx
    // 2b: 48 89 03                      movq    %rax, (%rbx)
    // 2e: b8 01 00 00 00                movl    $0x1, %eax
    // 33: 29 c8                         subl    %ecx, %eax
    // 35: 48 98                         cltq
    // 37: 48 8d 6c c5 00                leaq    (%rbp,%rax,8), %rbp
    // 3c: 58                            popq    %rax
    // 3d: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x43 <_JIT_ENTRY+0x43>
    // 000000000000003f:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 43: 58                            popq    %rax
    // 44: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x4a <_JIT_ENTRY+0x4a>
    // 0000000000000046:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 4a: 
    const unsigned char code_body[74] = {
        0x50, 0x4c, 0x8b, 0x35, 0x00, 0x00, 0x00, 0x00,
        0x41, 0x0f, 0xb7, 0xf6, 0x8d, 0x04, 0xf5, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xeb, 0x48, 0x29,
        0xc3, 0x48, 0x89, 0xdf, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x1c, 0x41,
        0x0f, 0xb7, 0xce, 0x48, 0x89, 0x03, 0xb8, 0x01,
        0x00, 0x00, 0x00, 0x29, 0xc8, 0x48, 0x98, 0x48,
        0x8d, 0x6c, 0xc5, 0x00, 0x58, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x58, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: &_PyTuple_FromArraySteal+0x0
    // 10: CONTINUE
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyTuple_FromArraySteal);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x4, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1e, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3f, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x46, (uintptr_t)data + 0x14);
}

void
emit__CALL_BUILTIN_CLASS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CALL_BUILTIN_CLASS.o: file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 0f b7 1d 00 00 00 00          movzwl  (%rip), %ebx            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // b: 89 d8                         movl    %ebx, %eax
    // d: f7 d0                         notl    %eax
    // f: 48 63 f0                      movslq  %eax, %rsi
    // 12: b8 fe ff ff ff                movl    $0xfffffffe, %eax       # imm = 0xFFFFFFFE
    // 17: 29 d8                         subl    %ebx, %eax
    // 19: 4c 63 c0                      movslq  %eax, %r8
    // 1c: 4a 8b 7c c5 00                movq    (%rbp,%r8,8), %rdi
    // 21: 31 c9                         xorl    %ecx, %ecx
    // 23: 48 83 7c f5 00 00             cmpq    $0x0, (%rbp,%rsi,8)
    // 29: 0f 95 c2                      setne   %dl
    // 2c: 48 8b 47 08                   movq    0x8(%rdi), %rax
    // 30: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
    // 37: 0f 84 82 00 00 00             je      0xbf <_JIT_ENTRY+0xbf>
    // 3d: 48 8b 87 90 01 00 00          movq    0x190(%rdi), %rax
    // 44: 48 85 c0                      testq   %rax, %rax
    // 47: 74 76                         je      0xbf <_JIT_ENTRY+0xbf>
    // 49: 4c 89 44 24 10                movq    %r8, 0x10(%rsp)
    // 4e: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
    // 53: 4c 89 6c 24 20                movq    %r13, 0x20(%rsp)
    // 58: 4c 89 64 24 08                movq    %r12, 0x8(%rsp)
    // 5d: 8d 34 dd 00 00 00 00          leal    (,%rbx,8), %esi
    // 64: 49 89 ef                      movq    %rbp, %r15
    // 67: 49 29 f7                      subq    %rsi, %r15
    // 6a: 88 d1                         movb    %dl, %cl
    // 6c: 01 cb                         addl    %ecx, %ebx
    // 6e: c1 e1 03                      shll    $0x3, %ecx
    // 71: 49 29 cf                      subq    %rcx, %r15
    // 74: 41 89 de                      movl    %ebx, %r14d
    // 77: 49 89 fc                      movq    %rdi, %r12
    // 7a: 4c 89 fe                      movq    %r15, %rsi
    // 7d: 4c 89 f2                      movq    %r14, %rdx
    // 80: 31 c9                         xorl    %ecx, %ecx
    // 82: ff d0                         callq   *%rax
    // 84: 48 89 04 24                   movq    %rax, (%rsp)
    // 88: 85 db                         testl   %ebx, %ebx
    // 8a: 74 3d                         je      0xc9 <_JIT_ENTRY+0xc9>
    // 8c: 45 31 ed                      xorl    %r13d, %r13d
    // 8f: 48 8b 1d 00 00 00 00          movq    (%rip), %rbx            # 0x96 <_JIT_ENTRY+0x96>
    // 0000000000000092:  R_X86_64_REX_GOTPCRELX       _Py_Dealloc-0x4
    // 96: eb 10                         jmp     0xa8 <_JIT_ENTRY+0xa8>
    // 98: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
    // a0: 49 ff c5                      incq    %r13
    // a3: 4d 39 ee                      cmpq    %r13, %r14
    // a6: 74 21                         je      0xc9 <_JIT_ENTRY+0xc9>
    // a8: 4b 8b 3c ef                   movq    (%r15,%r13,8), %rdi
    // ac: 48 8b 07                      movq    (%rdi), %rax
    // af: 85 c0                         testl   %eax, %eax
    // b1: 78 ed                         js      0xa0 <_JIT_ENTRY+0xa0>
    // b3: 48 ff c8                      decq    %rax
    // b6: 48 89 07                      movq    %rax, (%rdi)
    // b9: 75 e5                         jne     0xa0 <_JIT_ENTRY+0xa0>
    // bb: ff d3                         callq   *%rbx
    // bd: eb e1                         jmp     0xa0 <_JIT_ENTRY+0xa0>
    // bf: 48 83 c4 28                   addq    $0x28, %rsp
    // c3: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xc9 <_JIT_ENTRY+0xc9>
    // 00000000000000c5:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // c9: 49 8b 04 24                   movq    (%r12), %rax
    // cd: 85 c0                         testl   %eax, %eax
    // cf: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
    // d4: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
    // d9: 78 12                         js      0xed <_JIT_ENTRY+0xed>
    // db: 48 ff c8                      decq    %rax
    // de: 49 89 04 24                   movq    %rax, (%r12)
    // e2: 75 09                         jne     0xed <_JIT_ENTRY+0xed>
    // e4: 4c 89 e7                      movq    %r12, %rdi
    // e7: ff 15 00 00 00 00             callq   *(%rip)                 # 0xed <_JIT_ENTRY+0xed>
    // 00000000000000e9:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // ed: 48 8b 0c 24                   movq    (%rsp), %rcx
    // f1: 48 85 c9                      testq   %rcx, %rcx
    // f4: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
    // f9: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
    // fe: 74 1d                         je      0x11d <_JIT_ENTRY+0x11d>
    // 100: 48 8d 04 dd 00 00 00 00       leaq    (,%rbx,8), %rax
    // 108: 48 01 e8                      addq    %rbp, %rax
    // 10b: 4a 89 4c f5 00                movq    %rcx, (%rbp,%r14,8)
    // 110: 48 89 c5                      movq    %rax, %rbp
    // 113: 48 83 c4 28                   addq    $0x28, %rsp
    // 117: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x11d <_JIT_ENTRY+0x11d>
    // 0000000000000119:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 11d: 48 83 c4 28                   addq    $0x28, %rsp
    // 121: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x127 <_JIT_ENTRY+0x127>
    // 0000000000000123:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 127: 
    const unsigned char code_body[295] = {
        0x48, 0x83, 0xec, 0x28, 0x0f, 0xb7, 0x1d, 0x00,
        0x00, 0x00, 0x00, 0x89, 0xd8, 0xf7, 0xd0, 0x48,
        0x63, 0xf0, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x29,
        0xd8, 0x4c, 0x63, 0xc0, 0x4a, 0x8b, 0x7c, 0xc5,
        0x00, 0x31, 0xc9, 0x48, 0x83, 0x7c, 0xf5, 0x00,
        0x00, 0x0f, 0x95, 0xc2, 0x48, 0x8b, 0x47, 0x08,
        0xf6, 0x80, 0xab, 0x00, 0x00, 0x00, 0x80, 0x0f,
        0x84, 0x82, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x87,
        0x90, 0x01, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74,
        0x76, 0x4c, 0x89, 0x44, 0x24, 0x10, 0x48, 0x89,
        0x74, 0x24, 0x18, 0x4c, 0x89, 0x6c, 0x24, 0x20,
        0x4c, 0x89, 0x64, 0x24, 0x08, 0x8d, 0x34, 0xdd,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0xef, 0x49,
        0x29, 0xf7, 0x88, 0xd1, 0x01, 0xcb, 0xc1, 0xe1,
        0x03, 0x49, 0x29, 0xcf, 0x41, 0x89, 0xde, 0x49,
        0x89, 0xfc, 0x4c, 0x89, 0xfe, 0x4c, 0x89, 0xf2,
        0x31, 0xc9, 0xff, 0xd0, 0x48, 0x89, 0x04, 0x24,
        0x85, 0xdb, 0x74, 0x3d, 0x45, 0x31, 0xed, 0x48,
        0x8b, 0x1d, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x49, 0xff, 0xc5, 0x4d, 0x39, 0xee, 0x74, 0x21,
        0x4b, 0x8b, 0x3c, 0xef, 0x48, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0xed, 0x48, 0xff, 0xc8, 0x48, 0x89,
        0x07, 0x75, 0xe5, 0xff, 0xd3, 0xeb, 0xe1, 0x48,
        0x83, 0xc4, 0x28, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48,
        0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x74, 0x24,
        0x10, 0x78, 0x12, 0x48, 0xff, 0xc8, 0x49, 0x89,
        0x04, 0x24, 0x75, 0x09, 0x4c, 0x89, 0xe7, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x0c,
        0x24, 0x48, 0x85, 0xc9, 0x4c, 0x8b, 0x64, 0x24,
        0x08, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x74, 0x1d,
        0x48, 0x8d, 0x04, 0xdd, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x01, 0xe8, 0x4a, 0x89, 0x4c, 0xf5, 0x00,
        0x48, 0x89, 0xc5, 0x48, 0x83, 0xc4, 0x28, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4,
        0x28, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: &_Py_Dealloc+0x0
    // 10: JUMP_TARGET
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x10, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x92, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xc5, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xe9, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x119, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x123, (uintptr_t)data + 0x1c);
}

void
emit__CALL_BUILTIN_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CALL_BUILTIN_FAST.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 0f b7 1d 00 00 00 00          movzwl  (%rip), %ebx            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // b: 89 d8                         movl    %ebx, %eax
    // d: f7 d0                         notl    %eax
    // f: 48 63 f0                      movslq  %eax, %rsi
    // 12: b8 fe ff ff ff                movl    $0xfffffffe, %eax       # imm = 0xFFFFFFFE
    // 17: 29 d8                         subl    %ebx, %eax
    // 19: 48 63 f8                      movslq  %eax, %rdi
    // 1c: 4c 8b 44 fd 00                movq    (%rbp,%rdi,8), %r8
    // 21: 31 c9                         xorl    %ecx, %ecx
    // 23: 48 83 7c f5 00 00             cmpq    $0x0, (%rbp,%rsi,8)
    // 29: 0f 95 c2                      setne   %dl
    // 2c: 49 8b 40 08                   movq    0x8(%r8), %rax
    // 30: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x37 <_JIT_ENTRY+0x37>
    // 0000000000000033:  R_X86_64_REX_GOTPCRELX       PyCFunction_Type-0x4
    // 37: 0f 85 82 00 00 00             jne     0xbf <_JIT_ENTRY+0xbf>
    // 3d: 49 8b 40 10                   movq    0x10(%r8), %rax
    // 41: 81 78 10 80 00 00 00          cmpl    $0x80, 0x10(%rax)
    // 48: 75 75                         jne     0xbf <_JIT_ENTRY+0xbf>
    // 4a: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
    // 4f: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
    // 54: 4c 89 6c 24 20                movq    %r13, 0x20(%rsp)
    // 59: 4c 89 64 24 08                movq    %r12, 0x8(%rsp)
    // 5e: 8d 34 dd 00 00 00 00          leal    (,%rbx,8), %esi
    // 65: 49 89 ef                      movq    %rbp, %r15
    // 68: 49 29 f7                      subq    %rsi, %r15
    // 6b: 88 d1                         movb    %dl, %cl
    // 6d: 01 cb                         addl    %ecx, %ebx
    // 6f: c1 e1 03                      shll    $0x3, %ecx
    // 72: 49 29 cf                      subq    %rcx, %r15
    // 75: 4d 89 c4                      movq    %r8, %r12
    // 78: 49 8b 78 18                   movq    0x18(%r8), %rdi
    // 7c: 41 89 de                      movl    %ebx, %r14d
    // 7f: 4c 89 fe                      movq    %r15, %rsi
    // 82: 4c 89 f2                      movq    %r14, %rdx
    // 85: ff 50 08                      callq   *0x8(%rax)
    // 88: 48 89 04 24                   movq    %rax, (%rsp)
    // 8c: 85 db                         testl   %ebx, %ebx
    // 8e: 74 39                         je      0xc9 <_JIT_ENTRY+0xc9>
    // 90: 45 31 ed                      xorl    %r13d, %r13d
    // 93: 48 8b 1d 00 00 00 00          movq    (%rip), %rbx            # 0x9a <_JIT_ENTRY+0x9a>
    // 0000000000000096:  R_X86_64_REX_GOTPCRELX       _Py_Dealloc-0x4
    // 9a: eb 0c                         jmp     0xa8 <_JIT_ENTRY+0xa8>
    // 9c: 0f 1f 40 00                   nopl    (%rax)
    // a0: 49 ff c5                      incq    %r13
    // a3: 4d 39 ee                      cmpq    %r13, %r14
    // a6: 74 21                         je      0xc9 <_JIT_ENTRY+0xc9>
    // a8: 4b 8b 3c ef                   movq    (%r15,%r13,8), %rdi
    // ac: 48 8b 07                      movq    (%rdi), %rax
    // af: 85 c0                         testl   %eax, %eax
    // b1: 78 ed                         js      0xa0 <_JIT_ENTRY+0xa0>
    // b3: 48 ff c8                      decq    %rax
    // b6: 48 89 07                      movq    %rax, (%rdi)
    // b9: 75 e5                         jne     0xa0 <_JIT_ENTRY+0xa0>
    // bb: ff d3                         callq   *%rbx
    // bd: eb e1                         jmp     0xa0 <_JIT_ENTRY+0xa0>
    // bf: 48 83 c4 28                   addq    $0x28, %rsp
    // c3: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xc9 <_JIT_ENTRY+0xc9>
    // 00000000000000c5:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // c9: 49 8b 04 24                   movq    (%r12), %rax
    // cd: 85 c0                         testl   %eax, %eax
    // cf: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
    // d4: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
    // d9: 78 12                         js      0xed <_JIT_ENTRY+0xed>
    // db: 48 ff c8                      decq    %rax
    // de: 49 89 04 24                   movq    %rax, (%r12)
    // e2: 75 09                         jne     0xed <_JIT_ENTRY+0xed>
    // e4: 4c 89 e7                      movq    %r12, %rdi
    // e7: ff 15 00 00 00 00             callq   *(%rip)                 # 0xed <_JIT_ENTRY+0xed>
    // 00000000000000e9:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // ed: 48 8b 0c 24                   movq    (%rsp), %rcx
    // f1: 48 85 c9                      testq   %rcx, %rcx
    // f4: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
    // f9: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
    // fe: 74 1d                         je      0x11d <_JIT_ENTRY+0x11d>
    // 100: 48 8d 04 dd 00 00 00 00       leaq    (,%rbx,8), %rax
    // 108: 48 01 e8                      addq    %rbp, %rax
    // 10b: 4a 89 4c f5 00                movq    %rcx, (%rbp,%r14,8)
    // 110: 48 89 c5                      movq    %rax, %rbp
    // 113: 48 83 c4 28                   addq    $0x28, %rsp
    // 117: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x11d <_JIT_ENTRY+0x11d>
    // 0000000000000119:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 11d: 48 83 c4 28                   addq    $0x28, %rsp
    // 121: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x127 <_JIT_ENTRY+0x127>
    // 0000000000000123:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 127: 
    const unsigned char code_body[295] = {
        0x48, 0x83, 0xec, 0x28, 0x0f, 0xb7, 0x1d, 0x00,
        0x00, 0x00, 0x00, 0x89, 0xd8, 0xf7, 0xd0, 0x48,
        0x63, 0xf0, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x29,
        0xd8, 0x48, 0x63, 0xf8, 0x4c, 0x8b, 0x44, 0xfd,
        0x00, 0x31, 0xc9, 0x48, 0x83, 0x7c, 0xf5, 0x00,
        0x00, 0x0f, 0x95, 0xc2, 0x49, 0x8b, 0x40, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x0f,
        0x85, 0x82, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x40,
        0x10, 0x81, 0x78, 0x10, 0x80, 0x00, 0x00, 0x00,
        0x75, 0x75, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x48,
        0x89, 0x74, 0x24, 0x18, 0x4c, 0x89, 0x6c, 0x24,
        0x20, 0x4c, 0x89, 0x64, 0x24, 0x08, 0x8d, 0x34,
        0xdd, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0xef,
        0x49, 0x29, 0xf7, 0x88, 0xd1, 0x01, 0xcb, 0xc1,
        0xe1, 0x03, 0x49, 0x29, 0xcf, 0x4d, 0x89, 0xc4,
        0x49, 0x8b, 0x78, 0x18, 0x41, 0x89, 0xde, 0x4c,
        0x89, 0xfe, 0x4c, 0x89, 0xf2, 0xff, 0x50, 0x08,
        0x48, 0x89, 0x04, 0x24, 0x85, 0xdb, 0x74, 0x39,
        0x45, 0x31, 0xed, 0x48, 0x8b, 0x1d, 0x00, 0x00,
        0x00, 0x00, 0xeb, 0x0c, 0x0f, 0x1f, 0x40, 0x00,
        0x49, 0xff, 0xc5, 0x4d, 0x39, 0xee, 0x74, 0x21,
        0x4b, 0x8b, 0x3c, 0xef, 0x48, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0xed, 0x48, 0xff, 0xc8, 0x48, 0x89,
        0x07, 0x75, 0xe5, 0xff, 0xd3, 0xeb, 0xe1, 0x48,
        0x83, 0xc4, 0x28, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48,
        0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x74, 0x24,
        0x10, 0x78, 0x12, 0x48, 0xff, 0xc8, 0x49, 0x89,
        0x04, 0x24, 0x75, 0x09, 0x4c, 0x89, 0xe7, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x0c,
        0x24, 0x48, 0x85, 0xc9, 0x4c, 0x8b, 0x64, 0x24,
        0x08, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x74, 0x1d,
        0x48, 0x8d, 0x04, 0xdd, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x01, 0xe8, 0x4a, 0x89, 0x4c, 0xf5, 0x00,
        0x48, 0x89, 0xc5, 0x48, 0x83, 0xc4, 0x28, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4,
        0x28, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: &PyCFunction_Type+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: JUMP_TARGET
    // 20: CONTINUE
    // 28: ERROR_TARGET
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyCFunction_Type);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x20, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x28, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x33, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x96, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xc5, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xe9, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x119, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x123, (uintptr_t)data + 0x24);
}

void
emit__CALL_BUILTIN_FAST_WITH_KEYWORDS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CALL_BUILTIN_FAST_WITH_KEYWORDS.o:    file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 0f b7 1d 00 00 00 00          movzwl  (%rip), %ebx            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // b: 89 d8                         movl    %ebx, %eax
    // d: f7 d0                         notl    %eax
    // f: 48 63 f0                      movslq  %eax, %rsi
    // 12: b8 fe ff ff ff                movl    $0xfffffffe, %eax       # imm = 0xFFFFFFFE
    // 17: 29 d8                         subl    %ebx, %eax
    // 19: 48 63 f8                      movslq  %eax, %rdi
    // 1c: 4c 8b 44 fd 00                movq    (%rbp,%rdi,8), %r8
    // 21: 31 c9                         xorl    %ecx, %ecx
    // 23: 48 83 7c f5 00 00             cmpq    $0x0, (%rbp,%rsi,8)
    // 29: 0f 95 c2                      setne   %dl
    // 2c: 49 8b 40 08                   movq    0x8(%r8), %rax
    // 30: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x37 <_JIT_ENTRY+0x37>
    // 0000000000000033:  R_X86_64_REX_GOTPCRELX       PyCFunction_Type-0x4
    // 37: 0f 85 82 00 00 00             jne     0xbf <_JIT_ENTRY+0xbf>
    // 3d: 49 8b 40 10                   movq    0x10(%r8), %rax
    // 41: 81 78 10 82 00 00 00          cmpl    $0x82, 0x10(%rax)
    // 48: 75 75                         jne     0xbf <_JIT_ENTRY+0xbf>
    // 4a: 48 89 7c 24 10                movq    %rdi, 0x10(%rsp)
    // 4f: 48 89 74 24 18                movq    %rsi, 0x18(%rsp)
    // 54: 4c 89 6c 24 20                movq    %r13, 0x20(%rsp)
    // 59: 4c 89 64 24 08                movq    %r12, 0x8(%rsp)
    // 5e: 8d 34 dd 00 00 00 00          leal    (,%rbx,8), %esi
    // 65: 49 89 ef                      movq    %rbp, %r15
    // 68: 49 29 f7                      subq    %rsi, %r15
    // 6b: 88 d1                         movb    %dl, %cl
    // 6d: 01 cb                         addl    %ecx, %ebx
    // 6f: c1 e1 03                      shll    $0x3, %ecx
    // 72: 49 29 cf                      subq    %rcx, %r15
    // 75: 4d 89 c4                      movq    %r8, %r12
    // 78: 49 8b 78 18                   movq    0x18(%r8), %rdi
    // 7c: 41 89 de                      movl    %ebx, %r14d
    // 7f: 4c 89 fe                      movq    %r15, %rsi
    // 82: 4c 89 f2                      movq    %r14, %rdx
    // 85: 31 c9                         xorl    %ecx, %ecx
    // 87: ff 50 08                      callq   *0x8(%rax)
    // 8a: 48 89 04 24                   movq    %rax, (%rsp)
    // 8e: 85 db                         testl   %ebx, %ebx
    // 90: 74 37                         je      0xc9 <_JIT_ENTRY+0xc9>
    // 92: 45 31 ed                      xorl    %r13d, %r13d
    // 95: 48 8b 1d 00 00 00 00          movq    (%rip), %rbx            # 0x9c <_JIT_ENTRY+0x9c>
    // 0000000000000098:  R_X86_64_REX_GOTPCRELX       _Py_Dealloc-0x4
    // 9c: eb 0a                         jmp     0xa8 <_JIT_ENTRY+0xa8>
    // 9e: 66 90                         nop
    // a0: 49 ff c5                      incq    %r13
    // a3: 4d 39 ee                      cmpq    %r13, %r14
    // a6: 74 21                         je      0xc9 <_JIT_ENTRY+0xc9>
    // a8: 4b 8b 3c ef                   movq    (%r15,%r13,8), %rdi
    // ac: 48 8b 07                      movq    (%rdi), %rax
    // af: 85 c0                         testl   %eax, %eax
    // b1: 78 ed                         js      0xa0 <_JIT_ENTRY+0xa0>
    // b3: 48 ff c8                      decq    %rax
    // b6: 48 89 07                      movq    %rax, (%rdi)
    // b9: 75 e5                         jne     0xa0 <_JIT_ENTRY+0xa0>
    // bb: ff d3                         callq   *%rbx
    // bd: eb e1                         jmp     0xa0 <_JIT_ENTRY+0xa0>
    // bf: 48 83 c4 28                   addq    $0x28, %rsp
    // c3: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xc9 <_JIT_ENTRY+0xc9>
    // 00000000000000c5:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // c9: 49 8b 04 24                   movq    (%r12), %rax
    // cd: 85 c0                         testl   %eax, %eax
    // cf: 48 8b 5c 24 18                movq    0x18(%rsp), %rbx
    // d4: 4c 8b 74 24 10                movq    0x10(%rsp), %r14
    // d9: 78 12                         js      0xed <_JIT_ENTRY+0xed>
    // db: 48 ff c8                      decq    %rax
    // de: 49 89 04 24                   movq    %rax, (%r12)
    // e2: 75 09                         jne     0xed <_JIT_ENTRY+0xed>
    // e4: 4c 89 e7                      movq    %r12, %rdi
    // e7: ff 15 00 00 00 00             callq   *(%rip)                 # 0xed <_JIT_ENTRY+0xed>
    // 00000000000000e9:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // ed: 48 8b 0c 24                   movq    (%rsp), %rcx
    // f1: 48 85 c9                      testq   %rcx, %rcx
    // f4: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
    // f9: 4c 8b 6c 24 20                movq    0x20(%rsp), %r13
    // fe: 74 1d                         je      0x11d <_JIT_ENTRY+0x11d>
    // 100: 48 8d 04 dd 00 00 00 00       leaq    (,%rbx,8), %rax
    // 108: 48 01 e8                      addq    %rbp, %rax
    // 10b: 4a 89 4c f5 00                movq    %rcx, (%rbp,%r14,8)
    // 110: 48 89 c5                      movq    %rax, %rbp
    // 113: 48 83 c4 28                   addq    $0x28, %rsp
    // 117: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x11d <_JIT_ENTRY+0x11d>
    // 0000000000000119:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 11d: 48 83 c4 28                   addq    $0x28, %rsp
    // 121: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x127 <_JIT_ENTRY+0x127>
    // 0000000000000123:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 127: 
    const unsigned char code_body[295] = {
        0x48, 0x83, 0xec, 0x28, 0x0f, 0xb7, 0x1d, 0x00,
        0x00, 0x00, 0x00, 0x89, 0xd8, 0xf7, 0xd0, 0x48,
        0x63, 0xf0, 0xb8, 0xfe, 0xff, 0xff, 0xff, 0x29,
        0xd8, 0x48, 0x63, 0xf8, 0x4c, 0x8b, 0x44, 0xfd,
        0x00, 0x31, 0xc9, 0x48, 0x83, 0x7c, 0xf5, 0x00,
        0x00, 0x0f, 0x95, 0xc2, 0x49, 0x8b, 0x40, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x0f,
        0x85, 0x82, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x40,
        0x10, 0x81, 0x78, 0x10, 0x82, 0x00, 0x00, 0x00,
        0x75, 0x75, 0x48, 0x89, 0x7c, 0x24, 0x10, 0x48,
        0x89, 0x74, 0x24, 0x18, 0x4c, 0x89, 0x6c, 0x24,
        0x20, 0x4c, 0x89, 0x64, 0x24, 0x08, 0x8d, 0x34,
        0xdd, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0xef,
        0x49, 0x29, 0xf7, 0x88, 0xd1, 0x01, 0xcb, 0xc1,
        0xe1, 0x03, 0x49, 0x29, 0xcf, 0x4d, 0x89, 0xc4,
        0x49, 0x8b, 0x78, 0x18, 0x41, 0x89, 0xde, 0x4c,
        0x89, 0xfe, 0x4c, 0x89, 0xf2, 0x31, 0xc9, 0xff,
        0x50, 0x08, 0x48, 0x89, 0x04, 0x24, 0x85, 0xdb,
        0x74, 0x37, 0x45, 0x31, 0xed, 0x48, 0x8b, 0x1d,
        0x00, 0x00, 0x00, 0x00, 0xeb, 0x0a, 0x66, 0x90,
        0x49, 0xff, 0xc5, 0x4d, 0x39, 0xee, 0x74, 0x21,
        0x4b, 0x8b, 0x3c, 0xef, 0x48, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0xed, 0x48, 0xff, 0xc8, 0x48, 0x89,
        0x07, 0x75, 0xe5, 0xff, 0xd3, 0xeb, 0xe1, 0x48,
        0x83, 0xc4, 0x28, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x8b, 0x04, 0x24, 0x85, 0xc0, 0x48,
        0x8b, 0x5c, 0x24, 0x18, 0x4c, 0x8b, 0x74, 0x24,
        0x10, 0x78, 0x12, 0x48, 0xff, 0xc8, 0x49, 0x89,
        0x04, 0x24, 0x75, 0x09, 0x4c, 0x89, 0xe7, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x0c,
        0x24, 0x48, 0x85, 0xc9, 0x4c, 0x8b, 0x64, 0x24,
        0x08, 0x4c, 0x8b, 0x6c, 0x24, 0x20, 0x74, 0x1d,
        0x48, 0x8d, 0x04, 0xdd, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x01, 0xe8, 0x4a, 0x89, 0x4c, 0xf5, 0x00,
        0x48, 0x89, 0xc5, 0x48, 0x83, 0xc4, 0x28, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4,
        0x28, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: &PyCFunction_Type+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: JUMP_TARGET
    // 20: CONTINUE
    // 28: ERROR_TARGET
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyCFunction_Type);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x20, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x28, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x33, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x98, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xc5, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xe9, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x119, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x123, (uintptr_t)data + 0x24);
}

void
emit__CALL_BUILTIN_O(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CALL_BUILTIN_O.o:     file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x8 <_JIT_ENTRY+0x8>
    // 0000000000000004:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 8: 89 c8                         movl    %ecx, %eax
    // a: f7 d0                         notl    %eax
    // c: 4c 63 f0                      movslq  %eax, %r14
    // f: 31 c0                         xorl    %eax, %eax
    // 11: 4a 83 7c f5 00 00             cmpq    $0x0, (%rbp,%r14,8)
    // 17: 0f 95 c0                      setne   %al
    // 1a: 8d 14 08                      leal    (%rax,%rcx), %edx
    // 1d: 83 fa 01                      cmpl    $0x1, %edx
    // 20: 0f 85 c5 00 00 00             jne     0xeb <_JIT_ENTRY+0xeb>
    // 26: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
    // 2b: 29 ca                         subl    %ecx, %edx
    // 2d: 4c 63 fa                      movslq  %edx, %r15
    // 30: 4a 8b 5c fd 00                movq    (%rbp,%r15,8), %rbx
    // 35: 48 8b 53 08                   movq    0x8(%rbx), %rdx
    // 39: 48 3b 15 00 00 00 00          cmpq    (%rip), %rdx            # 0x40 <_JIT_ENTRY+0x40>
    // 000000000000003c:  R_X86_64_REX_GOTPCRELX       PyCFunction_Type-0x4
    // 40: 0f 85 a5 00 00 00             jne     0xeb <_JIT_ENTRY+0xeb>
    // 46: 48 8b 53 10                   movq    0x10(%rbx), %rdx
    // 4a: 83 7a 10 08                   cmpl    $0x8, 0x10(%rdx)
    // 4e: 0f 85 97 00 00 00             jne     0xeb <_JIT_ENTRY+0xeb>
    // 54: 45 8b 44 24 34                movl    0x34(%r12), %r8d
    // 59: 45 85 c0                      testl   %r8d, %r8d
    // 5c: 0f 8e 89 00 00 00             jle     0xeb <_JIT_ENTRY+0xeb>
    // 62: c1 e1 03                      shll    $0x3, %ecx
    // 65: 48 89 ef                      movq    %rbp, %rdi
    // 68: 48 29 cf                      subq    %rcx, %rdi
    // 6b: 48 f7 d8                      negq    %rax
    // 6e: 48 8b 4a 08                   movq    0x8(%rdx), %rcx
    // 72: 48 8b 34 c7                   movq    (%rdi,%rax,8), %rsi
    // 76: 48 89 34 24                   movq    %rsi, (%rsp)
    // 7a: 41 ff c8                      decl    %r8d
    // 7d: 45 89 44 24 34                movl    %r8d, 0x34(%r12)
    // 82: 48 8b 7b 18                   movq    0x18(%rbx), %rdi
    // 86: ff d1                         callq   *%rcx
    // 88: 48 8b 3c 24                   movq    (%rsp), %rdi
    // 8c: 41 ff 44 24 34                incl    0x34(%r12)
    // 91: 48 8b 0f                      movq    (%rdi), %rcx
    // 94: 85 c9                         testl   %ecx, %ecx
    // 96: 78 16                         js      0xae <_JIT_ENTRY+0xae>
    // 98: 48 ff c9                      decq    %rcx
    // 9b: 48 89 0f                      movq    %rcx, (%rdi)
    // 9e: 75 0e                         jne     0xae <_JIT_ENTRY+0xae>
    // a0: 48 89 04 24                   movq    %rax, (%rsp)
    // a4: ff 15 00 00 00 00             callq   *(%rip)                 # 0xaa <_JIT_ENTRY+0xaa>
    // 00000000000000a6:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // aa: 48 8b 04 24                   movq    (%rsp), %rax
    // ae: 48 8b 0b                      movq    (%rbx), %rcx
    // b1: 85 c9                         testl   %ecx, %ecx
    // b3: 78 17                         js      0xcc <_JIT_ENTRY+0xcc>
    // b5: 48 ff c9                      decq    %rcx
    // b8: 48 89 0b                      movq    %rcx, (%rbx)
    // bb: 75 0f                         jne     0xcc <_JIT_ENTRY+0xcc>
    // bd: 48 89 df                      movq    %rbx, %rdi
    // c0: 48 89 c3                      movq    %rax, %rbx
    // c3: ff 15 00 00 00 00             callq   *(%rip)                 # 0xc9 <_JIT_ENTRY+0xc9>
    // 00000000000000c5:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // c9: 48 89 d8                      movq    %rbx, %rax
    // cc: 48 85 c0                      testq   %rax, %rax
    // cf: 74 21                         je      0xf2 <_JIT_ENTRY+0xf2>
    // d1: 4a 8d 0c f5 00 00 00 00       leaq    (,%r14,8), %rcx
    // d9: 48 01 e9                      addq    %rbp, %rcx
    // dc: 4a 89 44 fd 00                movq    %rax, (%rbp,%r15,8)
    // e1: 48 89 cd                      movq    %rcx, %rbp
    // e4: 58                            popq    %rax
    // e5: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xeb <_JIT_ENTRY+0xeb>
    // 00000000000000e7:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // eb: 58                            popq    %rax
    // ec: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xf2 <_JIT_ENTRY+0xf2>
    // 00000000000000ee:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // f2: 58                            popq    %rax
    // f3: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xf9 <_JIT_ENTRY+0xf9>
    // 00000000000000f5:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // f9: 
    const unsigned char code_body[249] = {
        0x50, 0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00, 0x00,
        0x89, 0xc8, 0xf7, 0xd0, 0x4c, 0x63, 0xf0, 0x31,
        0xc0, 0x4a, 0x83, 0x7c, 0xf5, 0x00, 0x00, 0x0f,
        0x95, 0xc0, 0x8d, 0x14, 0x08, 0x83, 0xfa, 0x01,
        0x0f, 0x85, 0xc5, 0x00, 0x00, 0x00, 0xba, 0xfe,
        0xff, 0xff, 0xff, 0x29, 0xca, 0x4c, 0x63, 0xfa,
        0x4a, 0x8b, 0x5c, 0xfd, 0x00, 0x48, 0x8b, 0x53,
        0x08, 0x48, 0x3b, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0x85, 0xa5, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x53, 0x10, 0x83, 0x7a, 0x10, 0x08, 0x0f, 0x85,
        0x97, 0x00, 0x00, 0x00, 0x45, 0x8b, 0x44, 0x24,
        0x34, 0x45, 0x85, 0xc0, 0x0f, 0x8e, 0x89, 0x00,
        0x00, 0x00, 0xc1, 0xe1, 0x03, 0x48, 0x89, 0xef,
        0x48, 0x29, 0xcf, 0x48, 0xf7, 0xd8, 0x48, 0x8b,
        0x4a, 0x08, 0x48, 0x8b, 0x34, 0xc7, 0x48, 0x89,
        0x34, 0x24, 0x41, 0xff, 0xc8, 0x45, 0x89, 0x44,
        0x24, 0x34, 0x48, 0x8b, 0x7b, 0x18, 0xff, 0xd1,
        0x48, 0x8b, 0x3c, 0x24, 0x41, 0xff, 0x44, 0x24,
        0x34, 0x48, 0x8b, 0x0f, 0x85, 0xc9, 0x78, 0x16,
        0x48, 0xff, 0xc9, 0x48, 0x89, 0x0f, 0x75, 0x0e,
        0x48, 0x89, 0x04, 0x24, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x04, 0x24, 0x48, 0x8b,
        0x0b, 0x85, 0xc9, 0x78, 0x17, 0x48, 0xff, 0xc9,
        0x48, 0x89, 0x0b, 0x75, 0x0f, 0x48, 0x89, 0xdf,
        0x48, 0x89, 0xc3, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xd8, 0x48, 0x85, 0xc0, 0x74,
        0x21, 0x4a, 0x8d, 0x0c, 0xf5, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x01, 0xe9, 0x4a, 0x89, 0x44, 0xfd,
        0x00, 0x48, 0x89, 0xcd, 0x58, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x58, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: &PyCFunction_Type+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: CONTINUE
    // 20: JUMP_TARGET
    // 28: ERROR_TARGET
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyCFunction_Type);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x28, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x4, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x3c, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xa6, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xc5, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xe7, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xee, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xf5, (uintptr_t)data + 0x24);
}

void
emit__CALL_INTRINSIC_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CALL_INTRINSIC_1.o:   file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 5: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0xc <_JIT_ENTRY+0xc>
    // 0000000000000008:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // c: c1 e0 04                      shll    $0x4, %eax
    // f: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x16 <_JIT_ENTRY+0x16>
    // 0000000000000012:  R_X86_64_REX_GOTPCRELX       _PyIntrinsics_UnaryFunctions-0x4
    // 16: 4c 89 e7                      movq    %r12, %rdi
    // 19: 48 89 de                      movq    %rbx, %rsi
    // 1c: ff 14 01                      callq   *(%rcx,%rax)
    // 1f: 48 8b 0b                      movq    (%rbx), %rcx
    // 22: 85 c9                         testl   %ecx, %ecx
    // 24: 78 08                         js      0x2e <_JIT_ENTRY+0x2e>
    // 26: 48 ff c9                      decq    %rcx
    // 29: 48 89 0b                      movq    %rcx, (%rbx)
    // 2c: 74 10                         je      0x3e <_JIT_ENTRY+0x3e>
    // 2e: 48 85 c0                      testq   %rax, %rax
    // 31: 74 1f                         je      0x52 <_JIT_ENTRY+0x52>
    // 33: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // 37: 58                            popq    %rax
    // 38: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x3e <_JIT_ENTRY+0x3e>
    // 000000000000003a:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 3e: 48 89 df                      movq    %rbx, %rdi
    // 41: 48 89 c3                      movq    %rax, %rbx
    // 44: ff 15 00 00 00 00             callq   *(%rip)                 # 0x4a <_JIT_ENTRY+0x4a>
    // 0000000000000046:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 4a: 48 89 d8                      movq    %rbx, %rax
    // 4d: 48 85 c0                      testq   %rax, %rax
    // 50: 75 e1                         jne     0x33 <_JIT_ENTRY+0x33>
    // 52: 58                            popq    %rax
    // 53: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x59 <_JIT_ENTRY+0x59>
    // 0000000000000055:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 59: 
    const unsigned char code_body[89] = {
        0x50, 0x48, 0x8b, 0x5d, 0xf8, 0x0f, 0xb7, 0x05,
        0x00, 0x00, 0x00, 0x00, 0xc1, 0xe0, 0x04, 0x48,
        0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0xe7, 0x48, 0x89, 0xde, 0xff, 0x14, 0x01, 0x48,
        0x8b, 0x0b, 0x85, 0xc9, 0x78, 0x08, 0x48, 0xff,
        0xc9, 0x48, 0x89, 0x0b, 0x74, 0x10, 0x48, 0x85,
        0xc0, 0x74, 0x1f, 0x48, 0x89, 0x45, 0xf8, 0x58,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89,
        0xdf, 0x48, 0x89, 0xc3, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x89, 0xd8, 0x48, 0x85, 0xc0,
        0x75, 0xe1, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: &_PyIntrinsics_UnaryFunctions+0x0
    // 10: CONTINUE
    // 18: &_Py_Dealloc+0x0
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyIntrinsics_UnaryFunctions);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x8, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x12, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3a, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x46, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x55, (uintptr_t)data + 0x1c);
}

void
emit__CALL_INTRINSIC_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CALL_INTRINSIC_2.o:   file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 4c 8b 7d f0                   movq    -0x10(%rbp), %r15
    // 5: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 9: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x10 <_JIT_ENTRY+0x10>
    // 000000000000000c:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 10: c1 e0 04                      shll    $0x4, %eax
    // 13: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x1a <_JIT_ENTRY+0x1a>
    // 0000000000000016:  R_X86_64_REX_GOTPCRELX       _PyIntrinsics_BinaryFunctions-0x4
    // 1a: 4c 89 e7                      movq    %r12, %rdi
    // 1d: 4c 89 fe                      movq    %r15, %rsi
    // 20: 48 89 da                      movq    %rbx, %rdx
    // 23: ff 14 01                      callq   *(%rcx,%rax)
    // 26: 49 89 c6                      movq    %rax, %r14
    // 29: 49 8b 07                      movq    (%r15), %rax
    // 2c: 85 c0                         testl   %eax, %eax
    // 2e: 78 08                         js      0x38 <_JIT_ENTRY+0x38>
    // 30: 48 ff c8                      decq    %rax
    // 33: 49 89 07                      movq    %rax, (%r15)
    // 36: 74 1a                         je      0x52 <_JIT_ENTRY+0x52>
    // 38: 48 8b 03                      movq    (%rbx), %rax
    // 3b: 85 c0                         testl   %eax, %eax
    // 3d: 78 23                         js      0x62 <_JIT_ENTRY+0x62>
    // 3f: 48 ff c8                      decq    %rax
    // 42: 48 89 03                      movq    %rax, (%rbx)
    // 45: 75 1b                         jne     0x62 <_JIT_ENTRY+0x62>
    // 47: 48 89 df                      movq    %rbx, %rdi
    // 4a: ff 15 00 00 00 00             callq   *(%rip)                 # 0x50 <_JIT_ENTRY+0x50>
    // 000000000000004c:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 50: eb 10                         jmp     0x62 <_JIT_ENTRY+0x62>
    // 52: 4c 89 ff                      movq    %r15, %rdi
    // 55: ff 15 00 00 00 00             callq   *(%rip)                 # 0x5b <_JIT_ENTRY+0x5b>
    // 0000000000000057:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 5b: 48 8b 03                      movq    (%rbx), %rax
    // 5e: 85 c0                         testl   %eax, %eax
    // 60: 79 dd                         jns     0x3f <_JIT_ENTRY+0x3f>
    // 62: 4d 85 f6                      testq   %r14, %r14
    // 65: 74 0f                         je      0x76 <_JIT_ENTRY+0x76>
    // 67: 4c 89 75 f0                   movq    %r14, -0x10(%rbp)
    // 6b: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 6f: 58                            popq    %rax
    // 70: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x76 <_JIT_ENTRY+0x76>
    // 0000000000000072:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 76: 58                            popq    %rax
    // 77: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x7d <_JIT_ENTRY+0x7d>
    // 0000000000000079:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 7d: 
    const unsigned char code_body[125] = {
        0x50, 0x4c, 0x8b, 0x7d, 0xf0, 0x48, 0x8b, 0x5d,
        0xf8, 0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00,
        0xc1, 0xe0, 0x04, 0x48, 0x8b, 0x0d, 0x00, 0x00,
        0x00, 0x00, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xfe,
        0x48, 0x89, 0xda, 0xff, 0x14, 0x01, 0x49, 0x89,
        0xc6, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x08,
        0x48, 0xff, 0xc8, 0x49, 0x89, 0x07, 0x74, 0x1a,
        0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x23, 0x48,
        0xff, 0xc8, 0x48, 0x89, 0x03, 0x75, 0x1b, 0x48,
        0x89, 0xdf, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0xeb, 0x10, 0x4c, 0x89, 0xff, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x03, 0x85, 0xc0,
        0x79, 0xdd, 0x4d, 0x85, 0xf6, 0x74, 0x0f, 0x4c,
        0x89, 0x75, 0xf0, 0x48, 0x83, 0xc5, 0xf8, 0x58,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x58, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: &_PyIntrinsics_BinaryFunctions+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyIntrinsics_BinaryFunctions);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0xc, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x16, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x4c, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x57, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x72, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x79, (uintptr_t)data + 0x1c);
}

void
emit__CALL_ISINSTANCE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CALL_ISINSTANCE.o:    file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 18                   subq    $0x18, %rsp
    // 4: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // b: 89 c8                         movl    %ecx, %eax
    // d: f7 d0                         notl    %eax
    // f: 4c 63 f8                      movslq  %eax, %r15
    // 12: 31 c0                         xorl    %eax, %eax
    // 14: 4a 83 7c fd 00 00             cmpq    $0x0, (%rbp,%r15,8)
    // 1a: 0f 95 c0                      setne   %al
    // 1d: 8d 14 08                      leal    (%rax,%rcx), %edx
    // 20: 83 fa 02                      cmpl    $0x2, %edx
    // 23: 75 1d                         jne     0x42 <_JIT_ENTRY+0x42>
    // 25: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
    // 2a: 29 ca                         subl    %ecx, %edx
    // 2c: 4c 63 f2                      movslq  %edx, %r14
    // 2f: 4a 8b 5c f5 00                movq    (%rbp,%r14,8), %rbx
    // 34: 49 8b 54 24 10                movq    0x10(%r12), %rdx
    // 39: 48 3b 9a 30 f2 02 00          cmpq    0x2f230(%rdx), %rbx
    // 40: 74 0a                         je      0x4c <_JIT_ENTRY+0x4c>
    // 42: 48 83 c4 18                   addq    $0x18, %rsp
    // 46: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x4c <_JIT_ENTRY+0x4c>
    // 0000000000000048:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 4c: c1 e1 03                      shll    $0x3, %ecx
    // 4f: 48 89 ea                      movq    %rbp, %rdx
    // 52: 48 29 ca                      subq    %rcx, %rdx
    // 55: 48 f7 d8                      negq    %rax
    // 58: 48 8b 3c c2                   movq    (%rdx,%rax,8), %rdi
    // 5c: 48 8b 74 c2 08                movq    0x8(%rdx,%rax,8), %rsi
    // 61: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
    // 66: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
    // 6b: ff 15 00 00 00 00             callq   *(%rip)                 # 0x71 <_JIT_ENTRY+0x71>
    // 000000000000006d:  R_X86_64_GOTPCRELX   PyObject_IsInstance-0x4
    // 71: 85 c0                         testl   %eax, %eax
    // 73: 0f 88 94 00 00 00             js      0x10d <_JIT_ENTRY+0x10d>
    // 79: 89 c7                         movl    %eax, %edi
    // 7b: ff 15 00 00 00 00             callq   *(%rip)                 # 0x81 <_JIT_ENTRY+0x81>
    // 000000000000007d:  R_X86_64_GOTPCRELX   PyBool_FromLong-0x4
    // 81: 48 85 c0                      testq   %rax, %rax
    // 84: 0f 84 8d 00 00 00             je      0x117 <_JIT_ENTRY+0x117>
    // 8a: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
    // 8f: 48 8b 0f                      movq    (%rdi), %rcx
    // 92: 85 c9                         testl   %ecx, %ecx
    // 94: 78 18                         js      0xae <_JIT_ENTRY+0xae>
    // 96: 48 ff c9                      decq    %rcx
    // 99: 48 89 0f                      movq    %rcx, (%rdi)
    // 9c: 75 10                         jne     0xae <_JIT_ENTRY+0xae>
    // 9e: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
    // a3: ff 15 00 00 00 00             callq   *(%rip)                 # 0xa9 <_JIT_ENTRY+0xa9>
    // 00000000000000a5:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // a9: 48 8b 44 24 08                movq    0x8(%rsp), %rax
    // ae: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
    // b3: 48 8b 0f                      movq    (%rdi), %rcx
    // b6: 85 c9                         testl   %ecx, %ecx
    // b8: 78 18                         js      0xd2 <_JIT_ENTRY+0xd2>
    // ba: 48 ff c9                      decq    %rcx
    // bd: 48 89 0f                      movq    %rcx, (%rdi)
    // c0: 75 10                         jne     0xd2 <_JIT_ENTRY+0xd2>
    // c2: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
    // c7: ff 15 00 00 00 00             callq   *(%rip)                 # 0xcd <_JIT_ENTRY+0xcd>
    // 00000000000000c9:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // cd: 48 8b 44 24 08                movq    0x8(%rsp), %rax
    // d2: 4e 8d 3c fd 00 00 00 00       leaq    (,%r15,8), %r15
    // da: 49 01 ef                      addq    %rbp, %r15
    // dd: 48 8b 0b                      movq    (%rbx), %rcx
    // e0: 85 c9                         testl   %ecx, %ecx
    // e2: 78 17                         js      0xfb <_JIT_ENTRY+0xfb>
    // e4: 48 ff c9                      decq    %rcx
    // e7: 48 89 0b                      movq    %rcx, (%rbx)
    // ea: 75 0f                         jne     0xfb <_JIT_ENTRY+0xfb>
    // ec: 48 89 df                      movq    %rbx, %rdi
    // ef: 48 89 c3                      movq    %rax, %rbx
    // f2: ff 15 00 00 00 00             callq   *(%rip)                 # 0xf8 <_JIT_ENTRY+0xf8>
    // 00000000000000f4:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // f8: 48 89 d8                      movq    %rbx, %rax
    // fb: 4a 89 44 f5 00                movq    %rax, (%rbp,%r14,8)
    // 100: 4c 89 fd                      movq    %r15, %rbp
    // 103: 48 83 c4 18                   addq    $0x18, %rsp
    // 107: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x10d <_JIT_ENTRY+0x10d>
    // 0000000000000109:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 10d: 48 83 c4 18                   addq    $0x18, %rsp
    // 111: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x117 <_JIT_ENTRY+0x117>
    // 0000000000000113:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 117: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x11e <_JIT_ENTRY+0x11e>
    // 000000000000011a:  R_X86_64_REX_GOTPCRELX       _JIT_EXECUTOR-0x4
    // 11e: 49 89 84 24 10 01 00 00       movq    %rax, 0x110(%r12)
    // 126: 4c 29 ed                      subq    %r13, %rbp
    // 129: 48 83 c5 b8                   addq    $-0x48, %rbp
    // 12d: 48 c1 ed 03                   shrq    $0x3, %rbp
    // 131: 41 89 6d 40                   movl    %ebp, 0x40(%r13)
    // 135: 31 c0                         xorl    %eax, %eax
    // 137: 48 83 c4 18                   addq    $0x18, %rsp
    // 13b: c3                            retq
    // 13c: 
    const unsigned char code_body[316] = {
        0x48, 0x83, 0xec, 0x18, 0x0f, 0xb7, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x89, 0xc8, 0xf7, 0xd0, 0x4c,
        0x63, 0xf8, 0x31, 0xc0, 0x4a, 0x83, 0x7c, 0xfd,
        0x00, 0x00, 0x0f, 0x95, 0xc0, 0x8d, 0x14, 0x08,
        0x83, 0xfa, 0x02, 0x75, 0x1d, 0xba, 0xfe, 0xff,
        0xff, 0xff, 0x29, 0xca, 0x4c, 0x63, 0xf2, 0x4a,
        0x8b, 0x5c, 0xf5, 0x00, 0x49, 0x8b, 0x54, 0x24,
        0x10, 0x48, 0x3b, 0x9a, 0x30, 0xf2, 0x02, 0x00,
        0x74, 0x0a, 0x48, 0x83, 0xc4, 0x18, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0xc1, 0xe1, 0x03, 0x48,
        0x89, 0xea, 0x48, 0x29, 0xca, 0x48, 0xf7, 0xd8,
        0x48, 0x8b, 0x3c, 0xc2, 0x48, 0x8b, 0x74, 0xc2,
        0x08, 0x48, 0x89, 0x7c, 0x24, 0x08, 0x48, 0x89,
        0x74, 0x24, 0x10, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x85, 0xc0, 0x0f, 0x88, 0x94, 0x00, 0x00,
        0x00, 0x89, 0xc7, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0x8d, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x7c, 0x24, 0x08, 0x48,
        0x8b, 0x0f, 0x85, 0xc9, 0x78, 0x18, 0x48, 0xff,
        0xc9, 0x48, 0x89, 0x0f, 0x75, 0x10, 0x48, 0x89,
        0x44, 0x24, 0x08, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48, 0x8b,
        0x7c, 0x24, 0x10, 0x48, 0x8b, 0x0f, 0x85, 0xc9,
        0x78, 0x18, 0x48, 0xff, 0xc9, 0x48, 0x89, 0x0f,
        0x75, 0x10, 0x48, 0x89, 0x44, 0x24, 0x08, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x44,
        0x24, 0x08, 0x4e, 0x8d, 0x3c, 0xfd, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x01, 0xef, 0x48, 0x8b, 0x0b,
        0x85, 0xc9, 0x78, 0x17, 0x48, 0xff, 0xc9, 0x48,
        0x89, 0x0b, 0x75, 0x0f, 0x48, 0x89, 0xdf, 0x48,
        0x89, 0xc3, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xd8, 0x4a, 0x89, 0x44, 0xf5, 0x00,
        0x4c, 0x89, 0xfd, 0x48, 0x83, 0xc4, 0x18, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc4,
        0x18, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89,
        0x84, 0x24, 0x10, 0x01, 0x00, 0x00, 0x4c, 0x29,
        0xed, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed,
        0x03, 0x41, 0x89, 0x6d, 0x40, 0x31, 0xc0, 0x48,
        0x83, 0xc4, 0x18, 0xc3,
    };
    // 0: 
    // 0: OPARG
    // 8: JUMP_TARGET
    // 10: &PyObject_IsInstance+0x0
    // 18: &PyBool_FromLong+0x0
    // 20: &_Py_Dealloc+0x0
    // 28: CONTINUE
    // 30: ERROR_TARGET
    // 38: EXECUTOR
    const unsigned char data_body[64] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&PyObject_IsInstance);
    patch_64(data + 0x18, (uintptr_t)&PyBool_FromLong);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x28, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x30, instruction_starts[instruction->error_target]);
    patch_64(data + 0x38, (uintptr_t)executor);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x48, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x6d, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x7d, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xa5, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xc9, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xf4, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x109, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x113, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0x11a, (uintptr_t)data + 0x34);
}

void
emit__CALL_LEN(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CALL_LEN.o:   file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x8 <_JIT_ENTRY+0x8>
    // 0000000000000004:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 8: 89 c1                         movl    %eax, %ecx
    // a: f7 d1                         notl    %ecx
    // c: 48 63 d9                      movslq  %ecx, %rbx
    // f: 31 c9                         xorl    %ecx, %ecx
    // 11: 48 83 7c dd 00 00             cmpq    $0x0, (%rbp,%rbx,8)
    // 17: 0f 95 c1                      setne   %cl
    // 1a: 8d 14 01                      leal    (%rcx,%rax), %edx
    // 1d: 83 fa 01                      cmpl    $0x1, %edx
    // 20: 75 1d                         jne     0x3f <_JIT_ENTRY+0x3f>
    // 22: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
    // 27: 29 c2                         subl    %eax, %edx
    // 29: 4c 63 fa                      movslq  %edx, %r15
    // 2c: 4e 8b 74 fd 00                movq    (%rbp,%r15,8), %r14
    // 31: 49 8b 54 24 10                movq    0x10(%r12), %rdx
    // 36: 4c 3b b2 38 f2 02 00          cmpq    0x2f238(%rdx), %r14
    // 3d: 74 07                         je      0x46 <_JIT_ENTRY+0x46>
    // 3f: 58                            popq    %rax
    // 40: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x46 <_JIT_ENTRY+0x46>
    // 0000000000000042:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 46: c1 e0 03                      shll    $0x3, %eax
    // 49: 48 89 ea                      movq    %rbp, %rdx
    // 4c: 48 29 c2                      subq    %rax, %rdx
    // 4f: 48 f7 d9                      negq    %rcx
    // 52: 48 8b 3c ca                   movq    (%rdx,%rcx,8), %rdi
    // 56: 48 89 3c 24                   movq    %rdi, (%rsp)
    // 5a: ff 15 00 00 00 00             callq   *(%rip)                 # 0x60 <_JIT_ENTRY+0x60>
    // 000000000000005c:  R_X86_64_GOTPCRELX   PyObject_Size-0x4
    // 60: 48 85 c0                      testq   %rax, %rax
    // 63: 78 65                         js      0xca <_JIT_ENTRY+0xca>
    // 65: 48 89 c7                      movq    %rax, %rdi
    // 68: ff 15 00 00 00 00             callq   *(%rip)                 # 0x6e <_JIT_ENTRY+0x6e>
    // 000000000000006a:  R_X86_64_GOTPCRELX   PyLong_FromSsize_t-0x4
    // 6e: 48 85 c0                      testq   %rax, %rax
    // 71: 74 5e                         je      0xd1 <_JIT_ENTRY+0xd1>
    // 73: 49 8b 0e                      movq    (%r14), %rcx
    // 76: 85 c9                         testl   %ecx, %ecx
    // 78: 78 17                         js      0x91 <_JIT_ENTRY+0x91>
    // 7a: 48 ff c9                      decq    %rcx
    // 7d: 49 89 0e                      movq    %rcx, (%r14)
    // 80: 75 0f                         jne     0x91 <_JIT_ENTRY+0x91>
    // 82: 4c 89 f7                      movq    %r14, %rdi
    // 85: 49 89 c6                      movq    %rax, %r14
    // 88: ff 15 00 00 00 00             callq   *(%rip)                 # 0x8e <_JIT_ENTRY+0x8e>
    // 000000000000008a:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 8e: 4c 89 f0                      movq    %r14, %rax
    // 91: 4c 8d 34 dd 00 00 00 00       leaq    (,%rbx,8), %r14
    // 99: 49 01 ee                      addq    %rbp, %r14
    // 9c: 48 8b 3c 24                   movq    (%rsp), %rdi
    // a0: 48 8b 0f                      movq    (%rdi), %rcx
    // a3: 85 c9                         testl   %ecx, %ecx
    // a5: 78 14                         js      0xbb <_JIT_ENTRY+0xbb>
    // a7: 48 ff c9                      decq    %rcx
    // aa: 48 89 0f                      movq    %rcx, (%rdi)
    // ad: 75 0c                         jne     0xbb <_JIT_ENTRY+0xbb>
    // af: 48 89 c3                      movq    %rax, %rbx
    // b2: ff 15 00 00 00 00             callq   *(%rip)                 # 0xb8 <_JIT_ENTRY+0xb8>
    // 00000000000000b4:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // b8: 48 89 d8                      movq    %rbx, %rax
    // bb: 4a 89 44 fd 00                movq    %rax, (%rbp,%r15,8)
    // c0: 4c 89 f5                      movq    %r14, %rbp
    // c3: 58                            popq    %rax
    // c4: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xca <_JIT_ENTRY+0xca>
    // 00000000000000c6:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // ca: 58                            popq    %rax
    // cb: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xd1 <_JIT_ENTRY+0xd1>
    // 00000000000000cd:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // d1: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0xd8 <_JIT_ENTRY+0xd8>
    // 00000000000000d4:  R_X86_64_REX_GOTPCRELX       _JIT_EXECUTOR-0x4
    // d8: 49 89 84 24 10 01 00 00       movq    %rax, 0x110(%r12)
    // e0: 4c 29 ed                      subq    %r13, %rbp
    // e3: 48 83 c5 b8                   addq    $-0x48, %rbp
    // e7: 48 c1 ed 03                   shrq    $0x3, %rbp
    // eb: 41 89 6d 40                   movl    %ebp, 0x40(%r13)
    // ef: 31 c0                         xorl    %eax, %eax
    // f1: 59                            popq    %rcx
    // f2: c3                            retq
    // f3: 
    const unsigned char code_body[243] = {
        0x50, 0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x89, 0xc1, 0xf7, 0xd1, 0x48, 0x63, 0xd9, 0x31,
        0xc9, 0x48, 0x83, 0x7c, 0xdd, 0x00, 0x00, 0x0f,
        0x95, 0xc1, 0x8d, 0x14, 0x01, 0x83, 0xfa, 0x01,
        0x75, 0x1d, 0xba, 0xfe, 0xff, 0xff, 0xff, 0x29,
        0xc2, 0x4c, 0x63, 0xfa, 0x4e, 0x8b, 0x74, 0xfd,
        0x00, 0x49, 0x8b, 0x54, 0x24, 0x10, 0x4c, 0x3b,
        0xb2, 0x38, 0xf2, 0x02, 0x00, 0x74, 0x07, 0x58,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0xc1, 0xe0,
        0x03, 0x48, 0x89, 0xea, 0x48, 0x29, 0xc2, 0x48,
        0xf7, 0xd9, 0x48, 0x8b, 0x3c, 0xca, 0x48, 0x89,
        0x3c, 0x24, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x85, 0xc0, 0x78, 0x65, 0x48, 0x89, 0xc7,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85,
        0xc0, 0x74, 0x5e, 0x49, 0x8b, 0x0e, 0x85, 0xc9,
        0x78, 0x17, 0x48, 0xff, 0xc9, 0x49, 0x89, 0x0e,
        0x75, 0x0f, 0x4c, 0x89, 0xf7, 0x49, 0x89, 0xc6,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0xf0, 0x4c, 0x8d, 0x34, 0xdd, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x01, 0xee, 0x48, 0x8b, 0x3c, 0x24,
        0x48, 0x8b, 0x0f, 0x85, 0xc9, 0x78, 0x14, 0x48,
        0xff, 0xc9, 0x48, 0x89, 0x0f, 0x75, 0x0c, 0x48,
        0x89, 0xc3, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xd8, 0x4a, 0x89, 0x44, 0xfd, 0x00,
        0x4c, 0x89, 0xf5, 0x58, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x89, 0x84, 0x24, 0x10, 0x01, 0x00, 0x00,
        0x4c, 0x29, 0xed, 0x48, 0x83, 0xc5, 0xb8, 0x48,
        0xc1, 0xed, 0x03, 0x41, 0x89, 0x6d, 0x40, 0x31,
        0xc0, 0x59, 0xc3,
    };
    // 0: 
    // 0: OPARG
    // 8: JUMP_TARGET
    // 10: &PyObject_Size+0x0
    // 18: &PyLong_FromSsize_t+0x0
    // 20: &_Py_Dealloc+0x0
    // 28: CONTINUE
    // 30: ERROR_TARGET
    // 38: EXECUTOR
    const unsigned char data_body[64] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&PyObject_Size);
    patch_64(data + 0x18, (uintptr_t)&PyLong_FromSsize_t);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x28, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x30, instruction_starts[instruction->error_target]);
    patch_64(data + 0x38, (uintptr_t)executor);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x4, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x42, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x5c, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x6a, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x8a, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xb4, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xc6, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0xcd, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0xd4, (uintptr_t)data + 0x34);
}

void
emit__CALL_METHOD_DESCRIPTOR_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CALL_METHOD_DESCRIPTOR_FAST.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 38                   subq    $0x38, %rsp
    // 4: 48 8b 35 00 00 00 00          movq    (%rip), %rsi            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  R_X86_64_REX_GOTPCRELX       _JIT_OPARG-0x4
    // b: 0f b7 fe                      movzwl  %si, %edi
    // e: 89 f8                         movl    %edi, %eax
    // 10: f7 d0                         notl    %eax
    // 12: 48 63 c8                      movslq  %eax, %rcx
    // 15: 48 8b 44 cd 00                movq    (%rbp,%rcx,8), %rax
    // 1a: 45 31 f6                      xorl    %r14d, %r14d
    // 1d: 48 85 c0                      testq   %rax, %rax
    // 20: 41 0f 95 c6                   setne   %r14b
    // 24: 44 89 f2                      movl    %r14d, %edx
    // 27: 01 fa                         addl    %edi, %edx
    // 29: 74 54                         je      0x7f <_JIT_ENTRY+0x7f>
    // 2b: bb fe ff ff ff                movl    $0xfffffffe, %ebx       # imm = 0xFFFFFFFE
    // 30: 29 fb                         subl    %edi, %ebx
    // 32: 4c 63 d3                      movslq  %ebx, %r10
    // 35: 4e 8b 5c d5 00                movq    (%rbp,%r10,8), %r11
    // 3a: 49 8b 7b 08                   movq    0x8(%r11), %rdi
    // 3e: 48 3b 3d 00 00 00 00          cmpq    (%rip), %rdi            # 0x45 <_JIT_ENTRY+0x45>
    // 0000000000000041:  R_X86_64_REX_GOTPCRELX       PyMethodDescr_Type-0x4
    // 45: 75 38                         jne     0x7f <_JIT_ENTRY+0x7f>
    // 47: 4d 8b 43 28                   movq    0x28(%r11), %r8
    // 4b: 41 81 78 10 80 00 00 00       cmpl    $0x80, 0x10(%r8)
    // 53: 75 2a                         jne     0x7f <_JIT_ENTRY+0x7f>
    // 55: 44 0f b7 fe                   movzwl  %si, %r15d
    // 59: 42 8d 3c fd 00 00 00 00       leal    (,%r15,8), %edi
    // 61: 48 89 ee                      movq    %rbp, %rsi
    // 64: 48 29 fe                      subq    %rdi, %rsi
    // 67: 42 8d 3c f5 00 00 00 00       leal    (,%r14,8), %edi
    // 6f: 48 29 fe                      subq    %rdi, %rsi
    // 72: 48 8b 3e                      movq    (%rsi), %rdi
    // 75: 4c 8b 4f 08                   movq    0x8(%rdi), %r9
    // 79: 4d 3b 4b 10                   cmpq    0x10(%r11), %r9
    // 7d: 74 0a                         je      0x89 <_JIT_ENTRY+0x89>
    // 7f: 48 83 c4 38                   addq    $0x38, %rsp
    // 83: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x89 <_JIT_ENTRY+0x89>
    // 0000000000000085:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 89: 4c 89 5c 24 28                movq    %r11, 0x28(%rsp)
    // 8e: 4c 89 54 24 30                movq    %r10, 0x30(%rsp)
    // 93: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
    // 98: 4c 89 64 24 10                movq    %r12, 0x10(%rsp)
    // 9d: 49 f7 df                      negq    %r15
    // a0: 48 8d 0c cd 00 00 00 00       leaq    (,%rcx,8), %rcx
    // a8: 48 01 e9                      addq    %rbp, %rcx
    // ab: 48 89 4c 24 18                movq    %rcx, 0x18(%rsp)
    // b0: 49 f7 de                      negq    %r14
    // b3: 31 db                         xorl    %ebx, %ebx
    // b5: 48 85 c0                      testq   %rax, %rax
    // b8: 0f 95 c3                      setne   %bl
    // bb: ff ca                         decl    %edx
    // bd: 48 83 c6 08                   addq    $0x8, %rsi
    // c1: 41 ff 50 08                   callq   *0x8(%r8)
    // c5: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
    // ca: 4e 8d 34 f5 00 00 00 00       leaq    (,%r14,8), %r14
    // d2: 49 01 ee                      addq    %rbp, %r14
    // d5: 4c 8b 25 00 00 00 00          movq    (%rip), %r12            # 0xdc <_JIT_ENTRY+0xdc>
    // 00000000000000d8:  R_X86_64_REX_GOTPCRELX       _Py_Dealloc-0x4
    // dc: eb 0a                         jmp     0xe8 <_JIT_ENTRY+0xe8>
    // de: 66 90                         nop
    // e0: 49 ff c7                      incq    %r15
    // e3: 4c 39 fb                      cmpq    %r15, %rbx
    // e6: 74 18                         je      0x100 <_JIT_ENTRY+0x100>
    // e8: 4b 8b 3c fe                   movq    (%r14,%r15,8), %rdi
    // ec: 48 8b 07                      movq    (%rdi), %rax
    // ef: 85 c0                         testl   %eax, %eax
    // f1: 78 ed                         js      0xe0 <_JIT_ENTRY+0xe0>
    // f3: 48 ff c8                      decq    %rax
    // f6: 48 89 07                      movq    %rax, (%rdi)
    // f9: 75 e5                         jne     0xe0 <_JIT_ENTRY+0xe0>
    // fb: 41 ff d4                      callq   *%r12
    // fe: eb e0                         jmp     0xe0 <_JIT_ENTRY+0xe0>
    // 100: 48 8b 7c 24 28                movq    0x28(%rsp), %rdi
    // 105: 48 8b 07                      movq    (%rdi), %rax
    // 108: 85 c0                         testl   %eax, %eax
    // 10a: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
    // 10f: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
    // 114: 78 18                         js      0x12e <_JIT_ENTRY+0x12e>
    // 116: 48 ff c8                      decq    %rax
    // 119: 48 89 07                      movq    %rax, (%rdi)
    // 11c: 75 10                         jne     0x12e <_JIT_ENTRY+0x12e>
    // 11e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x124 <_JIT_ENTRY+0x124>
    // 0000000000000120:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 124: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
    // 129: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
    // 12e: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
    // 133: 48 85 c9                      testq   %rcx, %rcx
    // 136: 48 8b 44 24 30                movq    0x30(%rsp), %rax
    // 13b: 74 14                         je      0x151 <_JIT_ENTRY+0x151>
    // 13d: 48 89 4c c5 00                movq    %rcx, (%rbp,%rax,8)
    // 142: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
    // 147: 48 83 c4 38                   addq    $0x38, %rsp
    // 14b: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x151 <_JIT_ENTRY+0x151>
    // 000000000000014d:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 151: 48 83 c4 38                   addq    $0x38, %rsp
    // 155: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x15b <_JIT_ENTRY+0x15b>
    // 0000000000000157:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 15b: 
    const unsigned char code_body[347] = {
        0x48, 0x83, 0xec, 0x38, 0x48, 0x8b, 0x35, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xb7, 0xfe, 0x89, 0xf8,
        0xf7, 0xd0, 0x48, 0x63, 0xc8, 0x48, 0x8b, 0x44,
        0xcd, 0x00, 0x45, 0x31, 0xf6, 0x48, 0x85, 0xc0,
        0x41, 0x0f, 0x95, 0xc6, 0x44, 0x89, 0xf2, 0x01,
        0xfa, 0x74, 0x54, 0xbb, 0xfe, 0xff, 0xff, 0xff,
        0x29, 0xfb, 0x4c, 0x63, 0xd3, 0x4e, 0x8b, 0x5c,
        0xd5, 0x00, 0x49, 0x8b, 0x7b, 0x08, 0x48, 0x3b,
        0x3d, 0x00, 0x00, 0x00, 0x00, 0x75, 0x38, 0x4d,
        0x8b, 0x43, 0x28, 0x41, 0x81, 0x78, 0x10, 0x80,
        0x00, 0x00, 0x00, 0x75, 0x2a, 0x44, 0x0f, 0xb7,
        0xfe, 0x42, 0x8d, 0x3c, 0xfd, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xee, 0x48, 0x29, 0xfe, 0x42,
        0x8d, 0x3c, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x29, 0xfe, 0x48, 0x8b, 0x3e, 0x4c, 0x8b, 0x4f,
        0x08, 0x4d, 0x3b, 0x4b, 0x10, 0x74, 0x0a, 0x48,
        0x83, 0xc4, 0x38, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x4c, 0x89, 0x5c, 0x24, 0x28, 0x4c, 0x89,
        0x54, 0x24, 0x30, 0x4c, 0x89, 0x6c, 0x24, 0x08,
        0x4c, 0x89, 0x64, 0x24, 0x10, 0x49, 0xf7, 0xdf,
        0x48, 0x8d, 0x0c, 0xcd, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x01, 0xe9, 0x48, 0x89, 0x4c, 0x24, 0x18,
        0x49, 0xf7, 0xde, 0x31, 0xdb, 0x48, 0x85, 0xc0,
        0x0f, 0x95, 0xc3, 0xff, 0xca, 0x48, 0x83, 0xc6,
        0x08, 0x41, 0xff, 0x50, 0x08, 0x48, 0x89, 0x44,
        0x24, 0x20, 0x4e, 0x8d, 0x34, 0xf5, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x01, 0xee, 0x4c, 0x8b, 0x25,
        0x00, 0x00, 0x00, 0x00, 0xeb, 0x0a, 0x66, 0x90,
        0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x74, 0x18,
        0x4b, 0x8b, 0x3c, 0xfe, 0x48, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0xed, 0x48, 0xff, 0xc8, 0x48, 0x89,
        0x07, 0x75, 0xe5, 0x41, 0xff, 0xd4, 0xeb, 0xe0,
        0x48, 0x8b, 0x7c, 0x24, 0x28, 0x48, 0x8b, 0x07,
        0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x4c,
        0x8b, 0x6c, 0x24, 0x08, 0x78, 0x18, 0x48, 0xff,
        0xc8, 0x48, 0x89, 0x07, 0x75, 0x10, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x6c, 0x24,
        0x08, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x48, 0x8b,
        0x4c, 0x24, 0x20, 0x48, 0x85, 0xc9, 0x48, 0x8b,
        0x44, 0x24, 0x30, 0x74, 0x14, 0x48, 0x89, 0x4c,
        0xc5, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x48,
        0x83, 0xc4, 0x38, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x83, 0xc4, 0x38, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: &PyMethodDescr_Type+0x0
    // 10: JUMP_TARGET
    // 18: &_Py_Dealloc+0x0
    // 20: CONTINUE
    // 28: ERROR_TARGET
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMethodDescr_Type);
    patch_64(data + 0x10, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x28, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x41, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x85, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xd8, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x120, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x14d, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x157, (uintptr_t)data + 0x24);
}

void
emit__CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 38                   subq    $0x38, %rsp
    // 4: 48 8b 35 00 00 00 00          movq    (%rip), %rsi            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  R_X86_64_REX_GOTPCRELX       _JIT_OPARG-0x4
    // b: 0f b7 fe                      movzwl  %si, %edi
    // e: 89 f8                         movl    %edi, %eax
    // 10: f7 d0                         notl    %eax
    // 12: 48 63 c8                      movslq  %eax, %rcx
    // 15: 48 8b 44 cd 00                movq    (%rbp,%rcx,8), %rax
    // 1a: 45 31 f6                      xorl    %r14d, %r14d
    // 1d: 48 85 c0                      testq   %rax, %rax
    // 20: 41 0f 95 c6                   setne   %r14b
    // 24: 44 89 f2                      movl    %r14d, %edx
    // 27: 01 fa                         addl    %edi, %edx
    // 29: 74 54                         je      0x7f <_JIT_ENTRY+0x7f>
    // 2b: bb fe ff ff ff                movl    $0xfffffffe, %ebx       # imm = 0xFFFFFFFE
    // 30: 29 fb                         subl    %edi, %ebx
    // 32: 4c 63 d3                      movslq  %ebx, %r10
    // 35: 4e 8b 5c d5 00                movq    (%rbp,%r10,8), %r11
    // 3a: 49 8b 7b 08                   movq    0x8(%r11), %rdi
    // 3e: 48 3b 3d 00 00 00 00          cmpq    (%rip), %rdi            # 0x45 <_JIT_ENTRY+0x45>
    // 0000000000000041:  R_X86_64_REX_GOTPCRELX       PyMethodDescr_Type-0x4
    // 45: 75 38                         jne     0x7f <_JIT_ENTRY+0x7f>
    // 47: 4d 8b 43 28                   movq    0x28(%r11), %r8
    // 4b: 41 81 78 10 82 00 00 00       cmpl    $0x82, 0x10(%r8)
    // 53: 75 2a                         jne     0x7f <_JIT_ENTRY+0x7f>
    // 55: 44 0f b7 fe                   movzwl  %si, %r15d
    // 59: 42 8d 3c fd 00 00 00 00       leal    (,%r15,8), %edi
    // 61: 48 89 ee                      movq    %rbp, %rsi
    // 64: 48 29 fe                      subq    %rdi, %rsi
    // 67: 42 8d 3c f5 00 00 00 00       leal    (,%r14,8), %edi
    // 6f: 48 29 fe                      subq    %rdi, %rsi
    // 72: 48 8b 3e                      movq    (%rsi), %rdi
    // 75: 4c 8b 4f 08                   movq    0x8(%rdi), %r9
    // 79: 4d 3b 4b 10                   cmpq    0x10(%r11), %r9
    // 7d: 74 0a                         je      0x89 <_JIT_ENTRY+0x89>
    // 7f: 48 83 c4 38                   addq    $0x38, %rsp
    // 83: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x89 <_JIT_ENTRY+0x89>
    // 0000000000000085:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 89: 4c 89 5c 24 28                movq    %r11, 0x28(%rsp)
    // 8e: 4c 89 54 24 30                movq    %r10, 0x30(%rsp)
    // 93: 4c 89 6c 24 08                movq    %r13, 0x8(%rsp)
    // 98: 4c 89 64 24 10                movq    %r12, 0x10(%rsp)
    // 9d: 49 f7 df                      negq    %r15
    // a0: 48 8d 0c cd 00 00 00 00       leaq    (,%rcx,8), %rcx
    // a8: 48 01 e9                      addq    %rbp, %rcx
    // ab: 48 89 4c 24 18                movq    %rcx, 0x18(%rsp)
    // b0: 49 f7 de                      negq    %r14
    // b3: 31 db                         xorl    %ebx, %ebx
    // b5: 48 85 c0                      testq   %rax, %rax
    // b8: 0f 95 c3                      setne   %bl
    // bb: ff ca                         decl    %edx
    // bd: 48 83 c6 08                   addq    $0x8, %rsi
    // c1: 31 c9                         xorl    %ecx, %ecx
    // c3: 41 ff 50 08                   callq   *0x8(%r8)
    // c7: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
    // cc: 4e 8d 34 f5 00 00 00 00       leaq    (,%r14,8), %r14
    // d4: 49 01 ee                      addq    %rbp, %r14
    // d7: 4c 8b 25 00 00 00 00          movq    (%rip), %r12            # 0xde <_JIT_ENTRY+0xde>
    // 00000000000000da:  R_X86_64_REX_GOTPCRELX       _Py_Dealloc-0x4
    // de: eb 08                         jmp     0xe8 <_JIT_ENTRY+0xe8>
    // e0: 49 ff c7                      incq    %r15
    // e3: 4c 39 fb                      cmpq    %r15, %rbx
    // e6: 74 18                         je      0x100 <_JIT_ENTRY+0x100>
    // e8: 4b 8b 3c fe                   movq    (%r14,%r15,8), %rdi
    // ec: 48 8b 07                      movq    (%rdi), %rax
    // ef: 85 c0                         testl   %eax, %eax
    // f1: 78 ed                         js      0xe0 <_JIT_ENTRY+0xe0>
    // f3: 48 ff c8                      decq    %rax
    // f6: 48 89 07                      movq    %rax, (%rdi)
    // f9: 75 e5                         jne     0xe0 <_JIT_ENTRY+0xe0>
    // fb: 41 ff d4                      callq   *%r12
    // fe: eb e0                         jmp     0xe0 <_JIT_ENTRY+0xe0>
    // 100: 48 8b 7c 24 28                movq    0x28(%rsp), %rdi
    // 105: 48 8b 07                      movq    (%rdi), %rax
    // 108: 85 c0                         testl   %eax, %eax
    // 10a: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
    // 10f: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
    // 114: 78 18                         js      0x12e <_JIT_ENTRY+0x12e>
    // 116: 48 ff c8                      decq    %rax
    // 119: 48 89 07                      movq    %rax, (%rdi)
    // 11c: 75 10                         jne     0x12e <_JIT_ENTRY+0x12e>
    // 11e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x124 <_JIT_ENTRY+0x124>
    // 0000000000000120:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 124: 4c 8b 6c 24 08                movq    0x8(%rsp), %r13
    // 129: 4c 8b 64 24 10                movq    0x10(%rsp), %r12
    // 12e: 48 8b 4c 24 20                movq    0x20(%rsp), %rcx
    // 133: 48 85 c9                      testq   %rcx, %rcx
    // 136: 48 8b 44 24 30                movq    0x30(%rsp), %rax
    // 13b: 74 14                         je      0x151 <_JIT_ENTRY+0x151>
    // 13d: 48 89 4c c5 00                movq    %rcx, (%rbp,%rax,8)
    // 142: 48 8b 6c 24 18                movq    0x18(%rsp), %rbp
    // 147: 48 83 c4 38                   addq    $0x38, %rsp
    // 14b: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x151 <_JIT_ENTRY+0x151>
    // 000000000000014d:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 151: 48 83 c4 38                   addq    $0x38, %rsp
    // 155: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x15b <_JIT_ENTRY+0x15b>
    // 0000000000000157:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 15b: 
    const unsigned char code_body[347] = {
        0x48, 0x83, 0xec, 0x38, 0x48, 0x8b, 0x35, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xb7, 0xfe, 0x89, 0xf8,
        0xf7, 0xd0, 0x48, 0x63, 0xc8, 0x48, 0x8b, 0x44,
        0xcd, 0x00, 0x45, 0x31, 0xf6, 0x48, 0x85, 0xc0,
        0x41, 0x0f, 0x95, 0xc6, 0x44, 0x89, 0xf2, 0x01,
        0xfa, 0x74, 0x54, 0xbb, 0xfe, 0xff, 0xff, 0xff,
        0x29, 0xfb, 0x4c, 0x63, 0xd3, 0x4e, 0x8b, 0x5c,
        0xd5, 0x00, 0x49, 0x8b, 0x7b, 0x08, 0x48, 0x3b,
        0x3d, 0x00, 0x00, 0x00, 0x00, 0x75, 0x38, 0x4d,
        0x8b, 0x43, 0x28, 0x41, 0x81, 0x78, 0x10, 0x82,
        0x00, 0x00, 0x00, 0x75, 0x2a, 0x44, 0x0f, 0xb7,
        0xfe, 0x42, 0x8d, 0x3c, 0xfd, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xee, 0x48, 0x29, 0xfe, 0x42,
        0x8d, 0x3c, 0xf5, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x29, 0xfe, 0x48, 0x8b, 0x3e, 0x4c, 0x8b, 0x4f,
        0x08, 0x4d, 0x3b, 0x4b, 0x10, 0x74, 0x0a, 0x48,
        0x83, 0xc4, 0x38, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x4c, 0x89, 0x5c, 0x24, 0x28, 0x4c, 0x89,
        0x54, 0x24, 0x30, 0x4c, 0x89, 0x6c, 0x24, 0x08,
        0x4c, 0x89, 0x64, 0x24, 0x10, 0x49, 0xf7, 0xdf,
        0x48, 0x8d, 0x0c, 0xcd, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x01, 0xe9, 0x48, 0x89, 0x4c, 0x24, 0x18,
        0x49, 0xf7, 0xde, 0x31, 0xdb, 0x48, 0x85, 0xc0,
        0x0f, 0x95, 0xc3, 0xff, 0xca, 0x48, 0x83, 0xc6,
        0x08, 0x31, 0xc9, 0x41, 0xff, 0x50, 0x08, 0x48,
        0x89, 0x44, 0x24, 0x20, 0x4e, 0x8d, 0x34, 0xf5,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x01, 0xee, 0x4c,
        0x8b, 0x25, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x08,
        0x49, 0xff, 0xc7, 0x4c, 0x39, 0xfb, 0x74, 0x18,
        0x4b, 0x8b, 0x3c, 0xfe, 0x48, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0xed, 0x48, 0xff, 0xc8, 0x48, 0x89,
        0x07, 0x75, 0xe5, 0x41, 0xff, 0xd4, 0xeb, 0xe0,
        0x48, 0x8b, 0x7c, 0x24, 0x28, 0x48, 0x8b, 0x07,
        0x85, 0xc0, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x4c,
        0x8b, 0x6c, 0x24, 0x08, 0x78, 0x18, 0x48, 0xff,
        0xc8, 0x48, 0x89, 0x07, 0x75, 0x10, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x6c, 0x24,
        0x08, 0x4c, 0x8b, 0x64, 0x24, 0x10, 0x48, 0x8b,
        0x4c, 0x24, 0x20, 0x48, 0x85, 0xc9, 0x48, 0x8b,
        0x44, 0x24, 0x30, 0x74, 0x14, 0x48, 0x89, 0x4c,
        0xc5, 0x00, 0x48, 0x8b, 0x6c, 0x24, 0x18, 0x48,
        0x83, 0xc4, 0x38, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x83, 0xc4, 0x38, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: &PyMethodDescr_Type+0x0
    // 10: JUMP_TARGET
    // 18: &_Py_Dealloc+0x0
    // 20: CONTINUE
    // 28: ERROR_TARGET
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMethodDescr_Type);
    patch_64(data + 0x10, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x28, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x41, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x85, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xda, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x120, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x14d, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x157, (uintptr_t)data + 0x24);
}

void
emit__CALL_METHOD_DESCRIPTOR_NOARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CALL_METHOD_DESCRIPTOR_NOARGS.o:      file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x8 <_JIT_ENTRY+0x8>
    // 0000000000000004:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 8: 89 c1                         movl    %eax, %ecx
    // a: f7 d1                         notl    %ecx
    // c: 4c 63 f9                      movslq  %ecx, %r15
    // f: 31 c9                         xorl    %ecx, %ecx
    // 11: 4a 83 7c fd 00 00             cmpq    $0x0, (%rbp,%r15,8)
    // 17: 0f 95 c1                      setne   %cl
    // 1a: 8d 14 01                      leal    (%rcx,%rax), %edx
    // 1d: 83 fa 01                      cmpl    $0x1, %edx
    // 20: 0f 85 cf 00 00 00             jne     0xf5 <_JIT_ENTRY+0xf5>
    // 26: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
    // 2b: 29 c2                         subl    %eax, %edx
    // 2d: 4c 63 f2                      movslq  %edx, %r14
    // 30: 4a 8b 5c f5 00                movq    (%rbp,%r14,8), %rbx
    // 35: 48 8b 53 08                   movq    0x8(%rbx), %rdx
    // 39: 48 3b 15 00 00 00 00          cmpq    (%rip), %rdx            # 0x40 <_JIT_ENTRY+0x40>
    // 000000000000003c:  R_X86_64_REX_GOTPCRELX       PyMethodDescr_Type-0x4
    // 40: 0f 85 af 00 00 00             jne     0xf5 <_JIT_ENTRY+0xf5>
    // 46: c1 e0 03                      shll    $0x3, %eax
    // 49: 48 89 ea                      movq    %rbp, %rdx
    // 4c: 48 29 c2                      subq    %rax, %rdx
    // 4f: 48 f7 d9                      negq    %rcx
    // 52: 48 8b 14 ca                   movq    (%rdx,%rcx,8), %rdx
    // 56: 48 8b 42 08                   movq    0x8(%rdx), %rax
    // 5a: 48 3b 43 10                   cmpq    0x10(%rbx), %rax
    // 5e: 0f 85 91 00 00 00             jne     0xf5 <_JIT_ENTRY+0xf5>
    // 64: 48 8b 43 28                   movq    0x28(%rbx), %rax
    // 68: 83 78 10 04                   cmpl    $0x4, 0x10(%rax)
    // 6c: 0f 85 83 00 00 00             jne     0xf5 <_JIT_ENTRY+0xf5>
    // 72: 41 8b 4c 24 34                movl    0x34(%r12), %ecx
    // 77: 85 c9                         testl   %ecx, %ecx
    // 79: 7e 7a                         jle     0xf5 <_JIT_ENTRY+0xf5>
    // 7b: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 7f: ff c9                         decl    %ecx
    // 81: 41 89 4c 24 34                movl    %ecx, 0x34(%r12)
    // 86: 48 89 14 24                   movq    %rdx, (%rsp)
    // 8a: 48 8b 3c 24                   movq    (%rsp), %rdi
    // 8e: 31 f6                         xorl    %esi, %esi
    // 90: ff d0                         callq   *%rax
    // 92: 48 8b 3c 24                   movq    (%rsp), %rdi
    // 96: 41 ff 44 24 34                incl    0x34(%r12)
    // 9b: 48 8b 0f                      movq    (%rdi), %rcx
    // 9e: 85 c9                         testl   %ecx, %ecx
    // a0: 78 16                         js      0xb8 <_JIT_ENTRY+0xb8>
    // a2: 48 ff c9                      decq    %rcx
    // a5: 48 89 0f                      movq    %rcx, (%rdi)
    // a8: 75 0e                         jne     0xb8 <_JIT_ENTRY+0xb8>
    // aa: 48 89 04 24                   movq    %rax, (%rsp)
    // ae: ff 15 00 00 00 00             callq   *(%rip)                 # 0xb4 <_JIT_ENTRY+0xb4>
    // 00000000000000b0:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // b4: 48 8b 04 24                   movq    (%rsp), %rax
    // b8: 48 8b 0b                      movq    (%rbx), %rcx
    // bb: 85 c9                         testl   %ecx, %ecx
    // bd: 78 17                         js      0xd6 <_JIT_ENTRY+0xd6>
    // bf: 48 ff c9                      decq    %rcx
    // c2: 48 89 0b                      movq    %rcx, (%rbx)
    // c5: 75 0f                         jne     0xd6 <_JIT_ENTRY+0xd6>
    // c7: 48 89 df                      movq    %rbx, %rdi
    // ca: 48 89 c3                      movq    %rax, %rbx
    // cd: ff 15 00 00 00 00             callq   *(%rip)                 # 0xd3 <_JIT_ENTRY+0xd3>
    // 00000000000000cf:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // d3: 48 89 d8                      movq    %rbx, %rax
    // d6: 48 85 c0                      testq   %rax, %rax
    // d9: 74 21                         je      0xfc <_JIT_ENTRY+0xfc>
    // db: 4a 8d 0c fd 00 00 00 00       leaq    (,%r15,8), %rcx
    // e3: 48 01 e9                      addq    %rbp, %rcx
    // e6: 4a 89 44 f5 00                movq    %rax, (%rbp,%r14,8)
    // eb: 48 89 cd                      movq    %rcx, %rbp
    // ee: 58                            popq    %rax
    // ef: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xf5 <_JIT_ENTRY+0xf5>
    // 00000000000000f1:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // f5: 58                            popq    %rax
    // f6: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xfc <_JIT_ENTRY+0xfc>
    // 00000000000000f8:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // fc: 58                            popq    %rax
    // fd: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x103 <_JIT_ENTRY+0x103>
    // 00000000000000ff:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 103: 
    const unsigned char code_body[259] = {
        0x50, 0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x89, 0xc1, 0xf7, 0xd1, 0x4c, 0x63, 0xf9, 0x31,
        0xc9, 0x4a, 0x83, 0x7c, 0xfd, 0x00, 0x00, 0x0f,
        0x95, 0xc1, 0x8d, 0x14, 0x01, 0x83, 0xfa, 0x01,
        0x0f, 0x85, 0xcf, 0x00, 0x00, 0x00, 0xba, 0xfe,
        0xff, 0xff, 0xff, 0x29, 0xc2, 0x4c, 0x63, 0xf2,
        0x4a, 0x8b, 0x5c, 0xf5, 0x00, 0x48, 0x8b, 0x53,
        0x08, 0x48, 0x3b, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0x85, 0xaf, 0x00, 0x00, 0x00, 0xc1, 0xe0,
        0x03, 0x48, 0x89, 0xea, 0x48, 0x29, 0xc2, 0x48,
        0xf7, 0xd9, 0x48, 0x8b, 0x14, 0xca, 0x48, 0x8b,
        0x42, 0x08, 0x48, 0x3b, 0x43, 0x10, 0x0f, 0x85,
        0x91, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x43, 0x28,
        0x83, 0x78, 0x10, 0x04, 0x0f, 0x85, 0x83, 0x00,
        0x00, 0x00, 0x41, 0x8b, 0x4c, 0x24, 0x34, 0x85,
        0xc9, 0x7e, 0x7a, 0x48, 0x8b, 0x40, 0x08, 0xff,
        0xc9, 0x41, 0x89, 0x4c, 0x24, 0x34, 0x48, 0x89,
        0x14, 0x24, 0x48, 0x8b, 0x3c, 0x24, 0x31, 0xf6,
        0xff, 0xd0, 0x48, 0x8b, 0x3c, 0x24, 0x41, 0xff,
        0x44, 0x24, 0x34, 0x48, 0x8b, 0x0f, 0x85, 0xc9,
        0x78, 0x16, 0x48, 0xff, 0xc9, 0x48, 0x89, 0x0f,
        0x75, 0x0e, 0x48, 0x89, 0x04, 0x24, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04, 0x24,
        0x48, 0x8b, 0x0b, 0x85, 0xc9, 0x78, 0x17, 0x48,
        0xff, 0xc9, 0x48, 0x89, 0x0b, 0x75, 0x0f, 0x48,
        0x89, 0xdf, 0x48, 0x89, 0xc3, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x48, 0x85,
        0xc0, 0x74, 0x21, 0x4a, 0x8d, 0x0c, 0xfd, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x01, 0xe9, 0x4a, 0x89,
        0x44, 0xf5, 0x00, 0x48, 0x89, 0xcd, 0x58, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x58, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: &PyMethodDescr_Type+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: CONTINUE
    // 20: JUMP_TARGET
    // 28: ERROR_TARGET
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMethodDescr_Type);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x28, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x4, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x3c, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xb0, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xcf, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xf1, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xf8, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xff, (uintptr_t)data + 0x24);
}

void
emit__CALL_METHOD_DESCRIPTOR_O(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CALL_METHOD_DESCRIPTOR_O.o:   file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 18                   subq    $0x18, %rsp
    // 4: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // b: 89 c8                         movl    %ecx, %eax
    // d: f7 d0                         notl    %eax
    // f: 4c 63 f8                      movslq  %eax, %r15
    // 12: 31 c0                         xorl    %eax, %eax
    // 14: 4a 83 7c fd 00 00             cmpq    $0x0, (%rbp,%r15,8)
    // 1a: 0f 95 c0                      setne   %al
    // 1d: 8d 14 08                      leal    (%rax,%rcx), %edx
    // 20: 83 fa 02                      cmpl    $0x2, %edx
    // 23: 75 4a                         jne     0x6f <_JIT_ENTRY+0x6f>
    // 25: ba fe ff ff ff                movl    $0xfffffffe, %edx       # imm = 0xFFFFFFFE
    // 2a: 29 ca                         subl    %ecx, %edx
    // 2c: 4c 63 f2                      movslq  %edx, %r14
    // 2f: 4a 8b 5c f5 00                movq    (%rbp,%r14,8), %rbx
    // 34: 48 8b 53 08                   movq    0x8(%rbx), %rdx
    // 38: 48 3b 15 00 00 00 00          cmpq    (%rip), %rdx            # 0x3f <_JIT_ENTRY+0x3f>
    // 000000000000003b:  R_X86_64_REX_GOTPCRELX       PyMethodDescr_Type-0x4
    // 3f: 75 2e                         jne     0x6f <_JIT_ENTRY+0x6f>
    // 41: 48 8b 53 28                   movq    0x28(%rbx), %rdx
    // 45: 83 7a 10 08                   cmpl    $0x8, 0x10(%rdx)
    // 49: 75 24                         jne     0x6f <_JIT_ENTRY+0x6f>
    // 4b: 45 8b 44 24 34                movl    0x34(%r12), %r8d
    // 50: 45 85 c0                      testl   %r8d, %r8d
    // 53: 7e 1a                         jle     0x6f <_JIT_ENTRY+0x6f>
    // 55: c1 e1 03                      shll    $0x3, %ecx
    // 58: 48 89 ee                      movq    %rbp, %rsi
    // 5b: 48 29 ce                      subq    %rcx, %rsi
    // 5e: 48 f7 d8                      negq    %rax
    // 61: 48 8b 3c c6                   movq    (%rsi,%rax,8), %rdi
    // 65: 48 8b 4f 08                   movq    0x8(%rdi), %rcx
    // 69: 48 3b 4b 10                   cmpq    0x10(%rbx), %rcx
    // 6d: 74 0a                         je      0x79 <_JIT_ENTRY+0x79>
    // 6f: 48 83 c4 18                   addq    $0x18, %rsp
    // 73: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x79 <_JIT_ENTRY+0x79>
    // 0000000000000075:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 79: 48 8b 74 c6 08                movq    0x8(%rsi,%rax,8), %rsi
    // 7e: 48 8b 42 08                   movq    0x8(%rdx), %rax
    // 82: 41 ff c8                      decl    %r8d
    // 85: 45 89 44 24 34                movl    %r8d, 0x34(%r12)
    // 8a: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
    // 8f: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
    // 94: ff d0                         callq   *%rax
    // 96: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
    // 9b: 41 ff 44 24 34                incl    0x34(%r12)
    // a0: 48 8b 0f                      movq    (%rdi), %rcx
    // a3: 85 c9                         testl   %ecx, %ecx
    // a5: 78 18                         js      0xbf <_JIT_ENTRY+0xbf>
    // a7: 48 ff c9                      decq    %rcx
    // aa: 48 89 0f                      movq    %rcx, (%rdi)
    // ad: 75 10                         jne     0xbf <_JIT_ENTRY+0xbf>
    // af: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
    // b4: ff 15 00 00 00 00             callq   *(%rip)                 # 0xba <_JIT_ENTRY+0xba>
    // 00000000000000b6:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // ba: 48 8b 44 24 08                movq    0x8(%rsp), %rax
    // bf: 48 8b 7c 24 10                movq    0x10(%rsp), %rdi
    // c4: 48 8b 0f                      movq    (%rdi), %rcx
    // c7: 85 c9                         testl   %ecx, %ecx
    // c9: 78 18                         js      0xe3 <_JIT_ENTRY+0xe3>
    // cb: 48 ff c9                      decq    %rcx
    // ce: 48 89 0f                      movq    %rcx, (%rdi)
    // d1: 75 10                         jne     0xe3 <_JIT_ENTRY+0xe3>
    // d3: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
    // d8: ff 15 00 00 00 00             callq   *(%rip)                 # 0xde <_JIT_ENTRY+0xde>
    // 00000000000000da:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // de: 48 8b 44 24 08                movq    0x8(%rsp), %rax
    // e3: 48 8b 0b                      movq    (%rbx), %rcx
    // e6: 85 c9                         testl   %ecx, %ecx
    // e8: 78 17                         js      0x101 <_JIT_ENTRY+0x101>
    // ea: 48 ff c9                      decq    %rcx
    // ed: 48 89 0b                      movq    %rcx, (%rbx)
    // f0: 75 0f                         jne     0x101 <_JIT_ENTRY+0x101>
    // f2: 48 89 df                      movq    %rbx, %rdi
    // f5: 48 89 c3                      movq    %rax, %rbx
    // f8: ff 15 00 00 00 00             callq   *(%rip)                 # 0xfe <_JIT_ENTRY+0xfe>
    // 00000000000000fa:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // fe: 48 89 d8                      movq    %rbx, %rax
    // 101: 48 85 c0                      testq   %rax, %rax
    // 104: 74 1d                         je      0x123 <_JIT_ENTRY+0x123>
    // 106: 4a 8d 0c fd 00 00 00 00       leaq    (,%r15,8), %rcx
    // 10e: 48 01 e9                      addq    %rbp, %rcx
    // 111: 4a 89 44 f5 00                movq    %rax, (%rbp,%r14,8)
    // 116: 48 89 cd                      movq    %rcx, %rbp
    // 119: 48 83 c4 18                   addq    $0x18, %rsp
    // 11d: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x123 <_JIT_ENTRY+0x123>
    // 000000000000011f:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 123: 48 83 c4 18                   addq    $0x18, %rsp
    // 127: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x12d <_JIT_ENTRY+0x12d>
    // 0000000000000129:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 12d: 
    const unsigned char code_body[301] = {
        0x48, 0x83, 0xec, 0x18, 0x0f, 0xb7, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x89, 0xc8, 0xf7, 0xd0, 0x4c,
        0x63, 0xf8, 0x31, 0xc0, 0x4a, 0x83, 0x7c, 0xfd,
        0x00, 0x00, 0x0f, 0x95, 0xc0, 0x8d, 0x14, 0x08,
        0x83, 0xfa, 0x02, 0x75, 0x4a, 0xba, 0xfe, 0xff,
        0xff, 0xff, 0x29, 0xca, 0x4c, 0x63, 0xf2, 0x4a,
        0x8b, 0x5c, 0xf5, 0x00, 0x48, 0x8b, 0x53, 0x08,
        0x48, 0x3b, 0x15, 0x00, 0x00, 0x00, 0x00, 0x75,
        0x2e, 0x48, 0x8b, 0x53, 0x28, 0x83, 0x7a, 0x10,
        0x08, 0x75, 0x24, 0x45, 0x8b, 0x44, 0x24, 0x34,
        0x45, 0x85, 0xc0, 0x7e, 0x1a, 0xc1, 0xe1, 0x03,
        0x48, 0x89, 0xee, 0x48, 0x29, 0xce, 0x48, 0xf7,
        0xd8, 0x48, 0x8b, 0x3c, 0xc6, 0x48, 0x8b, 0x4f,
        0x08, 0x48, 0x3b, 0x4b, 0x10, 0x74, 0x0a, 0x48,
        0x83, 0xc4, 0x18, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x74, 0xc6, 0x08, 0x48, 0x8b,
        0x42, 0x08, 0x41, 0xff, 0xc8, 0x45, 0x89, 0x44,
        0x24, 0x34, 0x48, 0x89, 0x74, 0x24, 0x10, 0x48,
        0x89, 0x7c, 0x24, 0x08, 0xff, 0xd0, 0x48, 0x8b,
        0x7c, 0x24, 0x08, 0x41, 0xff, 0x44, 0x24, 0x34,
        0x48, 0x8b, 0x0f, 0x85, 0xc9, 0x78, 0x18, 0x48,
        0xff, 0xc9, 0x48, 0x89, 0x0f, 0x75, 0x10, 0x48,
        0x89, 0x44, 0x24, 0x08, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08, 0x48,
        0x8b, 0x7c, 0x24, 0x10, 0x48, 0x8b, 0x0f, 0x85,
        0xc9, 0x78, 0x18, 0x48, 0xff, 0xc9, 0x48, 0x89,
        0x0f, 0x75, 0x10, 0x48, 0x89, 0x44, 0x24, 0x08,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x44, 0x24, 0x08, 0x48, 0x8b, 0x0b, 0x85, 0xc9,
        0x78, 0x17, 0x48, 0xff, 0xc9, 0x48, 0x89, 0x0b,
        0x75, 0x0f, 0x48, 0x89, 0xdf, 0x48, 0x89, 0xc3,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89,
        0xd8, 0x48, 0x85, 0xc0, 0x74, 0x1d, 0x4a, 0x8d,
        0x0c, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01,
        0xe9, 0x4a, 0x89, 0x44, 0xf5, 0x00, 0x48, 0x89,
        0xcd, 0x48, 0x83, 0xc4, 0x18, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x83, 0xc4, 0x18, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: &PyMethodDescr_Type+0x0
    // 10: JUMP_TARGET
    // 18: &_Py_Dealloc+0x0
    // 20: CONTINUE
    // 28: ERROR_TARGET
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMethodDescr_Type);
    patch_64(data + 0x10, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x28, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x3b, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x75, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xb6, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xda, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xfa, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x11f, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x129, (uintptr_t)data + 0x24);
}

void
emit__CALL_NON_PY_GENERAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CALL_NON_PY_GENERAL.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 28                   subq    $0x28, %rsp
    // 4: 4c 89 64 24 08                movq    %r12, 0x8(%rsp)
    // 9: 4c 89 2c 24                   movq    %r13, (%rsp)
    // d: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x14 <_JIT_ENTRY+0x14>
    // 0000000000000010:  R_X86_64_REX_GOTPCRELX       _JIT_OPARG-0x4
    // 14: 44 0f b7 e8                   movzwl  %ax, %r13d
    // 18: 44 0f b7 f8                   movzwl  %ax, %r15d
    // 1c: 42 8d 04 fd 00 00 00 00       leal    (,%r15,8), %eax
    // 24: 48 89 ee                      movq    %rbp, %rsi
    // 27: 48 29 c6                      subq    %rax, %rsi
    // 2a: 44 89 e8                      movl    %r13d, %eax
    // 2d: f7 d0                         notl    %eax
    // 2f: 48 98                         cltq
    // 31: 48 89 44 24 18                movq    %rax, 0x18(%rsp)
    // 36: 4c 8b 64 c5 00                movq    (%rbp,%rax,8), %r12
    // 3b: b8 fe ff ff ff                movl    $0xfffffffe, %eax       # imm = 0xFFFFFFFE
    // 40: 44 29 e8                      subl    %r13d, %eax
    // 43: 48 98                         cltq
    // 45: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
    // 4a: 4c 8b 74 c5 00                movq    (%rbp,%rax,8), %r14
    // 4f: 31 db                         xorl    %ebx, %ebx
    // 51: 4d 85 e4                      testq   %r12, %r12
    // 54: 0f 95 c3                      setne   %bl
    // 57: 41 01 dd                      addl    %ebx, %r13d
    // 5a: 8d 04 dd 00 00 00 00          leal    (,%rbx,8), %eax
    // 61: 48 29 c6                      subq    %rax, %rsi
    // 64: 48 ba 00 00 00 00 00 00 00 80 movabsq $-0x8000000000000000, %rdx # imm = 0x8000000000000000
    // 6e: 4c 09 ea                      orq     %r13, %rdx
    // 71: 4c 89 f7                      movq    %r14, %rdi
    // 74: 31 c9                         xorl    %ecx, %ecx
    // 76: ff 15 00 00 00 00             callq   *(%rip)                 # 0x7c <_JIT_ENTRY+0x7c>
    // 0000000000000078:  R_X86_64_GOTPCRELX   PyObject_Vectorcall-0x4
    // 7c: 48 89 44 24 20                movq    %rax, 0x20(%rsp)
    // 81: 49 8b 06                      movq    (%r14), %rax
    // 84: 85 c0                         testl   %eax, %eax
    // 86: 78 11                         js      0x99 <_JIT_ENTRY+0x99>
    // 88: 48 ff c8                      decq    %rax
    // 8b: 49 89 06                      movq    %rax, (%r14)
    // 8e: 75 09                         jne     0x99 <_JIT_ENTRY+0x99>
    // 90: 4c 89 f7                      movq    %r14, %rdi
    // 93: ff 15 00 00 00 00             callq   *(%rip)                 # 0x99 <_JIT_ENTRY+0x99>
    // 0000000000000095:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 99: 45 85 ed                      testl   %r13d, %r13d
    // 9c: 74 52                         je      0xf0 <_JIT_ENTRY+0xf0>
    // 9e: 49 f7 df                      negq    %r15
    // a1: 48 f7 db                      negq    %rbx
    // a4: 45 31 f6                      xorl    %r14d, %r14d
    // a7: 4d 85 e4                      testq   %r12, %r12
    // aa: 41 0f 95 c6                   setne   %r14b
    // ae: 48 8d 1c dd 00 00 00 00       leaq    (,%rbx,8), %rbx
    // b6: 48 01 eb                      addq    %rbp, %rbx
    // b9: 4c 8b 25 00 00 00 00          movq    (%rip), %r12            # 0xc0 <_JIT_ENTRY+0xc0>
    // 00000000000000bc:  R_X86_64_REX_GOTPCRELX       _Py_Dealloc-0x4
    // c0: eb 16                         jmp     0xd8 <_JIT_ENTRY+0xd8>
    // c2: 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00     nopw    %cs:(%rax,%rax)
    // d0: 49 ff c7                      incq    %r15
    // d3: 4d 39 fe                      cmpq    %r15, %r14
    // d6: 74 18                         je      0xf0 <_JIT_ENTRY+0xf0>
    // d8: 4a 8b 3c fb                   movq    (%rbx,%r15,8), %rdi
    // dc: 48 8b 07                      movq    (%rdi), %rax
    // df: 85 c0                         testl   %eax, %eax
    // e1: 78 ed                         js      0xd0 <_JIT_ENTRY+0xd0>
    // e3: 48 ff c8                      decq    %rax
    // e6: 48 89 07                      movq    %rax, (%rdi)
    // e9: 75 e5                         jne     0xd0 <_JIT_ENTRY+0xd0>
    // eb: 41 ff d4                      callq   *%r12
    // ee: eb e0                         jmp     0xd0 <_JIT_ENTRY+0xd0>
    // f0: 48 8b 54 24 20                movq    0x20(%rsp), %rdx
    // f5: 48 85 d2                      testq   %rdx, %rdx
    // f8: 74 30                         je      0x12a <_JIT_ENTRY+0x12a>
    // fa: 48 8b 44 24 18                movq    0x18(%rsp), %rax
    // ff: 48 8d 04 c5 00 00 00 00       leaq    (,%rax,8), %rax
    // 107: 48 01 e8                      addq    %rbp, %rax
    // 10a: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
    // 10f: 48 89 54 cd 00                movq    %rdx, (%rbp,%rcx,8)
    // 114: 4c 8b 2c 24                   movq    (%rsp), %r13
    // 118: 48 89 c5                      movq    %rax, %rbp
    // 11b: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
    // 120: 48 83 c4 28                   addq    $0x28, %rsp
    // 124: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x12a <_JIT_ENTRY+0x12a>
    // 0000000000000126:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 12a: 4c 8b 2c 24                   movq    (%rsp), %r13
    // 12e: 4c 8b 64 24 08                movq    0x8(%rsp), %r12
    // 133: 48 83 c4 28                   addq    $0x28, %rsp
    // 137: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x13d <_JIT_ENTRY+0x13d>
    // 0000000000000139:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 13d: 
    const unsigned char code_body[317] = {
        0x48, 0x83, 0xec, 0x28, 0x4c, 0x89, 0x64, 0x24,
        0x08, 0x4c, 0x89, 0x2c, 0x24, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x44, 0x0f, 0xb7, 0xe8,
        0x44, 0x0f, 0xb7, 0xf8, 0x42, 0x8d, 0x04, 0xfd,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xee, 0x48,
        0x29, 0xc6, 0x44, 0x89, 0xe8, 0xf7, 0xd0, 0x48,
        0x98, 0x48, 0x89, 0x44, 0x24, 0x18, 0x4c, 0x8b,
        0x64, 0xc5, 0x00, 0xb8, 0xfe, 0xff, 0xff, 0xff,
        0x44, 0x29, 0xe8, 0x48, 0x98, 0x48, 0x89, 0x44,
        0x24, 0x10, 0x4c, 0x8b, 0x74, 0xc5, 0x00, 0x31,
        0xdb, 0x4d, 0x85, 0xe4, 0x0f, 0x95, 0xc3, 0x41,
        0x01, 0xdd, 0x8d, 0x04, 0xdd, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x29, 0xc6, 0x48, 0xba, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x4c, 0x09,
        0xea, 0x4c, 0x89, 0xf7, 0x31, 0xc9, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x44, 0x24,
        0x20, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11,
        0x48, 0xff, 0xc8, 0x49, 0x89, 0x06, 0x75, 0x09,
        0x4c, 0x89, 0xf7, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x45, 0x85, 0xed, 0x74, 0x52, 0x49, 0xf7,
        0xdf, 0x48, 0xf7, 0xdb, 0x45, 0x31, 0xf6, 0x4d,
        0x85, 0xe4, 0x41, 0x0f, 0x95, 0xc6, 0x48, 0x8d,
        0x1c, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01,
        0xeb, 0x4c, 0x8b, 0x25, 0x00, 0x00, 0x00, 0x00,
        0xeb, 0x16, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x49, 0xff, 0xc7, 0x4d, 0x39, 0xfe, 0x74, 0x18,
        0x4a, 0x8b, 0x3c, 0xfb, 0x48, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0xed, 0x48, 0xff, 0xc8, 0x48, 0x89,
        0x07, 0x75, 0xe5, 0x41, 0xff, 0xd4, 0xeb, 0xe0,
        0x48, 0x8b, 0x54, 0x24, 0x20, 0x48, 0x85, 0xd2,
        0x74, 0x30, 0x48, 0x8b, 0x44, 0x24, 0x18, 0x48,
        0x8d, 0x04, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x01, 0xe8, 0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48,
        0x89, 0x54, 0xcd, 0x00, 0x4c, 0x8b, 0x2c, 0x24,
        0x48, 0x89, 0xc5, 0x4c, 0x8b, 0x64, 0x24, 0x08,
        0x48, 0x83, 0xc4, 0x28, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x4c, 0x8b, 0x2c, 0x24, 0x4c, 0x8b,
        0x64, 0x24, 0x08, 0x48, 0x83, 0xc4, 0x28, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: &PyObject_Vectorcall+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: CONTINUE
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyObject_Vectorcall);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x10, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x78, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x95, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xbc, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x126, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x139, (uintptr_t)data + 0x1c);
}

void
emit__CALL_STR_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CALL_STR_1.o: file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 83 7d f0 00                cmpq    $0x0, -0x10(%rbp)
    // 6: 75 0d                         jne     0x15 <_JIT_ENTRY+0x15>
    // 8: 48 8b 45 e8                   movq    -0x18(%rbp), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  R_X86_64_REX_GOTPCRELX       PyUnicode_Type-0x4
    // 13: 74 07                         je      0x1c <_JIT_ENTRY+0x1c>
    // 15: 58                            popq    %rax
    // 16: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1c <_JIT_ENTRY+0x1c>
    // 0000000000000018:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 1c: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 20: 48 89 df                      movq    %rbx, %rdi
    // 23: ff 15 00 00 00 00             callq   *(%rip)                 # 0x29 <_JIT_ENTRY+0x29>
    // 0000000000000025:  R_X86_64_GOTPCRELX   PyObject_Str-0x4
    // 29: 48 8b 0b                      movq    (%rbx), %rcx
    // 2c: 85 c9                         testl   %ecx, %ecx
    // 2e: 78 17                         js      0x47 <_JIT_ENTRY+0x47>
    // 30: 48 ff c9                      decq    %rcx
    // 33: 48 89 0b                      movq    %rcx, (%rbx)
    // 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
    // 38: 48 89 df                      movq    %rbx, %rdi
    // 3b: 48 89 c3                      movq    %rax, %rbx
    // 3e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x44 <_JIT_ENTRY+0x44>
    // 0000000000000040:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 44: 48 89 d8                      movq    %rbx, %rax
    // 47: 48 85 c0                      testq   %rax, %rax
    // 4a: 74 0f                         je      0x5b <_JIT_ENTRY+0x5b>
    // 4c: 48 89 45 e8                   movq    %rax, -0x18(%rbp)
    // 50: 48 83 c5 f0                   addq    $-0x10, %rbp
    // 54: 58                            popq    %rax
    // 55: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x5b <_JIT_ENTRY+0x5b>
    // 0000000000000057:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 5b: 58                            popq    %rax
    // 5c: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x62 <_JIT_ENTRY+0x62>
    // 000000000000005e:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 62: 
    const unsigned char code_body[98] = {
        0x50, 0x48, 0x83, 0x7d, 0xf0, 0x00, 0x75, 0x0d,
        0x48, 0x8b, 0x45, 0xe8, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x07, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x5d, 0xf8,
        0x48, 0x89, 0xdf, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x0b, 0x85, 0xc9, 0x78, 0x17,
        0x48, 0xff, 0xc9, 0x48, 0x89, 0x0b, 0x75, 0x0f,
        0x48, 0x89, 0xdf, 0x48, 0x89, 0xc3, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x48,
        0x85, 0xc0, 0x74, 0x0f, 0x48, 0x89, 0x45, 0xe8,
        0x48, 0x83, 0xc5, 0xf0, 0x58, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x58, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: 
    // 0: &PyUnicode_Type+0x0
    // 8: JUMP_TARGET
    // 10: &PyObject_Str+0x0
    // 18: &_Py_Dealloc+0x0
    // 20: CONTINUE
    // 28: ERROR_TARGET
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyUnicode_Type);
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&PyObject_Str);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x28, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x18, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x25, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x40, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x57, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x5e, (uintptr_t)data + 0x24);
}

void
emit__CALL_TUPLE_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CALL_TUPLE_1.o:       file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 83 7d f0 00                cmpq    $0x0, -0x10(%rbp)
    // 6: 75 0d                         jne     0x15 <_JIT_ENTRY+0x15>
    // 8: 48 8b 45 e8                   movq    -0x18(%rbp), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  R_X86_64_REX_GOTPCRELX       PyTuple_Type-0x4
    // 13: 74 07                         je      0x1c <_JIT_ENTRY+0x1c>
    // 15: 58                            popq    %rax
    // 16: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1c <_JIT_ENTRY+0x1c>
    // 0000000000000018:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 1c: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 20: 48 89 df                      movq    %rbx, %rdi
    // 23: ff 15 00 00 00 00             callq   *(%rip)                 # 0x29 <_JIT_ENTRY+0x29>
    // 0000000000000025:  R_X86_64_GOTPCRELX   PySequence_Tuple-0x4
    // 29: 48 8b 0b                      movq    (%rbx), %rcx
    // 2c: 85 c9                         testl   %ecx, %ecx
    // 2e: 78 17                         js      0x47 <_JIT_ENTRY+0x47>
    // 30: 48 ff c9                      decq    %rcx
    // 33: 48 89 0b                      movq    %rcx, (%rbx)
    // 36: 75 0f                         jne     0x47 <_JIT_ENTRY+0x47>
    // 38: 48 89 df                      movq    %rbx, %rdi
    // 3b: 48 89 c3                      movq    %rax, %rbx
    // 3e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x44 <_JIT_ENTRY+0x44>
    // 0000000000000040:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 44: 48 89 d8                      movq    %rbx, %rax
    // 47: 48 85 c0                      testq   %rax, %rax
    // 4a: 74 0f                         je      0x5b <_JIT_ENTRY+0x5b>
    // 4c: 48 89 45 e8                   movq    %rax, -0x18(%rbp)
    // 50: 48 83 c5 f0                   addq    $-0x10, %rbp
    // 54: 58                            popq    %rax
    // 55: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x5b <_JIT_ENTRY+0x5b>
    // 0000000000000057:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 5b: 58                            popq    %rax
    // 5c: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x62 <_JIT_ENTRY+0x62>
    // 000000000000005e:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 62: 
    const unsigned char code_body[98] = {
        0x50, 0x48, 0x83, 0x7d, 0xf0, 0x00, 0x75, 0x0d,
        0x48, 0x8b, 0x45, 0xe8, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x07, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x5d, 0xf8,
        0x48, 0x89, 0xdf, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x0b, 0x85, 0xc9, 0x78, 0x17,
        0x48, 0xff, 0xc9, 0x48, 0x89, 0x0b, 0x75, 0x0f,
        0x48, 0x89, 0xdf, 0x48, 0x89, 0xc3, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x48,
        0x85, 0xc0, 0x74, 0x0f, 0x48, 0x89, 0x45, 0xe8,
        0x48, 0x83, 0xc5, 0xf0, 0x58, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x58, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: 
    // 0: &PyTuple_Type+0x0
    // 8: JUMP_TARGET
    // 10: &PySequence_Tuple+0x0
    // 18: &_Py_Dealloc+0x0
    // 20: CONTINUE
    // 28: ERROR_TARGET
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyTuple_Type);
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&PySequence_Tuple);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x28, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x18, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x25, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x40, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x57, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x5e, (uintptr_t)data + 0x24);
}

void
emit__CALL_TYPE_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CALL_TYPE_1.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 83 7d f0 00                cmpq    $0x0, -0x10(%rbp)
    // 6: 75 0d                         jne     0x15 <_JIT_ENTRY+0x15>
    // 8: 48 8b 45 e8                   movq    -0x18(%rbp), %rax
    // c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  R_X86_64_REX_GOTPCRELX       PyType_Type-0x4
    // 13: 74 07                         je      0x1c <_JIT_ENTRY+0x1c>
    // 15: 58                            popq    %rax
    // 16: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1c <_JIT_ENTRY+0x1c>
    // 0000000000000018:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 1c: 48 8b 7d f8                   movq    -0x8(%rbp), %rdi
    // 20: 4c 8b 77 08                   movq    0x8(%rdi), %r14
    // 24: 41 8b 06                      movl    (%r14), %eax
    // 27: ff c0                         incl    %eax
    // 29: 74 03                         je      0x2e <_JIT_ENTRY+0x2e>
    // 2b: 41 89 06                      movl    %eax, (%r14)
    // 2e: 48 8d 5d f0                   leaq    -0x10(%rbp), %rbx
    // 32: 48 8b 07                      movq    (%rdi), %rax
    // 35: 85 c0                         testl   %eax, %eax
    // 37: 78 0e                         js      0x47 <_JIT_ENTRY+0x47>
    // 39: 48 ff c8                      decq    %rax
    // 3c: 48 89 07                      movq    %rax, (%rdi)
    // 3f: 75 06                         jne     0x47 <_JIT_ENTRY+0x47>
    // 41: ff 15 00 00 00 00             callq   *(%rip)                 # 0x47 <_JIT_ENTRY+0x47>
    // 0000000000000043:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 47: 4c 89 75 e8                   movq    %r14, -0x18(%rbp)
    // 4b: 48 89 dd                      movq    %rbx, %rbp
    // 4e: 58                            popq    %rax
    // 4f: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x55 <_JIT_ENTRY+0x55>
    // 0000000000000051:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 4f: 
    const unsigned char code_body[79] = {
        0x50, 0x48, 0x83, 0x7d, 0xf0, 0x00, 0x75, 0x0d,
        0x48, 0x8b, 0x45, 0xe8, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x07, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x7d, 0xf8,
        0x4c, 0x8b, 0x77, 0x08, 0x41, 0x8b, 0x06, 0xff,
        0xc0, 0x74, 0x03, 0x41, 0x89, 0x06, 0x48, 0x8d,
        0x5d, 0xf0, 0x48, 0x8b, 0x07, 0x85, 0xc0, 0x78,
        0x0e, 0x48, 0xff, 0xc8, 0x48, 0x89, 0x07, 0x75,
        0x06, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4c,
        0x89, 0x75, 0xe8, 0x48, 0x89, 0xdd, 0x58,
    };
    // 0: 
    // 0: &PyType_Type+0x0
    // 8: JUMP_TARGET
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyType_Type);
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x18, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x43, (uintptr_t)data + 0xc);
}

void
emit__CHECK_ATTR_CLASS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CHECK_ATTR_CLASS.o:   file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 4: 48 8b 48 08                   movq    0x8(%rax), %rcx
    // 8: f6 81 ab 00 00 00 80          testb   $-0x80, 0xab(%rcx)
    // f: 74 14                         je      0x25 <_JIT_ENTRY+0x25>
    // 11: 8b 80 80 01 00 00             movl    0x180(%rax), %eax
    // 17: 3b 05 00 00 00 00             cmpl    (%rip), %eax            # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  R_X86_64_GOTPCRELX   _JIT_OPERAND-0x4
    // 1d: 75 06                         jne     0x25 <_JIT_ENTRY+0x25>
    // 1f: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x25 <_JIT_ENTRY+0x25>
    // 0000000000000021:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 25: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x2b <_JIT_ENTRY+0x2b>
    // 0000000000000027:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 2b: 
    const unsigned char code_body[43] = {
        0x48, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x48, 0x08,
        0xf6, 0x81, 0xab, 0x00, 0x00, 0x00, 0x80, 0x74,
        0x14, 0x8b, 0x80, 0x80, 0x01, 0x00, 0x00, 0x3b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x75, 0x06, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPERAND
    // 8: CONTINUE
    // 10: JUMP_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x19, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x21, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x27, (uintptr_t)data + 0xc);
}

void
emit__CHECK_ATTR_METHOD_LAZY_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CHECK_ATTR_METHOD_LAZY_DICT.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 4: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  R_X86_64_GOTPCREL    _JIT_OPERAND-0x4
    // b: 48 83 7c 08 e8 00             cmpq    $0x0, -0x18(%rax,%rcx)
    // 11: 74 06                         je      0x19 <_JIT_ENTRY+0x19>
    // 13: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x19 <_JIT_ENTRY+0x19>
    // 0000000000000015:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 19: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1f <_JIT_ENTRY+0x1f>
    // 000000000000001b:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 19: 
    const unsigned char code_body[25] = {
        0x48, 0x8b, 0x45, 0xf8, 0x0f, 0xb7, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x83, 0x7c, 0x08, 0xe8,
        0x00, 0x74, 0x06, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: 
    // 0: OPERAND
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand);
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x15, (uintptr_t)data + 0x4);
}

void
emit__CHECK_ATTR_MODULE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CHECK_ATTR_MODULE.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 4: 48 8b 48 08                   movq    0x8(%rax), %rcx
    // 8: 48 3b 0d 00 00 00 00          cmpq    (%rip), %rcx            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  R_X86_64_REX_GOTPCRELX       PyModule_Type-0x4
    // f: 75 19                         jne     0x2a <_JIT_ENTRY+0x2a>
    // 11: 48 8b 40 10                   movq    0x10(%rax), %rax
    // 15: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 19: 8b 40 0c                      movl    0xc(%rax), %eax
    // 1c: 3b 05 00 00 00 00             cmpl    (%rip), %eax            # 0x22 <_JIT_ENTRY+0x22>
    // 000000000000001e:  R_X86_64_GOTPCRELX   _JIT_OPERAND-0x4
    // 22: 75 06                         jne     0x2a <_JIT_ENTRY+0x2a>
    // 24: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x2a <_JIT_ENTRY+0x2a>
    // 0000000000000026:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 2a: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x30 <_JIT_ENTRY+0x30>
    // 000000000000002c:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 30: 
    const unsigned char code_body[48] = {
        0x48, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x48, 0x08,
        0x48, 0x3b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x75,
        0x19, 0x48, 0x8b, 0x40, 0x10, 0x48, 0x8b, 0x40,
        0x20, 0x8b, 0x40, 0x0c, 0x3b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0x75, 0x06, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &PyModule_Type+0x0
    // 8: OPERAND
    // 10: CONTINUE
    // 18: JUMP_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyModule_Type);
    patch_64(data + 0x8, instruction->operand);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1e, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x26, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x2c, (uintptr_t)data + 0x14);
}

void
emit__CHECK_ATTR_WITH_HINT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CHECK_ATTR_WITH_HINT.o:       file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 4: 48 83 78 e8 00                cmpq    $0x0, -0x18(%rax)
    // 9: 74 06                         je      0x11 <_JIT_ENTRY+0x11>
    // b: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x11 <_JIT_ENTRY+0x11>
    // 000000000000000d:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 11: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x17 <_JIT_ENTRY+0x17>
    // 0000000000000013:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 17: 
    const unsigned char code_body[23] = {
        0x48, 0x8b, 0x45, 0xf8, 0x48, 0x83, 0x78, 0xe8,
        0x00, 0x74, 0x06, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: CONTINUE
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xd, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x13, (uintptr_t)data + 0x4);
}

void
emit__CHECK_CALL_BOUND_METHOD_EXACT_ARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CHECK_CALL_BOUND_METHOD_EXACT_ARGS.o: file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 7: 89 c1                         movl    %eax, %ecx
    // 9: f7 d1                         notl    %ecx
    // b: 48 63 c9                      movslq  %ecx, %rcx
    // e: 48 83 7c cd 00 00             cmpq    $0x0, (%rbp,%rcx,8)
    // 14: 75 1c                         jne     0x32 <_JIT_ENTRY+0x32>
    // 16: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
    // 1b: 29 c1                         subl    %eax, %ecx
    // 1d: 48 63 c1                      movslq  %ecx, %rax
    // 20: 48 8b 44 c5 00                movq    (%rbp,%rax,8), %rax
    // 25: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 29: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x30 <_JIT_ENTRY+0x30>
    // 000000000000002c:  R_X86_64_REX_GOTPCRELX       PyMethod_Type-0x4
    // 30: 74 06                         je      0x38 <_JIT_ENTRY+0x38>
    // 32: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x38 <_JIT_ENTRY+0x38>
    // 0000000000000034:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 38: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x3e <_JIT_ENTRY+0x3e>
    // 000000000000003a:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 38: 
    const unsigned char code_body[56] = {
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0x89,
        0xc1, 0xf7, 0xd1, 0x48, 0x63, 0xc9, 0x48, 0x83,
        0x7c, 0xcd, 0x00, 0x00, 0x75, 0x1c, 0xb9, 0xfe,
        0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63, 0xc1,
        0x48, 0x8b, 0x44, 0xc5, 0x00, 0x48, 0x8b, 0x40,
        0x08, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x74, 0x06, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: &PyMethod_Type+0x0
    // 10: JUMP_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x10, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2c, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x34, (uintptr_t)data + 0xc);
}

void
emit__CHECK_EG_MATCH(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CHECK_EG_MATCH.o:     file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 18                   subq    $0x18, %rsp
    // 4: 4c 8b 75 f0                   movq    -0x10(%rbp), %r14
    // 8: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // c: 4c 89 e7                      movq    %r12, %rdi
    // f: 48 89 de                      movq    %rbx, %rsi
    // 12: ff 15 00 00 00 00             callq   *(%rip)                 # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  R_X86_64_GOTPCRELX   _PyEval_CheckExceptStarTypeValid-0x4
    // 18: 85 c0                         testl   %eax, %eax
    // 1a: 0f 88 8f 00 00 00             js      0xaf <_JIT_ENTRY+0xaf>
    // 20: 48 c7 44 24 08 00 00 00 00    movq    $0x0, 0x8(%rsp)
    // 29: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
    // 32: 48 8d 54 24 08                leaq    0x8(%rsp), %rdx
    // 37: 48 8d 4c 24 10                leaq    0x10(%rsp), %rcx
    // 3c: 4c 89 f7                      movq    %r14, %rdi
    // 3f: 48 89 de                      movq    %rbx, %rsi
    // 42: ff 15 00 00 00 00             callq   *(%rip)                 # 0x48 <_JIT_ENTRY+0x48>
    // 0000000000000044:  R_X86_64_GOTPCRELX   _PyEval_ExceptionGroupMatch-0x4
    // 48: 41 89 c7                      movl    %eax, %r15d
    // 4b: 49 8b 06                      movq    (%r14), %rax
    // 4e: 85 c0                         testl   %eax, %eax
    // 50: 78 11                         js      0x63 <_JIT_ENTRY+0x63>
    // 52: 48 ff c8                      decq    %rax
    // 55: 49 89 06                      movq    %rax, (%r14)
    // 58: 75 09                         jne     0x63 <_JIT_ENTRY+0x63>
    // 5a: 4c 89 f7                      movq    %r14, %rdi
    // 5d: ff 15 00 00 00 00             callq   *(%rip)                 # 0x63 <_JIT_ENTRY+0x63>
    // 000000000000005f:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 63: 48 8b 03                      movq    (%rbx), %rax
    // 66: 85 c0                         testl   %eax, %eax
    // 68: 78 08                         js      0x72 <_JIT_ENTRY+0x72>
    // 6a: 48 ff c8                      decq    %rax
    // 6d: 48 89 03                      movq    %rax, (%rbx)
    // 70: 74 6e                         je      0xe0 <_JIT_ENTRY+0xe0>
    // 72: 45 85 ff                      testl   %r15d, %r15d
    // 75: 78 77                         js      0xee <_JIT_ENTRY+0xee>
    // 77: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
    // 7c: 48 85 ff                      testq   %rdi, %rdi
    // 7f: 74 6d                         je      0xee <_JIT_ENTRY+0xee>
    // 81: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x88 <_JIT_ENTRY+0x88>
    // 0000000000000084:  R_X86_64_REX_GOTPCRELX       _Py_NoneStruct-0x4
    // 88: 48 39 c7                      cmpq    %rax, %rdi
    // 8b: 74 0b                         je      0x98 <_JIT_ENTRY+0x98>
    // 8d: ff 15 00 00 00 00             callq   *(%rip)                 # 0x93 <_JIT_ENTRY+0x93>
    // 000000000000008f:  R_X86_64_GOTPCRELX   PyErr_SetHandledException-0x4
    // 93: 48 8b 44 24 08                movq    0x8(%rsp), %rax
    // 98: 48 8b 4c 24 10                movq    0x10(%rsp), %rcx
    // 9d: 48 89 4d f0                   movq    %rcx, -0x10(%rbp)
    // a1: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // a5: 48 83 c4 18                   addq    $0x18, %rsp
    // a9: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xaf <_JIT_ENTRY+0xaf>
    // 00000000000000ab:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // af: 49 8b 06                      movq    (%r14), %rax
    // b2: 85 c0                         testl   %eax, %eax
    // b4: 78 11                         js      0xc7 <_JIT_ENTRY+0xc7>
    // b6: 48 ff c8                      decq    %rax
    // b9: 49 89 06                      movq    %rax, (%r14)
    // bc: 75 09                         jne     0xc7 <_JIT_ENTRY+0xc7>
    // be: 4c 89 f7                      movq    %r14, %rdi
    // c1: ff 15 00 00 00 00             callq   *(%rip)                 # 0xc7 <_JIT_ENTRY+0xc7>
    // 00000000000000c3:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // c7: 48 8b 03                      movq    (%rbx), %rax
    // ca: 85 c0                         testl   %eax, %eax
    // cc: 78 08                         js      0xd6 <_JIT_ENTRY+0xd6>
    // ce: 48 ff c8                      decq    %rax
    // d1: 48 89 03                      movq    %rax, (%rbx)
    // d4: 74 22                         je      0xf8 <_JIT_ENTRY+0xf8>
    // d6: 48 83 c4 18                   addq    $0x18, %rsp
    // da: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xe0 <_JIT_ENTRY+0xe0>
    // 00000000000000dc:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // e0: 48 89 df                      movq    %rbx, %rdi
    // e3: ff 15 00 00 00 00             callq   *(%rip)                 # 0xe9 <_JIT_ENTRY+0xe9>
    // 00000000000000e5:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // e9: 45 85 ff                      testl   %r15d, %r15d
    // ec: 79 89                         jns     0x77 <_JIT_ENTRY+0x77>
    // ee: 48 83 c4 18                   addq    $0x18, %rsp
    // f2: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xf8 <_JIT_ENTRY+0xf8>
    // 00000000000000f4:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // f8: 48 89 df                      movq    %rbx, %rdi
    // fb: ff 15 00 00 00 00             callq   *(%rip)                 # 0x101 <_JIT_ENTRY+0x101>
    // 00000000000000fd:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 101: 48 83 c4 18                   addq    $0x18, %rsp
    // 105: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x10b <_JIT_ENTRY+0x10b>
    // 0000000000000107:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 10b: 
    const unsigned char code_body[267] = {
        0x48, 0x83, 0xec, 0x18, 0x4c, 0x8b, 0x75, 0xf0,
        0x48, 0x8b, 0x5d, 0xf8, 0x4c, 0x89, 0xe7, 0x48,
        0x89, 0xde, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x85, 0xc0, 0x0f, 0x88, 0x8f, 0x00, 0x00, 0x00,
        0x48, 0xc7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00,
        0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x08, 0x48,
        0x8d, 0x4c, 0x24, 0x10, 0x4c, 0x89, 0xf7, 0x48,
        0x89, 0xde, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x41, 0x89, 0xc7, 0x49, 0x8b, 0x06, 0x85, 0xc0,
        0x78, 0x11, 0x48, 0xff, 0xc8, 0x49, 0x89, 0x06,
        0x75, 0x09, 0x4c, 0x89, 0xf7, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x03, 0x85, 0xc0,
        0x78, 0x08, 0x48, 0xff, 0xc8, 0x48, 0x89, 0x03,
        0x74, 0x6e, 0x45, 0x85, 0xff, 0x78, 0x77, 0x48,
        0x8b, 0x7c, 0x24, 0x08, 0x48, 0x85, 0xff, 0x74,
        0x6d, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x39, 0xc7, 0x74, 0x0b, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08,
        0x48, 0x8b, 0x4c, 0x24, 0x10, 0x48, 0x89, 0x4d,
        0xf0, 0x48, 0x89, 0x45, 0xf8, 0x48, 0x83, 0xc4,
        0x18, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xff,
        0xc8, 0x49, 0x89, 0x06, 0x75, 0x09, 0x4c, 0x89,
        0xf7, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x03, 0x85, 0xc0, 0x78, 0x08, 0x48, 0xff,
        0xc8, 0x48, 0x89, 0x03, 0x74, 0x22, 0x48, 0x83,
        0xc4, 0x18, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xdf, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x45, 0x85, 0xff, 0x79, 0x89, 0x48, 0x83,
        0xc4, 0x18, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xdf, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x83, 0xc4, 0x18, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &_PyEval_CheckExceptStarTypeValid+0x0
    // 8: &_PyEval_ExceptionGroupMatch+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: &_Py_NoneStruct+0x0
    // 20: &PyErr_SetHandledException+0x0
    // 28: CONTINUE
    // 30: ERROR_TARGET
    const unsigned char data_body[56] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyEval_CheckExceptStarTypeValid);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_ExceptionGroupMatch);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x20, (uintptr_t)&PyErr_SetHandledException);
    patch_64(data + 0x28, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x30, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x44, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x5f, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x84, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x8f, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xab, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0xc3, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xdc, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0xe5, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xf4, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0xfd, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x107, (uintptr_t)data + 0x2c);
}

void
emit__CHECK_EXC_MATCH(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CHECK_EXC_MATCH.o:    file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 4c 8b 75 f0                   movq    -0x10(%rbp), %r14
    // 5: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 9: 4c 89 e7                      movq    %r12, %rdi
    // c: 48 89 de                      movq    %rbx, %rsi
    // f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x15 <_JIT_ENTRY+0x15>
    // 0000000000000011:  R_X86_64_GOTPCRELX   _PyEval_CheckExceptTypeValid-0x4
    // 15: 85 c0                         testl   %eax, %eax
    // 17: 78 31                         js      0x4a <_JIT_ENTRY+0x4a>
    // 19: 4c 89 f7                      movq    %r14, %rdi
    // 1c: 48 89 de                      movq    %rbx, %rsi
    // 1f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x25 <_JIT_ENTRY+0x25>
    // 0000000000000021:  R_X86_64_GOTPCRELX   PyErr_GivenExceptionMatches-0x4
    // 25: 48 8b 0b                      movq    (%rbx), %rcx
    // 28: 85 c9                         testl   %ecx, %ecx
    // 2a: 78 08                         js      0x34 <_JIT_ENTRY+0x34>
    // 2c: 48 ff c9                      decq    %rcx
    // 2f: 48 89 0b                      movq    %rcx, (%rbx)
    // 32: 74 2c                         je      0x60 <_JIT_ENTRY+0x60>
    // 34: 85 c0                         testl   %eax, %eax
    // 36: 75 39                         jne     0x71 <_JIT_ENTRY+0x71>
    // 38: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x3f <_JIT_ENTRY+0x3f>
    // 000000000000003b:  R_X86_64_REX_GOTPCRELX       _Py_FalseStruct-0x4
    // 3f: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // 43: 58                            popq    %rax
    // 44: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x4a <_JIT_ENTRY+0x4a>
    // 0000000000000046:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 4a: 48 8b 03                      movq    (%rbx), %rax
    // 4d: 85 c0                         testl   %eax, %eax
    // 4f: 78 08                         js      0x59 <_JIT_ENTRY+0x59>
    // 51: 48 ff c8                      decq    %rax
    // 54: 48 89 03                      movq    %rax, (%rbx)
    // 57: 74 2a                         je      0x83 <_JIT_ENTRY+0x83>
    // 59: 58                            popq    %rax
    // 5a: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x60 <_JIT_ENTRY+0x60>
    // 000000000000005c:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 60: 48 89 df                      movq    %rbx, %rdi
    // 63: 89 c3                         movl    %eax, %ebx
    // 65: ff 15 00 00 00 00             callq   *(%rip)                 # 0x6b <_JIT_ENTRY+0x6b>
    // 0000000000000067:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 6b: 89 d8                         movl    %ebx, %eax
    // 6d: 85 c0                         testl   %eax, %eax
    // 6f: 74 c7                         je      0x38 <_JIT_ENTRY+0x38>
    // 71: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x78 <_JIT_ENTRY+0x78>
    // 0000000000000074:  R_X86_64_REX_GOTPCRELX       _Py_TrueStruct-0x4
    // 78: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // 7c: 58                            popq    %rax
    // 7d: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x83 <_JIT_ENTRY+0x83>
    // 000000000000007f:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 83: 48 89 df                      movq    %rbx, %rdi
    // 86: ff 15 00 00 00 00             callq   *(%rip)                 # 0x8c <_JIT_ENTRY+0x8c>
    // 0000000000000088:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 8c: 58                            popq    %rax
    // 8d: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x93 <_JIT_ENTRY+0x93>
    // 000000000000008f:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 93: 
    const unsigned char code_body[147] = {
        0x50, 0x4c, 0x8b, 0x75, 0xf0, 0x48, 0x8b, 0x5d,
        0xf8, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xde, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78,
        0x31, 0x4c, 0x89, 0xf7, 0x48, 0x89, 0xde, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x0b,
        0x85, 0xc9, 0x78, 0x08, 0x48, 0xff, 0xc9, 0x48,
        0x89, 0x0b, 0x74, 0x2c, 0x85, 0xc0, 0x75, 0x39,
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0x45, 0xf8, 0x58, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78,
        0x08, 0x48, 0xff, 0xc8, 0x48, 0x89, 0x03, 0x74,
        0x2a, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xdf, 0x89, 0xc3, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x89, 0xd8, 0x85, 0xc0, 0x74,
        0xc7, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0x45, 0xf8, 0x58, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x58, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &_PyEval_CheckExceptTypeValid+0x0
    // 8: &PyErr_GivenExceptionMatches+0x0
    // 10: &_Py_FalseStruct+0x0
    // 18: CONTINUE
    // 20: ERROR_TARGET
    // 28: &_Py_Dealloc+0x0
    // 30: &_Py_TrueStruct+0x0
    const unsigned char data_body[56] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyEval_CheckExceptTypeValid);
    patch_64(data + 0x8, (uintptr_t)&PyErr_GivenExceptionMatches);
    patch_64(data + 0x10, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, instruction_starts[instruction->error_target]);
    patch_64(data + 0x28, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x30, (uintptr_t)&_Py_TrueStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x11, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x21, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3b, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x46, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x5c, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x67, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x74, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0x7f, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x88, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x8f, (uintptr_t)data + 0x1c);
}

void
emit__CHECK_FUNCTION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CHECK_FUNCTION.o:     file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 10                   movq    0x10(%r13), %rax
    // 4: 8b 80 88 00 00 00             movl    0x88(%rax), %eax
    // a: 3b 05 00 00 00 00             cmpl    (%rip), %eax            # 0x10 <_JIT_ENTRY+0x10>
    // 000000000000000c:  R_X86_64_GOTPCRELX   _JIT_OPERAND-0x4
    // 10: 75 06                         jne     0x18 <_JIT_ENTRY+0x18>
    // 12: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 18: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1e <_JIT_ENTRY+0x1e>
    // 000000000000001a:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 1e: 
    const unsigned char code_body[30] = {
        0x49, 0x8b, 0x45, 0x10, 0x8b, 0x80, 0x88, 0x00,
        0x00, 0x00, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x75, 0x06, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPERAND
    // 8: CONTINUE
    // 10: JUMP_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xc, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x1a, (uintptr_t)data + 0xc);
}

void
emit__CHECK_FUNCTION_EXACT_ARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CHECK_FUNCTION_EXACT_ARGS.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 7: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
    // c: 29 c1                         subl    %eax, %ecx
    // e: 48 63 c9                      movslq  %ecx, %rcx
    // 11: 48 8b 4c cd 00                movq    (%rbp,%rcx,8), %rcx
    // 16: 48 8b 51 08                   movq    0x8(%rcx), %rdx
    // 1a: 48 3b 15 00 00 00 00          cmpq    (%rip), %rdx            # 0x21 <_JIT_ENTRY+0x21>
    // 000000000000001d:  R_X86_64_REX_GOTPCRELX       PyFunction_Type-0x4
    // 21: 75 2d                         jne     0x50 <_JIT_ENTRY+0x50>
    // 23: 8b 91 88 00 00 00             movl    0x88(%rcx), %edx
    // 29: 3b 15 00 00 00 00             cmpl    (%rip), %edx            # 0x2f <_JIT_ENTRY+0x2f>
    // 000000000000002b:  R_X86_64_GOTPCRELX   _JIT_OPERAND-0x4
    // 2f: 75 1f                         jne     0x50 <_JIT_ENTRY+0x50>
    // 31: 89 c2                         movl    %eax, %edx
    // 33: f7 d2                         notl    %edx
    // 35: 48 63 d2                      movslq  %edx, %rdx
    // 38: 48 8b 49 30                   movq    0x30(%rcx), %rcx
    // 3c: 48 83 7c d5 00 01             cmpq    $0x1, (%rbp,%rdx,8)
    // 42: 83 d8 ff                      sbbl    $-0x1, %eax
    // 45: 39 41 34                      cmpl    %eax, 0x34(%rcx)
    // 48: 75 06                         jne     0x50 <_JIT_ENTRY+0x50>
    // 4a: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x50 <_JIT_ENTRY+0x50>
    // 000000000000004c:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 50: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x56 <_JIT_ENTRY+0x56>
    // 0000000000000052:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 56: 
    const unsigned char code_body[86] = {
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0xb9,
        0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63,
        0xc9, 0x48, 0x8b, 0x4c, 0xcd, 0x00, 0x48, 0x8b,
        0x51, 0x08, 0x48, 0x3b, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x75, 0x2d, 0x8b, 0x91, 0x88, 0x00, 0x00,
        0x00, 0x3b, 0x15, 0x00, 0x00, 0x00, 0x00, 0x75,
        0x1f, 0x89, 0xc2, 0xf7, 0xd2, 0x48, 0x63, 0xd2,
        0x48, 0x8b, 0x49, 0x30, 0x48, 0x83, 0x7c, 0xd5,
        0x00, 0x01, 0x83, 0xd8, 0xff, 0x39, 0x41, 0x34,
        0x75, 0x06, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: &PyFunction_Type+0x0
    // 10: OPERAND
    // 18: CONTINUE
    // 20: JUMP_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x10, instruction->operand);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x2b, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x4c, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x52, (uintptr_t)data + 0x1c);
}

void
emit__CHECK_FUNCTION_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CHECK_FUNCTION_VERSION.o:     file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 7: 48 c7 c1 fe ff ff ff          movq    $-0x2, %rcx
    // e: 48 29 c1                      subq    %rax, %rcx
    // 11: 48 8b 44 cd 00                movq    (%rbp,%rcx,8), %rax
    // 16: 48 8b 48 08                   movq    0x8(%rax), %rcx
    // 1a: 48 3b 0d 00 00 00 00          cmpq    (%rip), %rcx            # 0x21 <_JIT_ENTRY+0x21>
    // 000000000000001d:  R_X86_64_REX_GOTPCRELX       PyFunction_Type-0x4
    // 21: 75 14                         jne     0x37 <_JIT_ENTRY+0x37>
    // 23: 8b 80 88 00 00 00             movl    0x88(%rax), %eax
    // 29: 3b 05 00 00 00 00             cmpl    (%rip), %eax            # 0x2f <_JIT_ENTRY+0x2f>
    // 000000000000002b:  R_X86_64_GOTPCRELX   _JIT_OPERAND-0x4
    // 2f: 75 06                         jne     0x37 <_JIT_ENTRY+0x37>
    // 31: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x37 <_JIT_ENTRY+0x37>
    // 0000000000000033:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 37: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x3d <_JIT_ENTRY+0x3d>
    // 0000000000000039:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 3d: 
    const unsigned char code_body[61] = {
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48,
        0xc7, 0xc1, 0xfe, 0xff, 0xff, 0xff, 0x48, 0x29,
        0xc1, 0x48, 0x8b, 0x44, 0xcd, 0x00, 0x48, 0x8b,
        0x48, 0x08, 0x48, 0x3b, 0x0d, 0x00, 0x00, 0x00,
        0x00, 0x75, 0x14, 0x8b, 0x80, 0x88, 0x00, 0x00,
        0x00, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x75,
        0x06, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: &PyFunction_Type+0x0
    // 10: OPERAND
    // 18: CONTINUE
    // 20: JUMP_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x10, instruction->operand);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x2b, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x33, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x39, (uintptr_t)data + 0x1c);
}

void
emit__CHECK_IS_NOT_PY_CALLABLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CHECK_IS_NOT_PY_CALLABLE.o:   file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 7: 48 c7 c1 fe ff ff ff          movq    $-0x2, %rcx
    // e: 48 29 c1                      subq    %rax, %rcx
    // 11: 48 8b 44 cd 00                movq    (%rbp,%rcx,8), %rax
    // 16: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 1a: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x21 <_JIT_ENTRY+0x21>
    // 000000000000001d:  R_X86_64_REX_GOTPCRELX       PyFunction_Type-0x4
    // 21: 74 0f                         je      0x32 <_JIT_ENTRY+0x32>
    // 23: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x2a <_JIT_ENTRY+0x2a>
    // 0000000000000026:  R_X86_64_REX_GOTPCRELX       PyMethod_Type-0x4
    // 2a: 74 06                         je      0x32 <_JIT_ENTRY+0x32>
    // 2c: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x32 <_JIT_ENTRY+0x32>
    // 000000000000002e:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 32: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x38 <_JIT_ENTRY+0x38>
    // 0000000000000034:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 38: 
    const unsigned char code_body[56] = {
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48,
        0xc7, 0xc1, 0xfe, 0xff, 0xff, 0xff, 0x48, 0x29,
        0xc1, 0x48, 0x8b, 0x44, 0xcd, 0x00, 0x48, 0x8b,
        0x40, 0x08, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x74, 0x0f, 0x48, 0x3b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0x74, 0x06, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: &PyFunction_Type+0x0
    // 10: &PyMethod_Type+0x0
    // 18: CONTINUE
    // 20: JUMP_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x10, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x26, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x34, (uintptr_t)data + 0x1c);
}

void
emit__CHECK_MANAGED_OBJECT_HAS_VALUES(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CHECK_MANAGED_OBJECT_HAS_VALUES.o:    file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 4: 80 78 13 00                   cmpb    $0x0, 0x13(%rax)
    // 8: 74 06                         je      0x10 <_JIT_ENTRY+0x10>
    // a: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x10 <_JIT_ENTRY+0x10>
    // 000000000000000c:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 10: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x16 <_JIT_ENTRY+0x16>
    // 0000000000000012:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 16: 
    const unsigned char code_body[22] = {
        0x48, 0x8b, 0x45, 0xf8, 0x80, 0x78, 0x13, 0x00,
        0x74, 0x06, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: CONTINUE
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xc, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x12, (uintptr_t)data + 0x4);
}

void
emit__CHECK_METHOD_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CHECK_METHOD_VERSION.o:       file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 7: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
    // c: 29 c1                         subl    %eax, %ecx
    // e: 48 63 c9                      movslq  %ecx, %rcx
    // 11: 48 8b 4c cd 00                movq    (%rbp,%rcx,8), %rcx
    // 16: 48 8b 51 08                   movq    0x8(%rcx), %rdx
    // 1a: 48 3b 15 00 00 00 00          cmpq    (%rip), %rdx            # 0x21 <_JIT_ENTRY+0x21>
    // 000000000000001d:  R_X86_64_REX_GOTPCRELX       PyMethod_Type-0x4
    // 21: 75 2b                         jne     0x4e <_JIT_ENTRY+0x4e>
    // 23: 48 8b 49 10                   movq    0x10(%rcx), %rcx
    // 27: 48 8b 51 08                   movq    0x8(%rcx), %rdx
    // 2b: 48 3b 15 00 00 00 00          cmpq    (%rip), %rdx            # 0x32 <_JIT_ENTRY+0x32>
    // 000000000000002e:  R_X86_64_REX_GOTPCRELX       PyFunction_Type-0x4
    // 32: 75 1a                         jne     0x4e <_JIT_ENTRY+0x4e>
    // 34: 8b 89 88 00 00 00             movl    0x88(%rcx), %ecx
    // 3a: 3b 0d 00 00 00 00             cmpl    (%rip), %ecx            # 0x40 <_JIT_ENTRY+0x40>
    // 000000000000003c:  R_X86_64_GOTPCRELX   _JIT_OPERAND-0x4
    // 40: 75 0c                         jne     0x4e <_JIT_ENTRY+0x4e>
    // 42: f7 d0                         notl    %eax
    // 44: 48 98                         cltq
    // 46: 48 83 7c c5 00 00             cmpq    $0x0, (%rbp,%rax,8)
    // 4c: 74 06                         je      0x54 <_JIT_ENTRY+0x54>
    // 4e: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x54 <_JIT_ENTRY+0x54>
    // 0000000000000050:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 54: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x5a <_JIT_ENTRY+0x5a>
    // 0000000000000056:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 54: 
    const unsigned char code_body[84] = {
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0xb9,
        0xfe, 0xff, 0xff, 0xff, 0x29, 0xc1, 0x48, 0x63,
        0xc9, 0x48, 0x8b, 0x4c, 0xcd, 0x00, 0x48, 0x8b,
        0x51, 0x08, 0x48, 0x3b, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x75, 0x2b, 0x48, 0x8b, 0x49, 0x10, 0x48,
        0x8b, 0x51, 0x08, 0x48, 0x3b, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x75, 0x1a, 0x8b, 0x89, 0x88, 0x00,
        0x00, 0x00, 0x3b, 0x0d, 0x00, 0x00, 0x00, 0x00,
        0x75, 0x0c, 0xf7, 0xd0, 0x48, 0x98, 0x48, 0x83,
        0x7c, 0xc5, 0x00, 0x00, 0x74, 0x06, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: &PyMethod_Type+0x0
    // 10: &PyFunction_Type+0x0
    // 18: OPERAND
    // 20: JUMP_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMethod_Type);
    patch_64(data + 0x10, (uintptr_t)&PyFunction_Type);
    patch_64(data + 0x18, instruction->operand);
    patch_64(data + 0x20, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x3c, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x50, (uintptr_t)data + 0x1c);
}

void
emit__CHECK_PEP_523(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CHECK_PEP_523.o:      file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 44 24 10                movq    0x10(%r12), %rax
    // 5: 48 83 b8 18 21 00 00 00       cmpq    $0x0, 0x2118(%rax)
    // d: 74 06                         je      0x15 <_JIT_ENTRY+0x15>
    // f: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x15 <_JIT_ENTRY+0x15>
    // 0000000000000011:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 15: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1b <_JIT_ENTRY+0x1b>
    // 0000000000000017:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 15: 
    const unsigned char code_body[21] = {
        0x49, 0x8b, 0x44, 0x24, 0x10, 0x48, 0x83, 0xb8,
        0x18, 0x21, 0x00, 0x00, 0x00, 0x74, 0x06, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: JUMP_TARGET
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x11, (uintptr_t)data + -0x4);
}

void
emit__CHECK_PERIODIC(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CHECK_PERIODIC.o:     file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 49 8b 44 24 18                movq    0x18(%r12), %rax
    // 6: 84 c0                         testb   %al, %al
    // 8: 74 2f                         je      0x39 <_JIT_ENTRY+0x39>
    // a: 4c 89 e7                      movq    %r12, %rdi
    // d: ff 15 00 00 00 00             callq   *(%rip)                 # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  R_X86_64_GOTPCRELX   _Py_HandlePending-0x4
    // 13: 85 c0                         testl   %eax, %eax
    // 15: 74 22                         je      0x39 <_JIT_ENTRY+0x39>
    // 17: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x1e <_JIT_ENTRY+0x1e>
    // 000000000000001a:  R_X86_64_REX_GOTPCRELX       _JIT_EXECUTOR-0x4
    // 1e: 49 89 84 24 10 01 00 00       movq    %rax, 0x110(%r12)
    // 26: 4c 29 ed                      subq    %r13, %rbp
    // 29: 48 83 c5 b8                   addq    $-0x48, %rbp
    // 2d: 48 c1 ed 03                   shrq    $0x3, %rbp
    // 31: 41 89 6d 40                   movl    %ebp, 0x40(%r13)
    // 35: 31 c0                         xorl    %eax, %eax
    // 37: 59                            popq    %rcx
    // 38: c3                            retq
    // 39: 58                            popq    %rax
    // 3a: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x40 <_JIT_ENTRY+0x40>
    // 000000000000003c:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 3a: 
    const unsigned char code_body[58] = {
        0x50, 0x49, 0x8b, 0x44, 0x24, 0x18, 0x84, 0xc0,
        0x74, 0x2f, 0x4c, 0x89, 0xe7, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x22, 0x48,
        0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89,
        0x84, 0x24, 0x10, 0x01, 0x00, 0x00, 0x4c, 0x29,
        0xed, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed,
        0x03, 0x41, 0x89, 0x6d, 0x40, 0x31, 0xc0, 0x59,
        0xc3, 0x58,
    };
    // 0: 
    // 0: &_Py_HandlePending+0x0
    // 8: EXECUTOR
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_HandlePending);
    patch_64(data + 0x8, (uintptr_t)executor);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1a, (uintptr_t)data + 0x4);
}

void
emit__CHECK_STACK_SPACE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CHECK_STACK_SPACE.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 84 24 f0 00 00 00       movq    0xf0(%r12), %rax
    // 8: 48 85 c0                      testq   %rax, %rax
    // b: 74 3a                         je      0x47 <_JIT_ENTRY+0x47>
    // d: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x14 <_JIT_ENTRY+0x14>
    // 0000000000000010:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 14: 48 c7 c2 fe ff ff ff          movq    $-0x2, %rdx
    // 1b: 48 29 ca                      subq    %rcx, %rdx
    // 1e: 48 8b 4c d5 00                movq    (%rbp,%rdx,8), %rcx
    // 23: 48 8b 49 30                   movq    0x30(%rcx), %rcx
    // 27: 48 63 49 4c                   movslq  0x4c(%rcx), %rcx
    // 2b: 49 8b 94 24 f8 00 00 00       movq    0xf8(%r12), %rdx
    // 33: 48 29 c2                      subq    %rax, %rdx
    // 36: 48 c1 fa 03                   sarq    $0x3, %rdx
    // 3a: 48 39 ca                      cmpq    %rcx, %rdx
    // 3d: 7e 08                         jle     0x47 <_JIT_ENTRY+0x47>
    // 3f: 41 83 7c 24 2c 01             cmpl    $0x1, 0x2c(%r12)
    // 45: 7f 06                         jg      0x4d <_JIT_ENTRY+0x4d>
    // 47: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x4d <_JIT_ENTRY+0x4d>
    // 0000000000000049:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 4d: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x53 <_JIT_ENTRY+0x53>
    // 000000000000004f:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 4d: 
    const unsigned char code_body[77] = {
        0x49, 0x8b, 0x84, 0x24, 0xf0, 0x00, 0x00, 0x00,
        0x48, 0x85, 0xc0, 0x74, 0x3a, 0x0f, 0xb7, 0x0d,
        0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0xc2, 0xfe,
        0xff, 0xff, 0xff, 0x48, 0x29, 0xca, 0x48, 0x8b,
        0x4c, 0xd5, 0x00, 0x48, 0x8b, 0x49, 0x30, 0x48,
        0x63, 0x49, 0x4c, 0x49, 0x8b, 0x94, 0x24, 0xf8,
        0x00, 0x00, 0x00, 0x48, 0x29, 0xc2, 0x48, 0xc1,
        0xfa, 0x03, 0x48, 0x39, 0xca, 0x7e, 0x08, 0x41,
        0x83, 0x7c, 0x24, 0x2c, 0x01, 0x7f, 0x06, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x10, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x49, (uintptr_t)data + 0x4);
}

void
emit__CHECK_STACK_SPACE_OPERAND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CHECK_STACK_SPACE_OPERAND.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 84 24 f0 00 00 00       movq    0xf0(%r12), %rax
    // 8: 48 85 c0                      testq   %rax, %rax
    // b: 74 23                         je      0x30 <_JIT_ENTRY+0x30>
    // d: 48 63 0d 00 00 00 00          movslq  (%rip), %rcx            # 0x14 <_JIT_ENTRY+0x14>
    // 0000000000000010:  R_X86_64_GOTPCREL    _JIT_OPERAND-0x4
    // 14: 49 8b 94 24 f8 00 00 00       movq    0xf8(%r12), %rdx
    // 1c: 48 29 c2                      subq    %rax, %rdx
    // 1f: 48 c1 fa 03                   sarq    $0x3, %rdx
    // 23: 48 39 ca                      cmpq    %rcx, %rdx
    // 26: 7e 08                         jle     0x30 <_JIT_ENTRY+0x30>
    // 28: 41 83 7c 24 2c 01             cmpl    $0x1, 0x2c(%r12)
    // 2e: 7f 06                         jg      0x36 <_JIT_ENTRY+0x36>
    // 30: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x36 <_JIT_ENTRY+0x36>
    // 0000000000000032:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 36: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x3c <_JIT_ENTRY+0x3c>
    // 0000000000000038:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 36: 
    const unsigned char code_body[54] = {
        0x49, 0x8b, 0x84, 0x24, 0xf0, 0x00, 0x00, 0x00,
        0x48, 0x85, 0xc0, 0x74, 0x23, 0x48, 0x63, 0x0d,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x94, 0x24,
        0xf8, 0x00, 0x00, 0x00, 0x48, 0x29, 0xc2, 0x48,
        0xc1, 0xfa, 0x03, 0x48, 0x39, 0xca, 0x7e, 0x08,
        0x41, 0x83, 0x7c, 0x24, 0x2c, 0x01, 0x7f, 0x06,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPERAND
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand);
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x10, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x32, (uintptr_t)data + 0x4);
}

void
emit__CHECK_VALIDITY(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CHECK_VALIDITY.o:     file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  R_X86_64_REX_GOTPCRELX       _JIT_EXECUTOR-0x4
    // 7: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
    // b: 74 06                         je      0x13 <_JIT_ENTRY+0x13>
    // d: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 13: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x19 <_JIT_ENTRY+0x19>
    // 0000000000000015:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 19: 
    const unsigned char code_body[25] = {
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x80,
        0x78, 0x22, 0x00, 0x74, 0x06, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: 
    // 0: EXECUTOR
    // 8: CONTINUE
    // 10: JUMP_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)executor);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x15, (uintptr_t)data + 0xc);
}

void
emit__CHECK_VALIDITY_AND_SET_IP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CHECK_VALIDITY_AND_SET_IP.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  R_X86_64_REX_GOTPCRELX       _JIT_EXECUTOR-0x4
    // 7: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
    // b: 74 11                         je      0x1e <_JIT_ENTRY+0x1e>
    // d: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x14 <_JIT_ENTRY+0x14>
    // 0000000000000010:  R_X86_64_REX_GOTPCRELX       _JIT_OPERAND-0x4
    // 14: 49 89 45 38                   movq    %rax, 0x38(%r13)
    // 18: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1e <_JIT_ENTRY+0x1e>
    // 000000000000001a:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 1e: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x24 <_JIT_ENTRY+0x24>
    // 0000000000000020:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 24: 
    const unsigned char code_body[36] = {
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x80,
        0x78, 0x22, 0x00, 0x74, 0x11, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x89, 0x45, 0x38,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: EXECUTOR
    // 8: OPERAND
    // 10: CONTINUE
    // 18: JUMP_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)executor);
    patch_64(data + 0x8, instruction->operand);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x10, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x1a, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x20, (uintptr_t)data + 0x14);
}

void
emit__COLD_EXIT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_COLD_EXIT.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 18                   subq    $0x18, %rsp
    // 4: 49 8b 9c 24 10 01 00 00       movq    0x110(%r12), %rbx
    // c: 48 8b 35 00 00 00 00          movq    (%rip), %rsi            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  R_X86_64_REX_GOTPCRELX       _JIT_OPARG-0x4
    // 13: 0f b7 d6                      movzwl  %si, %edx
    // 16: c1 e2 04                      shll    $0x4, %edx
    // 19: 49 8b 4d 00                   movq    (%r13), %rcx
    // 1d: 8b 84 13 80 00 00 00          movl    0x80(%rbx,%rdx), %eax
    // 24: 48 8d 04 41                   leaq    (%rcx,%rax,2), %rax
    // 28: 48 05 c8 00 00 00             addq    $0xc8, %rax
    // 2e: 4c 8d 3c 13                   leaq    (%rbx,%rdx), %r15
    // 32: 49 81 c7 84 00 00 00          addq    $0x84, %r15
    // 39: 44 0f b7 b4 13 84 00 00 00    movzwl  0x84(%rbx,%rdx), %r14d
    // 42: 41 83 fe 10                   cmpl    $0x10, %r14d
    // 46: 73 28                         jae     0x70 <_JIT_ENTRY+0x70>
    // 48: 80 38 46                      cmpb    $0x46, (%rax)
    // 4b: 75 4a                         jne     0x97 <_JIT_ENTRY+0x97>
    // 4d: 48 8b 89 98 00 00 00          movq    0x98(%rcx), %rcx
    // 54: 0f b6 40 01                   movzbl  0x1(%rax), %eax
    // 58: 48 8b 44 c1 08                movq    0x8(%rcx,%rax,8), %rax
    // 5d: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
    // 62: 8b 08                         movl    (%rax), %ecx
    // 64: ff c1                         incl    %ecx
    // 66: 74 65                         je      0xcd <_JIT_ENTRY+0xcd>
    // 68: 89 08                         movl    %ecx, (%rax)
    // 6a: ff c1                         incl    %ecx
    // 6c: 75 58                         jne     0xc6 <_JIT_ENTRY+0xc6>
    // 6e: eb 5d                         jmp     0xcd <_JIT_ENTRY+0xcd>
    // 70: 41 8d 4e f0                   leal    -0x10(%r14), %ecx
    // 74: 41 81 fe ff ff 00 00          cmpl    $0xffff, %r14d          # imm = 0xFFFF
    // 7b: 41 0f 44 ce                   cmovel  %r14d, %ecx
    // 7f: 66 41 89 0f                   movw    %cx, (%r15)
    // 83: 4c 29 ed                      subq    %r13, %rbp
    // 86: 48 83 c5 b8                   addq    $-0x48, %rbp
    // 8a: 48 c1 ed 03                   shrq    $0x3, %rbp
    // 8e: 41 89 6d 40                   movl    %ebp, 0x40(%r13)
    // 92: 48 83 c4 18                   addq    $0x18, %rsp
    // 96: c3                            retq
    // 97: 48 8d 4c 24 08                leaq    0x8(%rsp), %rcx
    // 9c: 4c 89 ef                      movq    %r13, %rdi
    // 9f: 48 89 44 24 10                movq    %rax, 0x10(%rsp)
    // a4: 48 89 c6                      movq    %rax, %rsi
    // a7: 48 89 ea                      movq    %rbp, %rdx
    // aa: ff 15 00 00 00 00             callq   *(%rip)                 # 0xb0 <_JIT_ENTRY+0xb0>
    // 00000000000000ac:  R_X86_64_GOTPCRELX   _PyOptimizer_Optimize-0x4
    // b0: 85 c0                         testl   %eax, %eax
    // b2: 7e 31                         jle     0xe5 <_JIT_ENTRY+0xe5>
    // b4: 48 8b 44 24 08                movq    0x8(%rsp), %rax
    // b9: 8b 08                         movl    (%rax), %ecx
    // bb: 48 8b 35 00 00 00 00          movq    (%rip), %rsi            # 0xc2 <_JIT_ENTRY+0xc2>
    // 00000000000000be:  R_X86_64_REX_GOTPCRELX       _JIT_OPARG-0x4
    // c2: ff c1                         incl    %ecx
    // c4: 74 07                         je      0xcd <_JIT_ENTRY+0xcd>
    // c6: 89 08                         movl    %ecx, (%rax)
    // c8: 48 8b 44 24 08                movq    0x8(%rsp), %rax
    // cd: 0f b7 ce                      movzwl  %si, %ecx
    // d0: c1 e1 04                      shll    $0x4, %ecx
    // d3: 48 89 84 0b 88 00 00 00       movq    %rax, 0x88(%rbx,%rcx)
    // db: 48 8b 40 78                   movq    0x78(%rax), %rax
    // df: 48 83 c4 18                   addq    $0x18, %rsp
    // e3: ff e0                         jmpq    *%rax
    // e5: 66 b9 fc ff                   movw    $0xfffc, %cx            # imm = 0xFFFC
    // e9: 66 41 83 fe 0b                cmpw    $0xb, %r14w
    // ee: 77 16                         ja      0x106 <_JIT_ENTRY+0x106>
    // f0: 41 8d 4e 01                   leal    0x1(%r14), %ecx
    // f4: ba ff ff ff ff                movl    $0xffffffff, %edx       # imm = 0xFFFFFFFF
    // f9: d3 e2                         shll    %cl, %edx
    // fb: f7 d2                         notl    %edx
    // fd: c1 e2 04                      shll    $0x4, %edx
    // 100: 42 8d 0c 32                   leal    (%rdx,%r14), %ecx
    // 104: ff c1                         incl    %ecx
    // 106: 66 41 89 0f                   movw    %cx, (%r15)
    // 10a: 85 c0                         testl   %eax, %eax
    // 10c: 48 8b 44 24 10                movq    0x10(%rsp), %rax
    // 111: 0f 89 6c ff ff ff             jns     0x83 <_JIT_ENTRY+0x83>
    // 117: 48 8b 03                      movq    (%rbx), %rax
    // 11a: 85 c0                         testl   %eax, %eax
    // 11c: 78 11                         js      0x12f <_JIT_ENTRY+0x12f>
    // 11e: 48 ff c8                      decq    %rax
    // 121: 48 89 03                      movq    %rax, (%rbx)
    // 124: 75 09                         jne     0x12f <_JIT_ENTRY+0x12f>
    // 126: 48 89 df                      movq    %rbx, %rdi
    // 129: ff 15 00 00 00 00             callq   *(%rip)                 # 0x12f <_JIT_ENTRY+0x12f>
    // 000000000000012b:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 12f: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x136 <_JIT_ENTRY+0x136>
    // 0000000000000132:  R_X86_64_REX_GOTPCRELX       _JIT_EXECUTOR-0x4
    // 136: 49 89 84 24 10 01 00 00       movq    %rax, 0x110(%r12)
    // 13e: 4c 29 ed                      subq    %r13, %rbp
    // 141: 48 83 c5 b8                   addq    $-0x48, %rbp
    // 145: 48 c1 ed 03                   shrq    $0x3, %rbp
    // 149: 41 89 6d 40                   movl    %ebp, 0x40(%r13)
    // 14d: 31 c0                         xorl    %eax, %eax
    // 14f: 48 83 c4 18                   addq    $0x18, %rsp
    // 153: c3                            retq
    // 154: 
    const unsigned char code_body[340] = {
        0x48, 0x83, 0xec, 0x18, 0x49, 0x8b, 0x9c, 0x24,
        0x10, 0x01, 0x00, 0x00, 0x48, 0x8b, 0x35, 0x00,
        0x00, 0x00, 0x00, 0x0f, 0xb7, 0xd6, 0xc1, 0xe2,
        0x04, 0x49, 0x8b, 0x4d, 0x00, 0x8b, 0x84, 0x13,
        0x80, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x04, 0x41,
        0x48, 0x05, 0xc8, 0x00, 0x00, 0x00, 0x4c, 0x8d,
        0x3c, 0x13, 0x49, 0x81, 0xc7, 0x84, 0x00, 0x00,
        0x00, 0x44, 0x0f, 0xb7, 0xb4, 0x13, 0x84, 0x00,
        0x00, 0x00, 0x41, 0x83, 0xfe, 0x10, 0x73, 0x28,
        0x80, 0x38, 0x46, 0x75, 0x4a, 0x48, 0x8b, 0x89,
        0x98, 0x00, 0x00, 0x00, 0x0f, 0xb6, 0x40, 0x01,
        0x48, 0x8b, 0x44, 0xc1, 0x08, 0x48, 0x89, 0x44,
        0x24, 0x08, 0x8b, 0x08, 0xff, 0xc1, 0x74, 0x65,
        0x89, 0x08, 0xff, 0xc1, 0x75, 0x58, 0xeb, 0x5d,
        0x41, 0x8d, 0x4e, 0xf0, 0x41, 0x81, 0xfe, 0xff,
        0xff, 0x00, 0x00, 0x41, 0x0f, 0x44, 0xce, 0x66,
        0x41, 0x89, 0x0f, 0x4c, 0x29, 0xed, 0x48, 0x83,
        0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x41, 0x89,
        0x6d, 0x40, 0x48, 0x83, 0xc4, 0x18, 0xc3, 0x48,
        0x8d, 0x4c, 0x24, 0x08, 0x4c, 0x89, 0xef, 0x48,
        0x89, 0x44, 0x24, 0x10, 0x48, 0x89, 0xc6, 0x48,
        0x89, 0xea, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x85, 0xc0, 0x7e, 0x31, 0x48, 0x8b, 0x44, 0x24,
        0x08, 0x8b, 0x08, 0x48, 0x8b, 0x35, 0x00, 0x00,
        0x00, 0x00, 0xff, 0xc1, 0x74, 0x07, 0x89, 0x08,
        0x48, 0x8b, 0x44, 0x24, 0x08, 0x0f, 0xb7, 0xce,
        0xc1, 0xe1, 0x04, 0x48, 0x89, 0x84, 0x0b, 0x88,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x40, 0x78, 0x48,
        0x83, 0xc4, 0x18, 0xff, 0xe0, 0x66, 0xb9, 0xfc,
        0xff, 0x66, 0x41, 0x83, 0xfe, 0x0b, 0x77, 0x16,
        0x41, 0x8d, 0x4e, 0x01, 0xba, 0xff, 0xff, 0xff,
        0xff, 0xd3, 0xe2, 0xf7, 0xd2, 0xc1, 0xe2, 0x04,
        0x42, 0x8d, 0x0c, 0x32, 0xff, 0xc1, 0x66, 0x41,
        0x89, 0x0f, 0x85, 0xc0, 0x48, 0x8b, 0x44, 0x24,
        0x10, 0x0f, 0x89, 0x6c, 0xff, 0xff, 0xff, 0x48,
        0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xff,
        0xc8, 0x48, 0x89, 0x03, 0x75, 0x09, 0x48, 0x89,
        0xdf, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x49, 0x89,
        0x84, 0x24, 0x10, 0x01, 0x00, 0x00, 0x4c, 0x29,
        0xed, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed,
        0x03, 0x41, 0x89, 0x6d, 0x40, 0x31, 0xc0, 0x48,
        0x83, 0xc4, 0x18, 0xc3,
    };
    // 0: 
    // 0: OPARG
    // 8: &_PyOptimizer_Optimize+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: EXECUTOR
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyOptimizer_Optimize);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)executor);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xac, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xbe, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x12b, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x132, (uintptr_t)data + 0x14);
}

void
emit__COMPARE_OP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_COMPARE_OP.o: file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 4c 89 24 24                   movq    %r12, (%rsp)
    // 5: 44 0f b7 25 00 00 00 00       movzwl  (%rip), %r12d           # 0xd <_JIT_ENTRY+0xd>
    // 0000000000000009:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // d: 4c 8b 7d f0                   movq    -0x10(%rbp), %r15
    // 11: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 15: 44 89 e2                      movl    %r12d, %edx
    // 18: c1 ea 05                      shrl    $0x5, %edx
    // 1b: 4c 89 ff                      movq    %r15, %rdi
    // 1e: 4c 89 f6                      movq    %r14, %rsi
    // 21: ff 15 00 00 00 00             callq   *(%rip)                 # 0x27 <_JIT_ENTRY+0x27>
    // 0000000000000023:  R_X86_64_GOTPCRELX   PyObject_RichCompare-0x4
    // 27: 48 89 c3                      movq    %rax, %rbx
    // 2a: 49 8b 07                      movq    (%r15), %rax
    // 2d: 85 c0                         testl   %eax, %eax
    // 2f: 78 08                         js      0x39 <_JIT_ENTRY+0x39>
    // 31: 48 ff c8                      decq    %rax
    // 34: 49 89 07                      movq    %rax, (%r15)
    // 37: 74 1a                         je      0x53 <_JIT_ENTRY+0x53>
    // 39: 49 8b 06                      movq    (%r14), %rax
    // 3c: 85 c0                         testl   %eax, %eax
    // 3e: 78 23                         js      0x63 <_JIT_ENTRY+0x63>
    // 40: 48 ff c8                      decq    %rax
    // 43: 49 89 06                      movq    %rax, (%r14)
    // 46: 75 1b                         jne     0x63 <_JIT_ENTRY+0x63>
    // 48: 4c 89 f7                      movq    %r14, %rdi
    // 4b: ff 15 00 00 00 00             callq   *(%rip)                 # 0x51 <_JIT_ENTRY+0x51>
    // 000000000000004d:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 51: eb 10                         jmp     0x63 <_JIT_ENTRY+0x63>
    // 53: 4c 89 ff                      movq    %r15, %rdi
    // 56: ff 15 00 00 00 00             callq   *(%rip)                 # 0x5c <_JIT_ENTRY+0x5c>
    // 0000000000000058:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 5c: 49 8b 06                      movq    (%r14), %rax
    // 5f: 85 c0                         testl   %eax, %eax
    // 61: 79 dd                         jns     0x40 <_JIT_ENTRY+0x40>
    // 63: 48 85 db                      testq   %rbx, %rbx
    // 66: 74 58                         je      0xc0 <_JIT_ENTRY+0xc0>
    // 68: 41 f6 c4 10                   testb   $0x10, %r12b
    // 6c: 74 2e                         je      0x9c <_JIT_ENTRY+0x9c>
    // 6e: 48 89 df                      movq    %rbx, %rdi
    // 71: ff 15 00 00 00 00             callq   *(%rip)                 # 0x77 <_JIT_ENTRY+0x77>
    // 0000000000000073:  R_X86_64_GOTPCRELX   PyObject_IsTrue-0x4
    // 77: 48 8b 0b                      movq    (%rbx), %rcx
    // 7a: 85 c9                         testl   %ecx, %ecx
    // 7c: 78 08                         js      0x86 <_JIT_ENTRY+0x86>
    // 7e: 48 ff c9                      decq    %rcx
    // 81: 48 89 0b                      movq    %rcx, (%rbx)
    // 84: 74 29                         je      0xaf <_JIT_ENTRY+0xaf>
    // 86: 85 c0                         testl   %eax, %eax
    // 88: 78 36                         js      0xc0 <_JIT_ENTRY+0xc0>
    // 8a: 75 09                         jne     0x95 <_JIT_ENTRY+0x95>
    // 8c: 48 8b 1d 00 00 00 00          movq    (%rip), %rbx            # 0x93 <_JIT_ENTRY+0x93>
    // 000000000000008f:  R_X86_64_REX_GOTPCRELX       _Py_FalseStruct-0x4
    // 93: eb 07                         jmp     0x9c <_JIT_ENTRY+0x9c>
    // 95: 48 8b 1d 00 00 00 00          movq    (%rip), %rbx            # 0x9c <_JIT_ENTRY+0x9c>
    // 0000000000000098:  R_X86_64_REX_GOTPCRELX       _Py_TrueStruct-0x4
    // 9c: 48 89 5d f0                   movq    %rbx, -0x10(%rbp)
    // a0: 48 83 c5 f8                   addq    $-0x8, %rbp
    // a4: 4c 8b 24 24                   movq    (%rsp), %r12
    // a8: 58                            popq    %rax
    // a9: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xaf <_JIT_ENTRY+0xaf>
    // 00000000000000ab:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // af: 48 89 df                      movq    %rbx, %rdi
    // b2: 89 c3                         movl    %eax, %ebx
    // b4: ff 15 00 00 00 00             callq   *(%rip)                 # 0xba <_JIT_ENTRY+0xba>
    // 00000000000000b6:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // ba: 89 d8                         movl    %ebx, %eax
    // bc: 85 c0                         testl   %eax, %eax
    // be: 79 ca                         jns     0x8a <_JIT_ENTRY+0x8a>
    // c0: 4c 8b 24 24                   movq    (%rsp), %r12
    // c4: 58                            popq    %rax
    // c5: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xcb <_JIT_ENTRY+0xcb>
    // 00000000000000c7:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // cb: 
    const unsigned char code_body[203] = {
        0x50, 0x4c, 0x89, 0x24, 0x24, 0x44, 0x0f, 0xb7,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x8b, 0x7d,
        0xf0, 0x4c, 0x8b, 0x75, 0xf8, 0x44, 0x89, 0xe2,
        0xc1, 0xea, 0x05, 0x4c, 0x89, 0xff, 0x4c, 0x89,
        0xf6, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0xc3, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78,
        0x08, 0x48, 0xff, 0xc8, 0x49, 0x89, 0x07, 0x74,
        0x1a, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x23,
        0x48, 0xff, 0xc8, 0x49, 0x89, 0x06, 0x75, 0x1b,
        0x4c, 0x89, 0xf7, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0xeb, 0x10, 0x4c, 0x89, 0xff, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x06, 0x85,
        0xc0, 0x79, 0xdd, 0x48, 0x85, 0xdb, 0x74, 0x58,
        0x41, 0xf6, 0xc4, 0x10, 0x74, 0x2e, 0x48, 0x89,
        0xdf, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x0b, 0x85, 0xc9, 0x78, 0x08, 0x48, 0xff,
        0xc9, 0x48, 0x89, 0x0b, 0x74, 0x29, 0x85, 0xc0,
        0x78, 0x36, 0x75, 0x09, 0x48, 0x8b, 0x1d, 0x00,
        0x00, 0x00, 0x00, 0xeb, 0x07, 0x48, 0x8b, 0x1d,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x5d, 0xf0,
        0x48, 0x83, 0xc5, 0xf8, 0x4c, 0x8b, 0x24, 0x24,
        0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0xdf, 0x89, 0xc3, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x89, 0xd8, 0x85, 0xc0, 0x79, 0xca,
        0x4c, 0x8b, 0x24, 0x24, 0x58, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: &PyObject_RichCompare+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: &PyObject_IsTrue+0x0
    // 20: &_Py_FalseStruct+0x0
    // 28: &_Py_TrueStruct+0x0
    // 30: CONTINUE
    // 38: ERROR_TARGET
    const unsigned char data_body[64] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyObject_RichCompare);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)&PyObject_IsTrue);
    patch_64(data + 0x20, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x28, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x30, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x38, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x9, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x23, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x4d, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x58, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x73, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x8f, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x98, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0xab, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0xb6, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xc7, (uintptr_t)data + 0x34);
}

void
emit__COMPARE_OP_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_COMPARE_OP_FLOAT.o:   file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 18                   subq    $0x18, %rsp
    // 4: 4c 8b 75 f0                   movq    -0x10(%rbp), %r14
    // 8: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // c: f2 41 0f 10 46 10             movsd   0x10(%r14), %xmm0
    // 12: f2 0f 10 4b 10                movsd   0x10(%rbx), %xmm1
    // 17: 49 8b 06                      movq    (%r14), %rax
    // 1a: 85 c0                         testl   %eax, %eax
    // 1c: 78 08                         js      0x26 <_JIT_ENTRY+0x26>
    // 1e: 48 ff c8                      decq    %rax
    // 21: 49 89 06                      movq    %rax, (%r14)
    // 24: 74 5e                         je      0x84 <_JIT_ENTRY+0x84>
    // 26: 48 8b 03                      movq    (%rbx), %rax
    // 29: 85 c0                         testl   %eax, %eax
    // 2b: 0f 88 a3 00 00 00             js      0xd4 <_JIT_ENTRY+0xd4>
    // 31: 48 ff c8                      decq    %rax
    // 34: 48 89 03                      movq    %rax, (%rbx)
    // 37: 0f 85 97 00 00 00             jne     0xd4 <_JIT_ENTRY+0xd4>
    // 3d: f2 0f 11 4c 24 08             movsd   %xmm1, 0x8(%rsp)
    // 43: f2 0f 11 44 24 10             movsd   %xmm0, 0x10(%rsp)
    // 49: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x50 <_JIT_ENTRY+0x50>
    // 000000000000004c:  R_X86_64_REX_GOTPCRELX       _PyRuntime-0x4
    // 50: 48 8b 81 48 28 00 00          movq    0x2848(%rcx), %rax
    // 57: 48 85 c0                      testq   %rax, %rax
    // 5a: 74 11                         je      0x6d <_JIT_ENTRY+0x6d>
    // 5c: 48 8b 91 50 28 00 00          movq    0x2850(%rcx), %rdx
    // 63: 48 89 df                      movq    %rbx, %rdi
    // 66: be 01 00 00 00                movl    $0x1, %esi
    // 6b: ff d0                         callq   *%rax
    // 6d: 48 89 df                      movq    %rbx, %rdi
    // 70: ff 15 00 00 00 00             callq   *(%rip)                 # 0x76 <_JIT_ENTRY+0x76>
    // 0000000000000072:  R_X86_64_GOTPCRELX   _PyFloat_ExactDealloc-0x4
    // 76: f2 0f 10 44 24 10             movsd   0x10(%rsp), %xmm0
    // 7c: f2 0f 10 4c 24 08             movsd   0x8(%rsp), %xmm1
    // 82: eb 50                         jmp     0xd4 <_JIT_ENTRY+0xd4>
    // 84: f2 0f 11 4c 24 08             movsd   %xmm1, 0x8(%rsp)
    // 8a: f2 0f 11 44 24 10             movsd   %xmm0, 0x10(%rsp)
    // 90: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x97 <_JIT_ENTRY+0x97>
    // 0000000000000093:  R_X86_64_REX_GOTPCRELX       _PyRuntime-0x4
    // 97: 48 8b 81 48 28 00 00          movq    0x2848(%rcx), %rax
    // 9e: 48 85 c0                      testq   %rax, %rax
    // a1: 74 11                         je      0xb4 <_JIT_ENTRY+0xb4>
    // a3: 48 8b 91 50 28 00 00          movq    0x2850(%rcx), %rdx
    // aa: 4c 89 f7                      movq    %r14, %rdi
    // ad: be 01 00 00 00                movl    $0x1, %esi
    // b2: ff d0                         callq   *%rax
    // b4: 4c 89 f7                      movq    %r14, %rdi
    // b7: ff 15 00 00 00 00             callq   *(%rip)                 # 0xbd <_JIT_ENTRY+0xbd>
    // 00000000000000b9:  R_X86_64_GOTPCRELX   _PyFloat_ExactDealloc-0x4
    // bd: f2 0f 10 44 24 10             movsd   0x10(%rsp), %xmm0
    // c3: f2 0f 10 4c 24 08             movsd   0x8(%rsp), %xmm1
    // c9: 48 8b 03                      movq    (%rbx), %rax
    // cc: 85 c0                         testl   %eax, %eax
    // ce: 0f 89 5d ff ff ff             jns     0x31 <_JIT_ENTRY+0x31>
    // d4: 48 8d 45 f8                   leaq    -0x8(%rbp), %rax
    // d8: 31 c9                         xorl    %ecx, %ecx
    // da: 66 0f 2e c1                   ucomisd %xmm1, %xmm0
    // de: 0f 93 c1                      setae   %cl
    // e1: 01 c9                         addl    %ecx, %ecx
    // e3: 31 d2                         xorl    %edx, %edx
    // e5: 66 0f 2e c8                   ucomisd %xmm0, %xmm1
    // e9: 0f 93 c2                      setae   %dl
    // ec: 09 ca                         orl     %ecx, %edx
    // ee: 8b 0d 00 00 00 00             movl    (%rip), %ecx            # 0xf4 <_JIT_ENTRY+0xf4>
    // 00000000000000f0:  R_X86_64_GOTPCRELX   _JIT_OPARG-0x4
    // f4: 0f a3 d1                      btl     %edx, %ecx
    // f7: 72 18                         jb      0x111 <_JIT_ENTRY+0x111>
    // f9: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x100 <_JIT_ENTRY+0x100>
    // 00000000000000fc:  R_X86_64_REX_GOTPCRELX       _Py_FalseStruct-0x4
    // 100: 48 89 4d f0                   movq    %rcx, -0x10(%rbp)
    // 104: 48 89 c5                      movq    %rax, %rbp
    // 107: 48 83 c4 18                   addq    $0x18, %rsp
    // 10b: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x111 <_JIT_ENTRY+0x111>
    // 000000000000010d:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 111: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x118 <_JIT_ENTRY+0x118>
    // 0000000000000114:  R_X86_64_REX_GOTPCRELX       _Py_TrueStruct-0x4
    // 118: 48 89 4d f0                   movq    %rcx, -0x10(%rbp)
    // 11c: 48 89 c5                      movq    %rax, %rbp
    // 11f: 48 83 c4 18                   addq    $0x18, %rsp
    // 123: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x129 <_JIT_ENTRY+0x129>
    // 0000000000000125:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 123: 
    const unsigned char code_body[291] = {
        0x48, 0x83, 0xec, 0x18, 0x4c, 0x8b, 0x75, 0xf0,
        0x48, 0x8b, 0x5d, 0xf8, 0xf2, 0x41, 0x0f, 0x10,
        0x46, 0x10, 0xf2, 0x0f, 0x10, 0x4b, 0x10, 0x49,
        0x8b, 0x06, 0x85, 0xc0, 0x78, 0x08, 0x48, 0xff,
        0xc8, 0x49, 0x89, 0x06, 0x74, 0x5e, 0x48, 0x8b,
        0x03, 0x85, 0xc0, 0x0f, 0x88, 0xa3, 0x00, 0x00,
        0x00, 0x48, 0xff, 0xc8, 0x48, 0x89, 0x03, 0x0f,
        0x85, 0x97, 0x00, 0x00, 0x00, 0xf2, 0x0f, 0x11,
        0x4c, 0x24, 0x08, 0xf2, 0x0f, 0x11, 0x44, 0x24,
        0x10, 0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x81, 0x48, 0x28, 0x00, 0x00, 0x48,
        0x85, 0xc0, 0x74, 0x11, 0x48, 0x8b, 0x91, 0x50,
        0x28, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xbe, 0x01,
        0x00, 0x00, 0x00, 0xff, 0xd0, 0x48, 0x89, 0xdf,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0xf2, 0x0f,
        0x10, 0x44, 0x24, 0x10, 0xf2, 0x0f, 0x10, 0x4c,
        0x24, 0x08, 0xeb, 0x50, 0xf2, 0x0f, 0x11, 0x4c,
        0x24, 0x08, 0xf2, 0x0f, 0x11, 0x44, 0x24, 0x10,
        0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x81, 0x48, 0x28, 0x00, 0x00, 0x48, 0x85,
        0xc0, 0x74, 0x11, 0x48, 0x8b, 0x91, 0x50, 0x28,
        0x00, 0x00, 0x4c, 0x89, 0xf7, 0xbe, 0x01, 0x00,
        0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0xf7, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0xf2, 0x0f, 0x10,
        0x44, 0x24, 0x10, 0xf2, 0x0f, 0x10, 0x4c, 0x24,
        0x08, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x0f, 0x89,
        0x5d, 0xff, 0xff, 0xff, 0x48, 0x8d, 0x45, 0xf8,
        0x31, 0xc9, 0x66, 0x0f, 0x2e, 0xc1, 0x0f, 0x93,
        0xc1, 0x01, 0xc9, 0x31, 0xd2, 0x66, 0x0f, 0x2e,
        0xc8, 0x0f, 0x93, 0xc2, 0x09, 0xca, 0x8b, 0x0d,
        0x00, 0x00, 0x00, 0x00, 0x0f, 0xa3, 0xd1, 0x72,
        0x18, 0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0x4d, 0xf0, 0x48, 0x89, 0xc5, 0x48,
        0x83, 0xc4, 0x18, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0x4d, 0xf0, 0x48, 0x89, 0xc5, 0x48,
        0x83, 0xc4, 0x18,
    };
    // 0: 
    // 0: &_PyRuntime+0x0
    // 8: &_PyFloat_ExactDealloc+0x0
    // 10: OPARG
    // 18: &_Py_FalseStruct+0x0
    // 20: CONTINUE
    // 28: &_Py_TrueStruct+0x0
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x8, (uintptr_t)&_PyFloat_ExactDealloc);
    patch_64(data + 0x10, instruction->oparg);
    patch_64(data + 0x18, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x20, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x28, (uintptr_t)&_Py_TrueStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x4c, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x72, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x93, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xb9, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xf0, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xfc, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x10d, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x114, (uintptr_t)data + 0x24);
}

void
emit__COMPARE_OP_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_COMPARE_OP_INT.o:     file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 18                   subq    $0x18, %rsp
    // 4: 4c 8b 75 f0                   movq    -0x10(%rbp), %r14
    // 8: 4d 8b 7e 10                   movq    0x10(%r14), %r15
    // c: 49 83 ff 10                   cmpq    $0x10, %r15
    // 10: 73 0e                         jae     0x20 <_JIT_ENTRY+0x20>
    // 12: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 16: 48 8b 73 10                   movq    0x10(%rbx), %rsi
    // 1a: 48 83 fe 10                   cmpq    $0x10, %rsi
    // 1e: 72 0a                         jb      0x2a <_JIT_ENTRY+0x2a>
    // 20: 48 83 c4 18                   addq    $0x18, %rsp
    // 24: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x2a <_JIT_ENTRY+0x2a>
    // 0000000000000026:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 2a: 45 8b 46 18                   movl    0x18(%r14), %r8d
    // 2e: 8b 7b 18                      movl    0x18(%rbx), %edi
    // 31: 49 8b 06                      movq    (%r14), %rax
    // 34: 85 c0                         testl   %eax, %eax
    // 36: 78 51                         js      0x89 <_JIT_ENTRY+0x89>
    // 38: 48 ff c8                      decq    %rax
    // 3b: 49 89 06                      movq    %rax, (%r14)
    // 3e: 75 49                         jne     0x89 <_JIT_ENTRY+0x89>
    // 40: 4c 89 04 24                   movq    %r8, (%rsp)
    // 44: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
    // 49: 48 89 74 24 10                movq    %rsi, 0x10(%rsp)
    // 4e: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x55 <_JIT_ENTRY+0x55>
    // 0000000000000051:  R_X86_64_REX_GOTPCRELX       _PyRuntime-0x4
    // 55: 48 8b 81 48 28 00 00          movq    0x2848(%rcx), %rax
    // 5c: 48 85 c0                      testq   %rax, %rax
    // 5f: 74 11                         je      0x72 <_JIT_ENTRY+0x72>
    // 61: 48 8b 91 50 28 00 00          movq    0x2850(%rcx), %rdx
    // 68: 4c 89 f7                      movq    %r14, %rdi
    // 6b: be 01 00 00 00                movl    $0x1, %esi
    // 70: ff d0                         callq   *%rax
    // 72: 4c 89 f7                      movq    %r14, %rdi
    // 75: ff 15 00 00 00 00             callq   *(%rip)                 # 0x7b <_JIT_ENTRY+0x7b>
    // 0000000000000077:  R_X86_64_GOTPCRELX   PyObject_Free-0x4
    // 7b: 48 8b 74 24 10                movq    0x10(%rsp), %rsi
    // 80: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
    // 85: 4c 8b 04 24                   movq    (%rsp), %r8
    // 89: 48 8b 03                      movq    (%rbx), %rax
    // 8c: 85 c0                         testl   %eax, %eax
    // 8e: 78 4d                         js      0xdd <_JIT_ENTRY+0xdd>
    // 90: 48 ff c8                      decq    %rax
    // 93: 48 89 03                      movq    %rax, (%rbx)
    // 96: 75 45                         jne     0xdd <_JIT_ENTRY+0xdd>
    // 98: 4c 89 04 24                   movq    %r8, (%rsp)
    // 9c: 48 89 7c 24 08                movq    %rdi, 0x8(%rsp)
    // a1: 49 89 f6                      movq    %rsi, %r14
    // a4: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0xab <_JIT_ENTRY+0xab>
    // 00000000000000a7:  R_X86_64_REX_GOTPCRELX       _PyRuntime-0x4
    // ab: 48 8b 81 48 28 00 00          movq    0x2848(%rcx), %rax
    // b2: 48 85 c0                      testq   %rax, %rax
    // b5: 74 11                         je      0xc8 <_JIT_ENTRY+0xc8>
    // b7: 48 8b 91 50 28 00 00          movq    0x2850(%rcx), %rdx
    // be: 48 89 df                      movq    %rbx, %rdi
    // c1: be 01 00 00 00                movl    $0x1, %esi
    // c6: ff d0                         callq   *%rax
    // c8: 48 89 df                      movq    %rbx, %rdi
    // cb: ff 15 00 00 00 00             callq   *(%rip)                 # 0xd1 <_JIT_ENTRY+0xd1>
    // 00000000000000cd:  R_X86_64_GOTPCRELX   PyObject_Free-0x4
    // d1: 4c 89 f6                      movq    %r14, %rsi
    // d4: 48 8b 7c 24 08                movq    0x8(%rsp), %rdi
    // d9: 4c 8b 04 24                   movq    (%rsp), %r8
    // dd: 48 8d 45 f8                   leaq    -0x8(%rbp), %rax
    // e1: 41 83 e7 03                   andl    $0x3, %r15d
    // e5: b9 01 00 00 00                movl    $0x1, %ecx
    // ea: ba 01 00 00 00                movl    $0x1, %edx
    // ef: 4c 29 fa                      subq    %r15, %rdx
    // f2: 49 0f af d0                   imulq   %r8, %rdx
    // f6: 83 e6 03                      andl    $0x3, %esi
    // f9: 48 29 f1                      subq    %rsi, %rcx
    // fc: 48 0f af cf                   imulq   %rdi, %rcx
    // 100: 31 f6                         xorl    %esi, %esi
    // 102: 31 ff                         xorl    %edi, %edi
    // 104: 48 39 ca                      cmpq    %rcx, %rdx
    // 107: 40 0f 9d c6                   setge   %sil
    // 10b: 40 0f 9e c7                   setle   %dil
    // 10f: 01 f6                         addl    %esi, %esi
    // 111: 09 f7                         orl     %esi, %edi
    // 113: 8b 0d 00 00 00 00             movl    (%rip), %ecx            # 0x119 <_JIT_ENTRY+0x119>
    // 0000000000000115:  R_X86_64_GOTPCRELX   _JIT_OPARG-0x4
    // 119: 0f a3 f9                      btl     %edi, %ecx
    // 11c: 72 18                         jb      0x136 <_JIT_ENTRY+0x136>
    // 11e: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x125 <_JIT_ENTRY+0x125>
    // 0000000000000121:  R_X86_64_REX_GOTPCRELX       _Py_FalseStruct-0x4
    // 125: 48 89 4d f0                   movq    %rcx, -0x10(%rbp)
    // 129: 48 89 c5                      movq    %rax, %rbp
    // 12c: 48 83 c4 18                   addq    $0x18, %rsp
    // 130: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x136 <_JIT_ENTRY+0x136>
    // 0000000000000132:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 136: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x13d <_JIT_ENTRY+0x13d>
    // 0000000000000139:  R_X86_64_REX_GOTPCRELX       _Py_TrueStruct-0x4
    // 13d: 48 89 4d f0                   movq    %rcx, -0x10(%rbp)
    // 141: 48 89 c5                      movq    %rax, %rbp
    // 144: 48 83 c4 18                   addq    $0x18, %rsp
    // 148: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x14e <_JIT_ENTRY+0x14e>
    // 000000000000014a:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 148: 
    const unsigned char code_body[328] = {
        0x48, 0x83, 0xec, 0x18, 0x4c, 0x8b, 0x75, 0xf0,
        0x4d, 0x8b, 0x7e, 0x10, 0x49, 0x83, 0xff, 0x10,
        0x73, 0x0e, 0x48, 0x8b, 0x5d, 0xf8, 0x48, 0x8b,
        0x73, 0x10, 0x48, 0x83, 0xfe, 0x10, 0x72, 0x0a,
        0x48, 0x83, 0xc4, 0x18, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x45, 0x8b, 0x46, 0x18, 0x8b, 0x7b,
        0x18, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x51,
        0x48, 0xff, 0xc8, 0x49, 0x89, 0x06, 0x75, 0x49,
        0x4c, 0x89, 0x04, 0x24, 0x48, 0x89, 0x7c, 0x24,
        0x08, 0x48, 0x89, 0x74, 0x24, 0x10, 0x48, 0x8b,
        0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x81,
        0x48, 0x28, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74,
        0x11, 0x48, 0x8b, 0x91, 0x50, 0x28, 0x00, 0x00,
        0x4c, 0x89, 0xf7, 0xbe, 0x01, 0x00, 0x00, 0x00,
        0xff, 0xd0, 0x4c, 0x89, 0xf7, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x74, 0x24, 0x10,
        0x48, 0x8b, 0x7c, 0x24, 0x08, 0x4c, 0x8b, 0x04,
        0x24, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x4d,
        0x48, 0xff, 0xc8, 0x48, 0x89, 0x03, 0x75, 0x45,
        0x4c, 0x89, 0x04, 0x24, 0x48, 0x89, 0x7c, 0x24,
        0x08, 0x49, 0x89, 0xf6, 0x48, 0x8b, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x81, 0x48, 0x28,
        0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x11, 0x48,
        0x8b, 0x91, 0x50, 0x28, 0x00, 0x00, 0x48, 0x89,
        0xdf, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xff, 0xd0,
        0x48, 0x89, 0xdf, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x4c, 0x89, 0xf6, 0x48, 0x8b, 0x7c, 0x24,
        0x08, 0x4c, 0x8b, 0x04, 0x24, 0x48, 0x8d, 0x45,
        0xf8, 0x41, 0x83, 0xe7, 0x03, 0xb9, 0x01, 0x00,
        0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0x00, 0x4c,
        0x29, 0xfa, 0x49, 0x0f, 0xaf, 0xd0, 0x83, 0xe6,
        0x03, 0x48, 0x29, 0xf1, 0x48, 0x0f, 0xaf, 0xcf,
        0x31, 0xf6, 0x31, 0xff, 0x48, 0x39, 0xca, 0x40,
        0x0f, 0x9d, 0xc6, 0x40, 0x0f, 0x9e, 0xc7, 0x01,
        0xf6, 0x09, 0xf7, 0x8b, 0x0d, 0x00, 0x00, 0x00,
        0x00, 0x0f, 0xa3, 0xf9, 0x72, 0x18, 0x48, 0x8b,
        0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4d,
        0xf0, 0x48, 0x89, 0xc5, 0x48, 0x83, 0xc4, 0x18,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4d,
        0xf0, 0x48, 0x89, 0xc5, 0x48, 0x83, 0xc4, 0x18,
    };
    // 0: 
    // 0: JUMP_TARGET
    // 8: &_PyRuntime+0x0
    // 10: &PyObject_Free+0x0
    // 18: OPARG
    // 20: &_Py_FalseStruct+0x0
    // 28: CONTINUE
    // 30: &_Py_TrueStruct+0x0
    const unsigned char data_body[56] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x8, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x10, (uintptr_t)&PyObject_Free);
    patch_64(data + 0x18, instruction->oparg);
    patch_64(data + 0x20, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x28, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x30, (uintptr_t)&_Py_TrueStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x26, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x51, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x77, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xa7, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0xcd, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x115, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x121, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x132, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x139, (uintptr_t)data + 0x2c);
}

void
emit__COMPARE_OP_STR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_COMPARE_OP_STR.o:     file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 4c 8b 7d f0                   movq    -0x10(%rbp), %r15
    // 5: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 9: 4c 89 ff                      movq    %r15, %rdi
    // c: 4c 89 f6                      movq    %r14, %rsi
    // f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x15 <_JIT_ENTRY+0x15>
    // 0000000000000011:  R_X86_64_GOTPCRELX   _PyUnicode_Equal-0x4
    // 15: 89 c3                         movl    %eax, %ebx
    // 17: 49 8b 07                      movq    (%r15), %rax
    // 1a: 85 c0                         testl   %eax, %eax
    // 1c: 78 08                         js      0x26 <_JIT_ENTRY+0x26>
    // 1e: 48 ff c8                      decq    %rax
    // 21: 49 89 07                      movq    %rax, (%r15)
    // 24: 74 3e                         je      0x64 <_JIT_ENTRY+0x64>
    // 26: 49 8b 06                      movq    (%r14), %rax
    // 29: 85 c0                         testl   %eax, %eax
    // 2b: 78 6b                         js      0x98 <_JIT_ENTRY+0x98>
    // 2d: 48 ff c8                      decq    %rax
    // 30: 49 89 06                      movq    %rax, (%r14)
    // 33: 75 63                         jne     0x98 <_JIT_ENTRY+0x98>
    // 35: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x3c <_JIT_ENTRY+0x3c>
    // 0000000000000038:  R_X86_64_REX_GOTPCRELX       _PyRuntime-0x4
    // 3c: 48 8b 81 48 28 00 00          movq    0x2848(%rcx), %rax
    // 43: 48 85 c0                      testq   %rax, %rax
    // 46: 74 11                         je      0x59 <_JIT_ENTRY+0x59>
    // 48: 48 8b 91 50 28 00 00          movq    0x2850(%rcx), %rdx
    // 4f: 4c 89 f7                      movq    %r14, %rdi
    // 52: be 01 00 00 00                movl    $0x1, %esi
    // 57: ff d0                         callq   *%rax
    // 59: 4c 89 f7                      movq    %r14, %rdi
    // 5c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x62 <_JIT_ENTRY+0x62>
    // 000000000000005e:  R_X86_64_GOTPCRELX   _PyUnicode_ExactDealloc-0x4
    // 62: eb 34                         jmp     0x98 <_JIT_ENTRY+0x98>
    // 64: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x6b <_JIT_ENTRY+0x6b>
    // 0000000000000067:  R_X86_64_REX_GOTPCRELX       _PyRuntime-0x4
    // 6b: 48 8b 81 48 28 00 00          movq    0x2848(%rcx), %rax
    // 72: 48 85 c0                      testq   %rax, %rax
    // 75: 74 11                         je      0x88 <_JIT_ENTRY+0x88>
    // 77: 48 8b 91 50 28 00 00          movq    0x2850(%rcx), %rdx
    // 7e: 4c 89 ff                      movq    %r15, %rdi
    // 81: be 01 00 00 00                movl    $0x1, %esi
    // 86: ff d0                         callq   *%rax
    // 88: 4c 89 ff                      movq    %r15, %rdi
    // 8b: ff 15 00 00 00 00             callq   *(%rip)                 # 0x91 <_JIT_ENTRY+0x91>
    // 000000000000008d:  R_X86_64_GOTPCRELX   _PyUnicode_ExactDealloc-0x4
    // 91: 49 8b 06                      movq    (%r14), %rax
    // 94: 85 c0                         testl   %eax, %eax
    // 96: 79 95                         jns     0x2d <_JIT_ENTRY+0x2d>
    // 98: 48 8d 45 f8                   leaq    -0x8(%rbp), %rax
    // 9c: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0xa3 <_JIT_ENTRY+0xa3>
    // 000000000000009f:  R_X86_64_REX_GOTPCRELX       _JIT_OPARG-0x4
    // a3: 83 c3 07                      addl    $0x7, %ebx
    // a6: 66 85 d9                      testw   %bx, %cx
    // a9: 75 15                         jne     0xc0 <_JIT_ENTRY+0xc0>
    // ab: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0xb2 <_JIT_ENTRY+0xb2>
    // 00000000000000ae:  R_X86_64_REX_GOTPCRELX       _Py_FalseStruct-0x4
    // b2: 48 89 4d f0                   movq    %rcx, -0x10(%rbp)
    // b6: 48 89 c5                      movq    %rax, %rbp
    // b9: 58                            popq    %rax
    // ba: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xc0 <_JIT_ENTRY+0xc0>
    // 00000000000000bc:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // c0: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0xc7 <_JIT_ENTRY+0xc7>
    // 00000000000000c3:  R_X86_64_REX_GOTPCRELX       _Py_TrueStruct-0x4
    // c7: 48 89 4d f0                   movq    %rcx, -0x10(%rbp)
    // cb: 48 89 c5                      movq    %rax, %rbp
    // ce: 58                            popq    %rax
    // cf: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xd5 <_JIT_ENTRY+0xd5>
    // 00000000000000d1:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // cf: 
    const unsigned char code_body[207] = {
        0x50, 0x4c, 0x8b, 0x7d, 0xf0, 0x4c, 0x8b, 0x75,
        0xf8, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc3, 0x49,
        0x8b, 0x07, 0x85, 0xc0, 0x78, 0x08, 0x48, 0xff,
        0xc8, 0x49, 0x89, 0x07, 0x74, 0x3e, 0x49, 0x8b,
        0x06, 0x85, 0xc0, 0x78, 0x6b, 0x48, 0xff, 0xc8,
        0x49, 0x89, 0x06, 0x75, 0x63, 0x48, 0x8b, 0x0d,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x81, 0x48,
        0x28, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x11,
        0x48, 0x8b, 0x91, 0x50, 0x28, 0x00, 0x00, 0x4c,
        0x89, 0xf7, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xff,
        0xd0, 0x4c, 0x89, 0xf7, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0xeb, 0x34, 0x48, 0x8b, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x81, 0x48, 0x28,
        0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x11, 0x48,
        0x8b, 0x91, 0x50, 0x28, 0x00, 0x00, 0x4c, 0x89,
        0xff, 0xbe, 0x01, 0x00, 0x00, 0x00, 0xff, 0xd0,
        0x4c, 0x89, 0xff, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x79, 0x95,
        0x48, 0x8d, 0x45, 0xf8, 0x48, 0x8b, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x83, 0xc3, 0x07, 0x66, 0x85,
        0xd9, 0x75, 0x15, 0x48, 0x8b, 0x0d, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x89, 0x4d, 0xf0, 0x48, 0x89,
        0xc5, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0x4d, 0xf0, 0x48, 0x89, 0xc5, 0x58,
    };
    // 0: 
    // 0: &_PyUnicode_Equal+0x0
    // 8: &_PyRuntime+0x0
    // 10: &_PyUnicode_ExactDealloc+0x0
    // 18: OPARG
    // 20: &_Py_FalseStruct+0x0
    // 28: CONTINUE
    // 30: &_Py_TrueStruct+0x0
    const unsigned char data_body[56] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyUnicode_Equal);
    patch_64(data + 0x8, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x10, (uintptr_t)&_PyUnicode_ExactDealloc);
    patch_64(data + 0x18, instruction->oparg);
    patch_64(data + 0x20, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x28, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x30, (uintptr_t)&_Py_TrueStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x11, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x38, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x5e, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x67, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x8d, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x9f, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xae, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xbc, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0xc3, (uintptr_t)data + 0x2c);
}

void
emit__CONTAINS_OP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CONTAINS_OP.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 4c 8b 7d f0                   movq    -0x10(%rbp), %r15
    // 5: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 9: 4c 89 f7                      movq    %r14, %rdi
    // c: 4c 89 fe                      movq    %r15, %rsi
    // f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x15 <_JIT_ENTRY+0x15>
    // 0000000000000011:  R_X86_64_GOTPCRELX   PySequence_Contains-0x4
    // 15: 89 c3                         movl    %eax, %ebx
    // 17: 49 8b 07                      movq    (%r15), %rax
    // 1a: 85 c0                         testl   %eax, %eax
    // 1c: 78 08                         js      0x26 <_JIT_ENTRY+0x26>
    // 1e: 48 ff c8                      decq    %rax
    // 21: 49 89 07                      movq    %rax, (%r15)
    // 24: 74 1a                         je      0x40 <_JIT_ENTRY+0x40>
    // 26: 49 8b 06                      movq    (%r14), %rax
    // 29: 85 c0                         testl   %eax, %eax
    // 2b: 78 23                         js      0x50 <_JIT_ENTRY+0x50>
    // 2d: 48 ff c8                      decq    %rax
    // 30: 49 89 06                      movq    %rax, (%r14)
    // 33: 75 1b                         jne     0x50 <_JIT_ENTRY+0x50>
    // 35: 4c 89 f7                      movq    %r14, %rdi
    // 38: ff 15 00 00 00 00             callq   *(%rip)                 # 0x3e <_JIT_ENTRY+0x3e>
    // 000000000000003a:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 3e: eb 10                         jmp     0x50 <_JIT_ENTRY+0x50>
    // 40: 4c 89 ff                      movq    %r15, %rdi
    // 43: ff 15 00 00 00 00             callq   *(%rip)                 # 0x49 <_JIT_ENTRY+0x49>
    // 0000000000000045:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 49: 49 8b 06                      movq    (%r14), %rax
    // 4c: 85 c0                         testl   %eax, %eax
    // 4e: 79 dd                         jns     0x2d <_JIT_ENTRY+0x2d>
    // 50: 85 db                         testl   %ebx, %ebx
    // 52: 78 24                         js      0x78 <_JIT_ENTRY+0x78>
    // 54: 48 8d 45 f8                   leaq    -0x8(%rbp), %rax
    // 58: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x5f <_JIT_ENTRY+0x5f>
    // 000000000000005b:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 5f: 39 cb                         cmpl    %ecx, %ebx
    // 61: 75 1c                         jne     0x7f <_JIT_ENTRY+0x7f>
    // 63: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x6a <_JIT_ENTRY+0x6a>
    // 0000000000000066:  R_X86_64_REX_GOTPCRELX       _Py_FalseStruct-0x4
    // 6a: 48 89 4d f0                   movq    %rcx, -0x10(%rbp)
    // 6e: 48 89 c5                      movq    %rax, %rbp
    // 71: 58                            popq    %rax
    // 72: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x78 <_JIT_ENTRY+0x78>
    // 0000000000000074:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 78: 58                            popq    %rax
    // 79: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x7f <_JIT_ENTRY+0x7f>
    // 000000000000007b:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 7f: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x86 <_JIT_ENTRY+0x86>
    // 0000000000000082:  R_X86_64_REX_GOTPCRELX       _Py_TrueStruct-0x4
    // 86: 48 89 4d f0                   movq    %rcx, -0x10(%rbp)
    // 8a: 48 89 c5                      movq    %rax, %rbp
    // 8d: 58                            popq    %rax
    // 8e: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x94 <_JIT_ENTRY+0x94>
    // 0000000000000090:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 8e: 
    const unsigned char code_body[142] = {
        0x50, 0x4c, 0x8b, 0x7d, 0xf0, 0x4c, 0x8b, 0x75,
        0xf8, 0x4c, 0x89, 0xf7, 0x4c, 0x89, 0xfe, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc3, 0x49,
        0x8b, 0x07, 0x85, 0xc0, 0x78, 0x08, 0x48, 0xff,
        0xc8, 0x49, 0x89, 0x07, 0x74, 0x1a, 0x49, 0x8b,
        0x06, 0x85, 0xc0, 0x78, 0x23, 0x48, 0xff, 0xc8,
        0x49, 0x89, 0x06, 0x75, 0x1b, 0x4c, 0x89, 0xf7,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x10,
        0x4c, 0x89, 0xff, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x79, 0xdd,
        0x85, 0xdb, 0x78, 0x24, 0x48, 0x8d, 0x45, 0xf8,
        0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x39,
        0xcb, 0x75, 0x1c, 0x48, 0x8b, 0x0d, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x89, 0x4d, 0xf0, 0x48, 0x89,
        0xc5, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89,
        0x4d, 0xf0, 0x48, 0x89, 0xc5, 0x58,
    };
    // 0: 
    // 0: &PySequence_Contains+0x0
    // 8: &_Py_Dealloc+0x0
    // 10: OPARG
    // 18: &_Py_FalseStruct+0x0
    // 20: CONTINUE
    // 28: ERROR_TARGET
    // 30: &_Py_TrueStruct+0x0
    const unsigned char data_body[56] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PySequence_Contains);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x10, instruction->oparg);
    patch_64(data + 0x18, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x20, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x28, instruction_starts[instruction->error_target]);
    patch_64(data + 0x30, (uintptr_t)&_Py_TrueStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x11, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x3a, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x45, (uintptr_t)data + 0x4);
    patch_32r(code + 0x5b, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x66, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x74, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x7b, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x82, (uintptr_t)data + 0x2c);
}

void
emit__CONTAINS_OP_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CONTAINS_OP_DICT.o:   file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 5: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // 9: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x10 <_JIT_ENTRY+0x10>
    // 000000000000000c:  R_X86_64_REX_GOTPCRELX       PyDict_Type-0x4
    // 10: 74 07                         je      0x19 <_JIT_ENTRY+0x19>
    // 12: 58                            popq    %rax
    // 13: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x19 <_JIT_ENTRY+0x19>
    // 0000000000000015:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 19: 4c 8b 7d f0                   movq    -0x10(%rbp), %r15
    // 1d: 48 89 df                      movq    %rbx, %rdi
    // 20: 4c 89 fe                      movq    %r15, %rsi
    // 23: ff 15 00 00 00 00             callq   *(%rip)                 # 0x29 <_JIT_ENTRY+0x29>
    // 0000000000000025:  R_X86_64_GOTPCRELX   PyDict_Contains-0x4
    // 29: 41 89 c6                      movl    %eax, %r14d
    // 2c: 49 8b 07                      movq    (%r15), %rax
    // 2f: 85 c0                         testl   %eax, %eax
    // 31: 78 11                         js      0x44 <_JIT_ENTRY+0x44>
    // 33: 48 ff c8                      decq    %rax
    // 36: 49 89 07                      movq    %rax, (%r15)
    // 39: 75 09                         jne     0x44 <_JIT_ENTRY+0x44>
    // 3b: 4c 89 ff                      movq    %r15, %rdi
    // 3e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x44 <_JIT_ENTRY+0x44>
    // 0000000000000040:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 44: 48 8b 03                      movq    (%rbx), %rax
    // 47: 85 c0                         testl   %eax, %eax
    // 49: 78 08                         js      0x53 <_JIT_ENTRY+0x53>
    // 4b: 48 ff c8                      decq    %rax
    // 4e: 48 89 03                      movq    %rax, (%rbx)
    // 51: 74 3f                         je      0x92 <_JIT_ENTRY+0x92>
    // 53: 45 85 f6                      testl   %r14d, %r14d
    // 56: 78 48                         js      0xa0 <_JIT_ENTRY+0xa0>
    // 58: 48 8d 45 f8                   leaq    -0x8(%rbp), %rax
    // 5c: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x63 <_JIT_ENTRY+0x63>
    // 000000000000005f:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 63: 41 39 ce                      cmpl    %ecx, %r14d
    // 66: 75 15                         jne     0x7d <_JIT_ENTRY+0x7d>
    // 68: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x6f <_JIT_ENTRY+0x6f>
    // 000000000000006b:  R_X86_64_REX_GOTPCRELX       _Py_FalseStruct-0x4
    // 6f: 48 89 4d f0                   movq    %rcx, -0x10(%rbp)
    // 73: 48 89 c5                      movq    %rax, %rbp
    // 76: 58                            popq    %rax
    // 77: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x7d <_JIT_ENTRY+0x7d>
    // 0000000000000079:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 7d: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x84 <_JIT_ENTRY+0x84>
    // 0000000000000080:  R_X86_64_REX_GOTPCRELX       _Py_TrueStruct-0x4
    // 84: 48 89 4d f0                   movq    %rcx, -0x10(%rbp)
    // 88: 48 89 c5                      movq    %rax, %rbp
    // 8b: 58                            popq    %rax
    // 8c: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x92 <_JIT_ENTRY+0x92>
    // 000000000000008e:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 92: 48 89 df                      movq    %rbx, %rdi
    // 95: ff 15 00 00 00 00             callq   *(%rip)                 # 0x9b <_JIT_ENTRY+0x9b>
    // 0000000000000097:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 9b: 45 85 f6                      testl   %r14d, %r14d
    // 9e: 79 b8                         jns     0x58 <_JIT_ENTRY+0x58>
    // a0: 58                            popq    %rax
    // a1: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xa7 <_JIT_ENTRY+0xa7>
    // 00000000000000a3:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // a7: 
    const unsigned char code_body[167] = {
        0x50, 0x48, 0x8b, 0x5d, 0xf8, 0x48, 0x8b, 0x43,
        0x08, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x74, 0x07, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x4c, 0x8b, 0x7d, 0xf0, 0x48, 0x89, 0xdf,
        0x4c, 0x89, 0xfe, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x41, 0x89, 0xc6, 0x49, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x11, 0x48, 0xff, 0xc8, 0x49, 0x89,
        0x07, 0x75, 0x09, 0x4c, 0x89, 0xff, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x03, 0x85,
        0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8, 0x48, 0x89,
        0x03, 0x74, 0x3f, 0x45, 0x85, 0xf6, 0x78, 0x48,
        0x48, 0x8d, 0x45, 0xf8, 0x0f, 0xb7, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x41, 0x39, 0xce, 0x75, 0x15,
        0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0x4d, 0xf0, 0x48, 0x89, 0xc5, 0x58, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x0d,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4d, 0xf0,
        0x48, 0x89, 0xc5, 0x58, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x45, 0x85, 0xf6, 0x79, 0xb8,
        0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &PyDict_Type+0x0
    // 8: JUMP_TARGET
    // 10: &PyDict_Contains+0x0
    // 18: &_Py_Dealloc+0x0
    // 20: OPARG
    // 28: &_Py_FalseStruct+0x0
    // 30: CONTINUE
    // 38: &_Py_TrueStruct+0x0
    // 40: ERROR_TARGET
    const unsigned char data_body[72] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyDict_Type);
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&PyDict_Contains);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, instruction->oparg);
    patch_64(data + 0x28, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x30, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x38, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x40, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xc, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x15, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x25, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x40, (uintptr_t)data + 0x14);
    patch_32r(code + 0x5f, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x6b, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x79, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0x80, (uintptr_t)data + 0x34);
    patch_x86_64_32rx(code + 0x8e, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0x97, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xa3, (uintptr_t)data + 0x3c);
}

void
emit__CONTAINS_OP_SET(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CONTAINS_OP_SET.o:    file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 4c 8b 7d f0                   movq    -0x10(%rbp), %r15
    // 5: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 9: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // d: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x14 <_JIT_ENTRY+0x14>
    // 0000000000000010:  R_X86_64_REX_GOTPCRELX       PySet_Type-0x4
    // 14: 74 10                         je      0x26 <_JIT_ENTRY+0x26>
    // 16: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  R_X86_64_REX_GOTPCRELX       PyFrozenSet_Type-0x4
    // 1d: 74 07                         je      0x26 <_JIT_ENTRY+0x26>
    // 1f: 58                            popq    %rax
    // 20: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x26 <_JIT_ENTRY+0x26>
    // 0000000000000022:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 26: 48 89 df                      movq    %rbx, %rdi
    // 29: 4c 89 fe                      movq    %r15, %rsi
    // 2c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x32 <_JIT_ENTRY+0x32>
    // 000000000000002e:  R_X86_64_GOTPCRELX   _PySet_Contains-0x4
    // 32: 41 89 c6                      movl    %eax, %r14d
    // 35: 49 8b 07                      movq    (%r15), %rax
    // 38: 85 c0                         testl   %eax, %eax
    // 3a: 78 11                         js      0x4d <_JIT_ENTRY+0x4d>
    // 3c: 48 ff c8                      decq    %rax
    // 3f: 49 89 07                      movq    %rax, (%r15)
    // 42: 75 09                         jne     0x4d <_JIT_ENTRY+0x4d>
    // 44: 4c 89 ff                      movq    %r15, %rdi
    // 47: ff 15 00 00 00 00             callq   *(%rip)                 # 0x4d <_JIT_ENTRY+0x4d>
    // 0000000000000049:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 4d: 48 8b 03                      movq    (%rbx), %rax
    // 50: 85 c0                         testl   %eax, %eax
    // 52: 78 08                         js      0x5c <_JIT_ENTRY+0x5c>
    // 54: 48 ff c8                      decq    %rax
    // 57: 48 89 03                      movq    %rax, (%rbx)
    // 5a: 74 3f                         je      0x9b <_JIT_ENTRY+0x9b>
    // 5c: 45 85 f6                      testl   %r14d, %r14d
    // 5f: 78 48                         js      0xa9 <_JIT_ENTRY+0xa9>
    // 61: 48 8d 45 f8                   leaq    -0x8(%rbp), %rax
    // 65: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x6c <_JIT_ENTRY+0x6c>
    // 0000000000000068:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 6c: 41 39 ce                      cmpl    %ecx, %r14d
    // 6f: 75 15                         jne     0x86 <_JIT_ENTRY+0x86>
    // 71: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x78 <_JIT_ENTRY+0x78>
    // 0000000000000074:  R_X86_64_REX_GOTPCRELX       _Py_FalseStruct-0x4
    // 78: 48 89 4d f0                   movq    %rcx, -0x10(%rbp)
    // 7c: 48 89 c5                      movq    %rax, %rbp
    // 7f: 58                            popq    %rax
    // 80: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x86 <_JIT_ENTRY+0x86>
    // 0000000000000082:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 86: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x8d <_JIT_ENTRY+0x8d>
    // 0000000000000089:  R_X86_64_REX_GOTPCRELX       _Py_TrueStruct-0x4
    // 8d: 48 89 4d f0                   movq    %rcx, -0x10(%rbp)
    // 91: 48 89 c5                      movq    %rax, %rbp
    // 94: 58                            popq    %rax
    // 95: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x9b <_JIT_ENTRY+0x9b>
    // 0000000000000097:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 9b: 48 89 df                      movq    %rbx, %rdi
    // 9e: ff 15 00 00 00 00             callq   *(%rip)                 # 0xa4 <_JIT_ENTRY+0xa4>
    // 00000000000000a0:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // a4: 45 85 f6                      testl   %r14d, %r14d
    // a7: 79 b8                         jns     0x61 <_JIT_ENTRY+0x61>
    // a9: 58                            popq    %rax
    // aa: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xb0 <_JIT_ENTRY+0xb0>
    // 00000000000000ac:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // b0: 
    const unsigned char code_body[176] = {
        0x50, 0x4c, 0x8b, 0x7d, 0xf0, 0x48, 0x8b, 0x5d,
        0xf8, 0x48, 0x8b, 0x43, 0x08, 0x48, 0x3b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x74, 0x10, 0x48, 0x3b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x74, 0x07, 0x58,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89,
        0xdf, 0x4c, 0x89, 0xfe, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x41, 0x89, 0xc6, 0x49, 0x8b, 0x07,
        0x85, 0xc0, 0x78, 0x11, 0x48, 0xff, 0xc8, 0x49,
        0x89, 0x07, 0x75, 0x09, 0x4c, 0x89, 0xff, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x03,
        0x85, 0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8, 0x48,
        0x89, 0x03, 0x74, 0x3f, 0x45, 0x85, 0xf6, 0x78,
        0x48, 0x48, 0x8d, 0x45, 0xf8, 0x0f, 0xb7, 0x0d,
        0x00, 0x00, 0x00, 0x00, 0x41, 0x39, 0xce, 0x75,
        0x15, 0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0x4d, 0xf0, 0x48, 0x89, 0xc5, 0x58,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4d,
        0xf0, 0x48, 0x89, 0xc5, 0x58, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x45, 0x85, 0xf6, 0x79,
        0xb8, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &PySet_Type+0x0
    // 8: &PyFrozenSet_Type+0x0
    // 10: JUMP_TARGET
    // 18: &_PySet_Contains+0x0
    // 20: &_Py_Dealloc+0x0
    // 28: OPARG
    // 30: &_Py_FalseStruct+0x0
    // 38: CONTINUE
    // 40: &_Py_TrueStruct+0x0
    // 48: ERROR_TARGET
    const unsigned char data_body[80] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PySet_Type);
    patch_64(data + 0x8, (uintptr_t)&PyFrozenSet_Type);
    patch_64(data + 0x10, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)&_PySet_Contains);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x28, instruction->oparg);
    patch_64(data + 0x30, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x38, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x40, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x48, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x10, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x19, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x22, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x49, (uintptr_t)data + 0x1c);
    patch_32r(code + 0x68, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x74, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0x82, (uintptr_t)data + 0x34);
    patch_x86_64_32rx(code + 0x89, (uintptr_t)data + 0x3c);
    patch_x86_64_32rx(code + 0x97, (uintptr_t)data + 0x34);
    patch_x86_64_32rx(code + 0xa0, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xac, (uintptr_t)data + 0x44);
}

void
emit__CONVERT_VALUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_CONVERT_VALUE.o:      file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 5: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0xc <_JIT_ENTRY+0xc>
    // 0000000000000008:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // c: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  R_X86_64_REX_GOTPCRELX       _PyEval_ConversionFuncs-0x4
    // 13: 48 89 df                      movq    %rbx, %rdi
    // 16: ff 14 c1                      callq   *(%rcx,%rax,8)
    // 19: 48 8b 0b                      movq    (%rbx), %rcx
    // 1c: 85 c9                         testl   %ecx, %ecx
    // 1e: 78 08                         js      0x28 <_JIT_ENTRY+0x28>
    // 20: 48 ff c9                      decq    %rcx
    // 23: 48 89 0b                      movq    %rcx, (%rbx)
    // 26: 74 10                         je      0x38 <_JIT_ENTRY+0x38>
    // 28: 48 85 c0                      testq   %rax, %rax
    // 2b: 74 1f                         je      0x4c <_JIT_ENTRY+0x4c>
    // 2d: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // 31: 58                            popq    %rax
    // 32: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x38 <_JIT_ENTRY+0x38>
    // 0000000000000034:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 38: 48 89 df                      movq    %rbx, %rdi
    // 3b: 48 89 c3                      movq    %rax, %rbx
    // 3e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x44 <_JIT_ENTRY+0x44>
    // 0000000000000040:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 44: 48 89 d8                      movq    %rbx, %rax
    // 47: 48 85 c0                      testq   %rax, %rax
    // 4a: 75 e1                         jne     0x2d <_JIT_ENTRY+0x2d>
    // 4c: 58                            popq    %rax
    // 4d: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x53 <_JIT_ENTRY+0x53>
    // 000000000000004f:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 53: 
    const unsigned char code_body[83] = {
        0x50, 0x48, 0x8b, 0x5d, 0xf8, 0x0f, 0xb7, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0x14,
        0xc1, 0x48, 0x8b, 0x0b, 0x85, 0xc9, 0x78, 0x08,
        0x48, 0xff, 0xc9, 0x48, 0x89, 0x0b, 0x74, 0x10,
        0x48, 0x85, 0xc0, 0x74, 0x1f, 0x48, 0x89, 0x45,
        0xf8, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xdf, 0x48, 0x89, 0xc3, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x48,
        0x85, 0xc0, 0x75, 0xe1, 0x58, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: &_PyEval_ConversionFuncs+0x0
    // 10: CONTINUE
    // 18: &_Py_Dealloc+0x0
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_ConversionFuncs);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x8, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x34, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x40, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x4f, (uintptr_t)data + 0x1c);
}

void
emit__COPY(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_COPY.o:       file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 7: c1 e0 03                      shll    $0x3, %eax
    // a: 48 89 e9                      movq    %rbp, %rcx
    // d: 48 29 c1                      subq    %rax, %rcx
    // 10: 48 8b 01                      movq    (%rcx), %rax
    // 13: 8b 08                         movl    (%rax), %ecx
    // 15: ff c1                         incl    %ecx
    // 17: 74 02                         je      0x1b <_JIT_ENTRY+0x1b>
    // 19: 89 08                         movl    %ecx, (%rax)
    // 1b: 48 89 45 00                   movq    %rax, (%rbp)
    // 1f: 48 83 c5 08                   addq    $0x8, %rbp
    // 23: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x29 <_JIT_ENTRY+0x29>
    // 0000000000000025:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 23: 
    const unsigned char code_body[35] = {
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0xc1,
        0xe0, 0x03, 0x48, 0x89, 0xe9, 0x48, 0x29, 0xc1,
        0x48, 0x8b, 0x01, 0x8b, 0x08, 0xff, 0xc1, 0x74,
        0x02, 0x89, 0x08, 0x48, 0x89, 0x45, 0x00, 0x48,
        0x83, 0xc5, 0x08,
    };
    // 0: 
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x3, (uintptr_t)data + -0x4);
}

void
emit__COPY_FREE_VARS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_COPY_FREE_VARS.o:     file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  R_X86_64_REX_GOTPCRELX       _JIT_OPARG-0x4
    // 7: 66 85 c0                      testw   %ax, %ax
    // a: 74 47                         je      0x53 <_JIT_ENTRY+0x53>
    // c: 49 8b 45 10                   movq    0x10(%r13), %rax
    // 10: 48 8b 40 48                   movq    0x48(%rax), %rax
    // 14: 49 8b 4d 00                   movq    (%r13), %rcx
    // 18: 8b 49 48                      movl    0x48(%rcx), %ecx
    // 1b: 48 8b 15 00 00 00 00          movq    (%rip), %rdx            # 0x22 <_JIT_ENTRY+0x22>
    // 000000000000001e:  R_X86_64_REX_GOTPCRELX       _JIT_OPARG-0x4
    // 22: 0f b7 f2                      movzwl  %dx, %esi
    // 25: 29 f1                         subl    %esi, %ecx
    // 27: 48 63 c9                      movslq  %ecx, %rcx
    // 2a: 83 fe 01                      cmpl    $0x1, %esi
    // 2d: 83 d6 00                      adcl    $0x0, %esi
    // 30: 66 83 fa 02                   cmpw    $0x2, %dx
    // 34: 73 23                         jae     0x59 <_JIT_ENTRY+0x59>
    // 36: 31 d2                         xorl    %edx, %edx
    // 38: 40 f6 c6 01                   testb   $0x1, %sil
    // 3c: 74 15                         je      0x53 <_JIT_ENTRY+0x53>
    // 3e: 48 8b 44 d0 18                movq    0x18(%rax,%rdx,8), %rax
    // 43: 8b 30                         movl    (%rax), %esi
    // 45: ff c6                         incl    %esi
    // 47: 74 02                         je      0x4b <_JIT_ENTRY+0x4b>
    // 49: 89 30                         movl    %esi, (%rax)
    // 4b: 48 01 ca                      addq    %rcx, %rdx
    // 4e: 49 89 44 d5 48                movq    %rax, 0x48(%r13,%rdx,8)
    // 53: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x59 <_JIT_ENTRY+0x59>
    // 0000000000000055:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 59: 89 f2                         movl    %esi, %edx
    // 5b: 81 e2 fe ff 00 00             andl    $0xfffe, %edx           # imm = 0xFFFE
    // 61: 48 8d 3c cd 50 00 00 00       leaq    0x50(,%rcx,8), %rdi
    // 69: 4c 01 ef                      addq    %r13, %rdi
    // 6c: 45 31 c0                      xorl    %r8d, %r8d
    // 6f: eb 1c                         jmp     0x8d <_JIT_ENTRY+0x8d>
    // 71: 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00  nopw    %cs:(%rax,%rax)
    // 80: 4e 89 0c c7                   movq    %r9, (%rdi,%r8,8)
    // 84: 49 83 c0 02                   addq    $0x2, %r8
    // 88: 4c 39 c2                      cmpq    %r8, %rdx
    // 8b: 74 ab                         je      0x38 <_JIT_ENTRY+0x38>
    // 8d: 4e 8b 4c c0 18                movq    0x18(%rax,%r8,8), %r9
    // 92: 41 8b 19                      movl    (%r9), %ebx
    // 95: ff c3                         incl    %ebx
    // 97: 74 03                         je      0x9c <_JIT_ENTRY+0x9c>
    // 99: 41 89 19                      movl    %ebx, (%r9)
    // 9c: 4e 89 4c c7 f8                movq    %r9, -0x8(%rdi,%r8,8)
    // a1: 4e 8b 4c c0 20                movq    0x20(%rax,%r8,8), %r9
    // a6: 41 8b 19                      movl    (%r9), %ebx
    // a9: ff c3                         incl    %ebx
    // ab: 74 d3                         je      0x80 <_JIT_ENTRY+0x80>
    // ad: 41 89 19                      movl    %ebx, (%r9)
    // b0: eb ce                         jmp     0x80 <_JIT_ENTRY+0x80>
    // b2: 
    const unsigned char code_body[178] = {
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x66,
        0x85, 0xc0, 0x74, 0x47, 0x49, 0x8b, 0x45, 0x10,
        0x48, 0x8b, 0x40, 0x48, 0x49, 0x8b, 0x4d, 0x00,
        0x8b, 0x49, 0x48, 0x48, 0x8b, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x0f, 0xb7, 0xf2, 0x29, 0xf1, 0x48,
        0x63, 0xc9, 0x83, 0xfe, 0x01, 0x83, 0xd6, 0x00,
        0x66, 0x83, 0xfa, 0x02, 0x73, 0x23, 0x31, 0xd2,
        0x40, 0xf6, 0xc6, 0x01, 0x74, 0x15, 0x48, 0x8b,
        0x44, 0xd0, 0x18, 0x8b, 0x30, 0xff, 0xc6, 0x74,
        0x02, 0x89, 0x30, 0x48, 0x01, 0xca, 0x49, 0x89,
        0x44, 0xd5, 0x48, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x89, 0xf2, 0x81, 0xe2, 0xfe, 0xff, 0x00,
        0x00, 0x48, 0x8d, 0x3c, 0xcd, 0x50, 0x00, 0x00,
        0x00, 0x4c, 0x01, 0xef, 0x45, 0x31, 0xc0, 0xeb,
        0x1c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4e, 0x89, 0x0c, 0xc7, 0x49, 0x83, 0xc0, 0x02,
        0x4c, 0x39, 0xc2, 0x74, 0xab, 0x4e, 0x8b, 0x4c,
        0xc0, 0x18, 0x41, 0x8b, 0x19, 0xff, 0xc3, 0x74,
        0x03, 0x41, 0x89, 0x19, 0x4e, 0x89, 0x4c, 0xc7,
        0xf8, 0x4e, 0x8b, 0x4c, 0xc0, 0x20, 0x41, 0x8b,
        0x19, 0xff, 0xc3, 0x74, 0xd3, 0x41, 0x89, 0x19,
        0xeb, 0xce,
    };
    // 0: 
    // 0: OPARG
    // 8: CONTINUE
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1e, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x55, (uintptr_t)data + 0x4);
}

void
emit__DELETE_ATTR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_DELETE_ATTR.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 5: 49 8b 45 00                   movq    (%r13), %rax
    // 9: 48 8b 40 20                   movq    0x20(%rax), %rax
    // d: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x14 <_JIT_ENTRY+0x14>
    // 0000000000000010:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 14: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
    // 19: 48 89 df                      movq    %rbx, %rdi
    // 1c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x22 <_JIT_ENTRY+0x22>
    // 000000000000001e:  R_X86_64_GOTPCRELX   PyObject_DelAttr-0x4
    // 22: 48 8b 0b                      movq    (%rbx), %rcx
    // 25: 85 c9                         testl   %ecx, %ecx
    // 27: 78 08                         js      0x31 <_JIT_ENTRY+0x31>
    // 29: 48 ff c9                      decq    %rcx
    // 2c: 48 89 0b                      movq    %rcx, (%rbx)
    // 2f: 74 0b                         je      0x3c <_JIT_ENTRY+0x3c>
    // 31: 85 c0                         testl   %eax, %eax
    // 33: 74 18                         je      0x4d <_JIT_ENTRY+0x4d>
    // 35: 58                            popq    %rax
    // 36: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x3c <_JIT_ENTRY+0x3c>
    // 0000000000000038:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 3c: 48 89 df                      movq    %rbx, %rdi
    // 3f: 89 c3                         movl    %eax, %ebx
    // 41: ff 15 00 00 00 00             callq   *(%rip)                 # 0x47 <_JIT_ENTRY+0x47>
    // 0000000000000043:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 47: 89 d8                         movl    %ebx, %eax
    // 49: 85 c0                         testl   %eax, %eax
    // 4b: 75 e8                         jne     0x35 <_JIT_ENTRY+0x35>
    // 4d: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 51: 58                            popq    %rax
    // 52: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x58 <_JIT_ENTRY+0x58>
    // 0000000000000054:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 52: 
    const unsigned char code_body[82] = {
        0x50, 0x48, 0x8b, 0x5d, 0xf8, 0x49, 0x8b, 0x45,
        0x00, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb7, 0x0d,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x74, 0xc8,
        0x18, 0x48, 0x89, 0xdf, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x0b, 0x85, 0xc9, 0x78,
        0x08, 0x48, 0xff, 0xc9, 0x48, 0x89, 0x0b, 0x74,
        0x0b, 0x85, 0xc0, 0x74, 0x18, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x89,
        0xc3, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x89,
        0xd8, 0x85, 0xc0, 0x75, 0xe8, 0x48, 0x83, 0xc5,
        0xf8, 0x58,
    };
    // 0: 
    // 0: OPARG
    // 8: &PyObject_DelAttr+0x0
    // 10: ERROR_TARGET
    // 18: &_Py_Dealloc+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyObject_DelAttr);
    patch_64(data + 0x10, instruction_starts[instruction->error_target]);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x10, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1e, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x38, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x43, (uintptr_t)data + 0x14);
}

void
emit__DELETE_DEREF(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_DELETE_DEREF.o:       file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x8 <_JIT_ENTRY+0x8>
    // 0000000000000004:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 8: 49 8b 44 c5 48                movq    0x48(%r13,%rax,8), %rax
    // d: 48 8b 78 10                   movq    0x10(%rax), %rdi
    // 11: 48 c7 40 10 00 00 00 00       movq    $0x0, 0x10(%rax)
    // 19: 48 85 ff                      testq   %rdi, %rdi
    // 1c: 74 16                         je      0x34 <_JIT_ENTRY+0x34>
    // 1e: 48 8b 07                      movq    (%rdi), %rax
    // 21: 85 c0                         testl   %eax, %eax
    // 23: 78 08                         js      0x2d <_JIT_ENTRY+0x2d>
    // 25: 48 ff c8                      decq    %rax
    // 28: 48 89 07                      movq    %rax, (%rdi)
    // 2b: 74 22                         je      0x4f <_JIT_ENTRY+0x4f>
    // 2d: 58                            popq    %rax
    // 2e: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x34 <_JIT_ENTRY+0x34>
    // 0000000000000030:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 34: 0f b7 15 00 00 00 00          movzwl  (%rip), %edx            # 0x3b <_JIT_ENTRY+0x3b>
    // 0000000000000037:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 3b: 49 8b 75 00                   movq    (%r13), %rsi
    // 3f: 4c 89 e7                      movq    %r12, %rdi
    // 42: ff 15 00 00 00 00             callq   *(%rip)                 # 0x48 <_JIT_ENTRY+0x48>
    // 0000000000000044:  R_X86_64_GOTPCRELX   _PyEval_FormatExcUnbound-0x4
    // 48: 58                            popq    %rax
    // 49: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x4f <_JIT_ENTRY+0x4f>
    // 000000000000004b:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 4f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x55 <_JIT_ENTRY+0x55>
    // 0000000000000051:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 55: 58                            popq    %rax
    // 56: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x5c <_JIT_ENTRY+0x5c>
    // 0000000000000058:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 56: 
    const unsigned char code_body[86] = {
        0x50, 0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x8b, 0x44, 0xc5, 0x48, 0x48, 0x8b, 0x78,
        0x10, 0x48, 0xc7, 0x40, 0x10, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x85, 0xff, 0x74, 0x16, 0x48, 0x8b,
        0x07, 0x85, 0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8,
        0x48, 0x89, 0x07, 0x74, 0x22, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x8b, 0x75, 0x00, 0x4c,
        0x89, 0xe7, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x58,
    };
    // 0: 
    // 0: OPARG
    // 8: CONTINUE
    // 10: &_PyEval_FormatExcUnbound+0x0
    // 18: ERROR_TARGET
    // 20: &_Py_Dealloc+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_PyEval_FormatExcUnbound);
    patch_64(data + 0x18, instruction_starts[instruction->error_target]);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x4, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x30, (uintptr_t)data + 0x4);
    patch_32r(code + 0x37, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x44, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x4b, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x51, (uintptr_t)data + 0x1c);
}

void
emit__DELETE_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_DELETE_FAST.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x8 <_JIT_ENTRY+0x8>
    // 0000000000000004:  R_X86_64_REX_GOTPCRELX       _JIT_OPARG-0x4
    // 8: 0f b7 f0                      movzwl  %ax, %esi
    // b: 0f b7 c0                      movzwl  %ax, %eax
    // e: 49 8b 7c c5 48                movq    0x48(%r13,%rax,8), %rdi
    // 13: 48 85 ff                      testq   %rdi, %rdi
    // 16: 74 1f                         je      0x37 <_JIT_ENTRY+0x37>
    // 18: 49 c7 44 f5 48 00 00 00 00    movq    $0x0, 0x48(%r13,%rsi,8)
    // 21: 48 8b 07                      movq    (%rdi), %rax
    // 24: 85 c0                         testl   %eax, %eax
    // 26: 78 08                         js      0x30 <_JIT_ENTRY+0x30>
    // 28: 48 ff c8                      decq    %rax
    // 2b: 48 89 07                      movq    %rax, (%rdi)
    // 2e: 74 3c                         je      0x6c <_JIT_ENTRY+0x6c>
    // 30: 58                            popq    %rax
    // 31: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x37 <_JIT_ENTRY+0x37>
    // 0000000000000033:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 37: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x3e <_JIT_ENTRY+0x3e>
    // 000000000000003a:  R_X86_64_REX_GOTPCRELX       PyExc_UnboundLocalError-0x4
    // 3e: 48 8b 18                      movq    (%rax), %rbx
    // 41: 49 8b 45 00                   movq    (%r13), %rax
    // 45: 48 8b 78 60                   movq    0x60(%rax), %rdi
    // 49: ff 15 00 00 00 00             callq   *(%rip)                 # 0x4f <_JIT_ENTRY+0x4f>
    // 000000000000004b:  R_X86_64_GOTPCRELX   PyTuple_GetItem-0x4
    // 4f: 48 8d 15 00 00 00 00          leaq    (%rip), %rdx            # 0x56 <_JIT_ENTRY+0x56>
    // 0000000000000052:  R_X86_64_PC32        .L.str-0x4
    // 56: 4c 89 e7                      movq    %r12, %rdi
    // 59: 48 89 de                      movq    %rbx, %rsi
    // 5c: 48 89 c1                      movq    %rax, %rcx
    // 5f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x65 <_JIT_ENTRY+0x65>
    // 0000000000000061:  R_X86_64_GOTPCRELX   _PyEval_FormatExcCheckArg-0x4
    // 65: 58                            popq    %rax
    // 66: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x6c <_JIT_ENTRY+0x6c>
    // 0000000000000068:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 6c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x72 <_JIT_ENTRY+0x72>
    // 000000000000006e:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 72: 58                            popq    %rax
    // 73: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x79 <_JIT_ENTRY+0x79>
    // 0000000000000075:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 73: 
    const unsigned char code_body[115] = {
        0x50, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xb7, 0xf0, 0x0f, 0xb7, 0xc0, 0x49, 0x8b,
        0x7c, 0xc5, 0x48, 0x48, 0x85, 0xff, 0x74, 0x1f,
        0x49, 0xc7, 0x44, 0xf5, 0x48, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x08,
        0x48, 0xff, 0xc8, 0x48, 0x89, 0x07, 0x74, 0x3c,
        0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x18, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8b, 0x78,
        0x60, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8d, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0xe7, 0x48, 0x89, 0xde, 0x48, 0x89, 0xc1, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x58,
    };
    // 0: "cannot access local variable '%s' where it is not associated with a value\x00"
    // 4a: 00 00 00 00 00 00
    // 50: OPARG
    // 58: CONTINUE
    // 60: &PyExc_UnboundLocalError+0x0
    // 68: &PyTuple_GetItem+0x0
    // 70: &_PyEval_FormatExcCheckArg+0x0
    // 78: ERROR_TARGET
    // 80: &_Py_Dealloc+0x0
    const unsigned char data_body[136] = {
        0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61,
        0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f,
        0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69,
        0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73,
        0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20,
        0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f,
        0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
        0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74,
        0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75,
        0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x50, instruction->oparg);
    patch_64(data + 0x58, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x60, (uintptr_t)&PyExc_UnboundLocalError);
    patch_64(data + 0x68, (uintptr_t)&PyTuple_GetItem);
    patch_64(data + 0x70, (uintptr_t)&_PyEval_FormatExcCheckArg);
    patch_64(data + 0x78, instruction_starts[instruction->error_target]);
    patch_64(data + 0x80, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x4, (uintptr_t)data + 0x4c);
    patch_x86_64_32rx(code + 0x33, (uintptr_t)data + 0x54);
    patch_x86_64_32rx(code + 0x3a, (uintptr_t)data + 0x5c);
    patch_x86_64_32rx(code + 0x4b, (uintptr_t)data + 0x64);
    patch_32r(code + 0x52, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x61, (uintptr_t)data + 0x6c);
    patch_x86_64_32rx(code + 0x68, (uintptr_t)data + 0x74);
    patch_x86_64_32rx(code + 0x6e, (uintptr_t)data + 0x7c);
}

void
emit__DELETE_GLOBAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_DELETE_GLOBAL.o:      file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 49 8b 45 00                   movq    (%r13), %rax
    // 5: 49 8b 7d 18                   movq    0x18(%r13), %rdi
    // 9: 48 8b 40 20                   movq    0x20(%rax), %rax
    // d: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x14 <_JIT_ENTRY+0x14>
    // 0000000000000010:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 14: 48 8b 5c c8 18                movq    0x18(%rax,%rcx,8), %rbx
    // 19: 48 89 de                      movq    %rbx, %rsi
    // 1c: 31 d2                         xorl    %edx, %edx
    // 1e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x24 <_JIT_ENTRY+0x24>
    // 0000000000000020:  R_X86_64_GOTPCRELX   PyDict_Pop-0x4
    // 24: 85 c0                         testl   %eax, %eax
    // 26: 78 09                         js      0x31 <_JIT_ENTRY+0x31>
    // 28: 74 0e                         je      0x38 <_JIT_ENTRY+0x38>
    // 2a: 58                            popq    %rax
    // 2b: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x31 <_JIT_ENTRY+0x31>
    // 000000000000002d:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 31: 58                            popq    %rax
    // 32: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x38 <_JIT_ENTRY+0x38>
    // 0000000000000034:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 38: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x3f <_JIT_ENTRY+0x3f>
    // 000000000000003b:  R_X86_64_REX_GOTPCRELX       PyExc_NameError-0x4
    // 3f: 48 8b 30                      movq    (%rax), %rsi
    // 42: 48 8d 15 00 00 00 00          leaq    (%rip), %rdx            # 0x49 <_JIT_ENTRY+0x49>
    // 0000000000000045:  R_X86_64_PC32        .L.str.9-0x4
    // 49: 4c 89 e7                      movq    %r12, %rdi
    // 4c: 48 89 d9                      movq    %rbx, %rcx
    // 4f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x55 <_JIT_ENTRY+0x55>
    // 0000000000000051:  R_X86_64_GOTPCRELX   _PyEval_FormatExcCheckArg-0x4
    // 55: 58                            popq    %rax
    // 56: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x5c <_JIT_ENTRY+0x5c>
    // 0000000000000058:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 5c: 
    const unsigned char code_body[92] = {
        0x50, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x8b, 0x7d,
        0x18, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb7, 0x0d,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x5c, 0xc8,
        0x18, 0x48, 0x89, 0xde, 0x31, 0xd2, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x09,
        0x74, 0x0e, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x30, 0x48, 0x8d, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xd9, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: "name '%.200s' is not defined\x00"
    // 1d: 00 00 00
    // 20: OPARG
    // 28: &PyDict_Pop+0x0
    // 30: CONTINUE
    // 38: ERROR_TARGET
    // 40: &PyExc_NameError+0x0
    // 48: &_PyEval_FormatExcCheckArg+0x0
    const unsigned char data_body[80] = {
        0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e,
        0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73,
        0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66,
        0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x20, instruction->oparg);
    patch_64(data + 0x28, (uintptr_t)&PyDict_Pop);
    patch_64(data + 0x30, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x38, instruction_starts[instruction->error_target]);
    patch_64(data + 0x40, (uintptr_t)&PyExc_NameError);
    patch_64(data + 0x48, (uintptr_t)&_PyEval_FormatExcCheckArg);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x10, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x20, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x2d, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0x34, (uintptr_t)data + 0x34);
    patch_x86_64_32rx(code + 0x3b, (uintptr_t)data + 0x3c);
    patch_32r(code + 0x45, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x51, (uintptr_t)data + 0x44);
    patch_x86_64_32rx(code + 0x58, (uintptr_t)data + 0x34);
}

void
emit__DELETE_NAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_DELETE_NAME.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 49 8b 45 00                   movq    (%r13), %rax
    // 5: 49 8b 7d 28                   movq    0x28(%r13), %rdi
    // 9: 48 8b 40 20                   movq    0x20(%rax), %rax
    // d: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x14 <_JIT_ENTRY+0x14>
    // 0000000000000010:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 14: 48 8b 5c c8 18                movq    0x18(%rax,%rcx,8), %rbx
    // 19: 48 85 ff                      testq   %rdi, %rdi
    // 1c: 74 31                         je      0x4f <_JIT_ENTRY+0x4f>
    // 1e: 48 89 de                      movq    %rbx, %rsi
    // 21: ff 15 00 00 00 00             callq   *(%rip)                 # 0x27 <_JIT_ENTRY+0x27>
    // 0000000000000023:  R_X86_64_GOTPCRELX   PyObject_DelItem-0x4
    // 27: 85 c0                         testl   %eax, %eax
    // 29: 74 4a                         je      0x75 <_JIT_ENTRY+0x75>
    // 2b: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x32 <_JIT_ENTRY+0x32>
    // 000000000000002e:  R_X86_64_REX_GOTPCRELX       PyExc_NameError-0x4
    // 32: 48 8b 30                      movq    (%rax), %rsi
    // 35: 48 8d 15 00 00 00 00          leaq    (%rip), %rdx            # 0x3c <_JIT_ENTRY+0x3c>
    // 0000000000000038:  R_X86_64_PC32        .L.str.9-0x4
    // 3c: 4c 89 e7                      movq    %r12, %rdi
    // 3f: 48 89 d9                      movq    %rbx, %rcx
    // 42: ff 15 00 00 00 00             callq   *(%rip)                 # 0x48 <_JIT_ENTRY+0x48>
    // 0000000000000044:  R_X86_64_GOTPCRELX   _PyEval_FormatExcCheckArg-0x4
    // 48: 58                            popq    %rax
    // 49: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x4f <_JIT_ENTRY+0x4f>
    // 000000000000004b:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 4f: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x56 <_JIT_ENTRY+0x56>
    // 0000000000000052:  R_X86_64_REX_GOTPCRELX       PyExc_SystemError-0x4
    // 56: 48 8b 30                      movq    (%rax), %rsi
    // 59: 48 8d 15 00 00 00 00          leaq    (%rip), %rdx            # 0x60 <_JIT_ENTRY+0x60>
    // 000000000000005c:  R_X86_64_PC32        .L.str.8-0x4
    // 60: 4c 89 e7                      movq    %r12, %rdi
    // 63: 48 89 d9                      movq    %rbx, %rcx
    // 66: 31 c0                         xorl    %eax, %eax
    // 68: ff 15 00 00 00 00             callq   *(%rip)                 # 0x6e <_JIT_ENTRY+0x6e>
    // 000000000000006a:  R_X86_64_GOTPCRELX   _PyErr_Format-0x4
    // 6e: 58                            popq    %rax
    // 6f: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x75 <_JIT_ENTRY+0x75>
    // 0000000000000071:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 75: 58                            popq    %rax
    // 76: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x7c <_JIT_ENTRY+0x7c>
    // 0000000000000078:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 76: 
    const unsigned char code_body[118] = {
        0x50, 0x49, 0x8b, 0x45, 0x00, 0x49, 0x8b, 0x7d,
        0x28, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb7, 0x0d,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x5c, 0xc8,
        0x18, 0x48, 0x85, 0xff, 0x74, 0x31, 0x48, 0x89,
        0xde, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x85,
        0xc0, 0x74, 0x4a, 0x48, 0x8b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8d, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x48,
        0x89, 0xd9, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x30, 0x48, 0x8d, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x4c, 0x89, 0xe7, 0x48, 0x89, 0xd9, 0x31, 0xc0,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x58, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x58,
    };
    // 0: "no locals when deleting %R\x00name '%.200s' is not defined\x00"
    // 38: 
    // 38: OPARG
    // 40: &PyObject_DelItem+0x0
    // 48: &PyExc_NameError+0x0
    // 50: &_PyEval_FormatExcCheckArg+0x0
    // 58: ERROR_TARGET
    // 60: &PyExc_SystemError+0x0
    // 68: &_PyErr_Format+0x0
    const unsigned char data_body[112] = {
        0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
        0x73, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x64,
        0x65, 0x6c, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x20,
        0x25, 0x52, 0x00, 0x6e, 0x61, 0x6d, 0x65, 0x20,
        0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27,
        0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20,
        0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x38, instruction->oparg);
    patch_64(data + 0x40, (uintptr_t)&PyObject_DelItem);
    patch_64(data + 0x48, (uintptr_t)&PyExc_NameError);
    patch_64(data + 0x50, (uintptr_t)&_PyEval_FormatExcCheckArg);
    patch_64(data + 0x58, instruction_starts[instruction->error_target]);
    patch_64(data + 0x60, (uintptr_t)&PyExc_SystemError);
    patch_64(data + 0x68, (uintptr_t)&_PyErr_Format);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x10, (uintptr_t)data + 0x34);
    patch_x86_64_32rx(code + 0x23, (uintptr_t)data + 0x3c);
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)data + 0x44);
    patch_32r(code + 0x38, (uintptr_t)data + 0x17);
    patch_x86_64_32rx(code + 0x44, (uintptr_t)data + 0x4c);
    patch_x86_64_32rx(code + 0x4b, (uintptr_t)data + 0x54);
    patch_x86_64_32rx(code + 0x52, (uintptr_t)data + 0x5c);
    patch_32r(code + 0x5c, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x6a, (uintptr_t)data + 0x64);
    patch_x86_64_32rx(code + 0x71, (uintptr_t)data + 0x54);
}

void
emit__DELETE_SUBSCR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_DELETE_SUBSCR.o:      file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 4c 8b 7d f0                   movq    -0x10(%rbp), %r15
    // 5: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 9: 4c 89 ff                      movq    %r15, %rdi
    // c: 48 89 de                      movq    %rbx, %rsi
    // f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x15 <_JIT_ENTRY+0x15>
    // 0000000000000011:  R_X86_64_GOTPCRELX   PyObject_DelItem-0x4
    // 15: 41 89 c6                      movl    %eax, %r14d
    // 18: 49 8b 07                      movq    (%r15), %rax
    // 1b: 85 c0                         testl   %eax, %eax
    // 1d: 78 08                         js      0x27 <_JIT_ENTRY+0x27>
    // 1f: 48 ff c8                      decq    %rax
    // 22: 49 89 07                      movq    %rax, (%r15)
    // 25: 74 1a                         je      0x41 <_JIT_ENTRY+0x41>
    // 27: 48 8b 03                      movq    (%rbx), %rax
    // 2a: 85 c0                         testl   %eax, %eax
    // 2c: 78 23                         js      0x51 <_JIT_ENTRY+0x51>
    // 2e: 48 ff c8                      decq    %rax
    // 31: 48 89 03                      movq    %rax, (%rbx)
    // 34: 75 1b                         jne     0x51 <_JIT_ENTRY+0x51>
    // 36: 48 89 df                      movq    %rbx, %rdi
    // 39: ff 15 00 00 00 00             callq   *(%rip)                 # 0x3f <_JIT_ENTRY+0x3f>
    // 000000000000003b:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 3f: eb 10                         jmp     0x51 <_JIT_ENTRY+0x51>
    // 41: 4c 89 ff                      movq    %r15, %rdi
    // 44: ff 15 00 00 00 00             callq   *(%rip)                 # 0x4a <_JIT_ENTRY+0x4a>
    // 0000000000000046:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 4a: 48 8b 03                      movq    (%rbx), %rax
    // 4d: 85 c0                         testl   %eax, %eax
    // 4f: 79 dd                         jns     0x2e <_JIT_ENTRY+0x2e>
    // 51: 45 85 f6                      testl   %r14d, %r14d
    // 54: 74 07                         je      0x5d <_JIT_ENTRY+0x5d>
    // 56: 58                            popq    %rax
    // 57: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x5d <_JIT_ENTRY+0x5d>
    // 0000000000000059:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 5d: 48 83 c5 f0                   addq    $-0x10, %rbp
    // 61: 58                            popq    %rax
    // 62: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x68 <_JIT_ENTRY+0x68>
    // 0000000000000064:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 62: 
    const unsigned char code_body[98] = {
        0x50, 0x4c, 0x8b, 0x7d, 0xf0, 0x48, 0x8b, 0x5d,
        0xf8, 0x4c, 0x89, 0xff, 0x48, 0x89, 0xde, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x41, 0x89, 0xc6,
        0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x08, 0x48,
        0xff, 0xc8, 0x49, 0x89, 0x07, 0x74, 0x1a, 0x48,
        0x8b, 0x03, 0x85, 0xc0, 0x78, 0x23, 0x48, 0xff,
        0xc8, 0x48, 0x89, 0x03, 0x75, 0x1b, 0x48, 0x89,
        0xdf, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0xeb,
        0x10, 0x4c, 0x89, 0xff, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x79,
        0xdd, 0x45, 0x85, 0xf6, 0x74, 0x07, 0x58, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc5,
        0xf0, 0x58,
    };
    // 0: 
    // 0: &PyObject_DelItem+0x0
    // 8: &_Py_Dealloc+0x0
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyObject_DelItem);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x10, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x11, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x3b, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x46, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x59, (uintptr_t)data + 0xc);
}

void
emit__DEOPT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_DEOPT.o:      file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  R_X86_64_REX_GOTPCRELX       _JIT_EXECUTOR-0x4
    // 7: 49 89 84 24 10 01 00 00       movq    %rax, 0x110(%r12)
    // f: 4c 29 ed                      subq    %r13, %rbp
    // 12: 48 83 c5 b8                   addq    $-0x48, %rbp
    // 16: 48 c1 ed 03                   shrq    $0x3, %rbp
    // 1a: 41 89 6d 40                   movl    %ebp, 0x40(%r13)
    // 1e: 49 8b 45 00                   movq    (%r13), %rax
    // 22: 8b 0d 00 00 00 00             movl    (%rip), %ecx            # 0x28 <_JIT_ENTRY+0x28>
    // 0000000000000024:  R_X86_64_GOTPCRELX   _JIT_TARGET-0x4
    // 28: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
    // 2c: 48 05 c8 00 00 00             addq    $0xc8, %rax
    // 32: c3                            retq
    // 33: 
    const unsigned char code_body[51] = {
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x89, 0x84, 0x24, 0x10, 0x01, 0x00, 0x00, 0x4c,
        0x29, 0xed, 0x48, 0x83, 0xc5, 0xb8, 0x48, 0xc1,
        0xed, 0x03, 0x41, 0x89, 0x6d, 0x40, 0x49, 0x8b,
        0x45, 0x00, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8d, 0x04, 0x48, 0x48, 0x05, 0xc8, 0x00,
        0x00, 0x00, 0xc3,
    };
    // 0: 
    // 0: EXECUTOR
    // 8: TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)executor);
    patch_64(data + 0x8, instruction->target);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x24, (uintptr_t)data + 0x4);
}

void
emit__DICT_MERGE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_DICT_MERGE.o: file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x8 <_JIT_ENTRY+0x8>
    // 0000000000000004:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 8: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // c: b9 fc ff ff ff                movl    $0xfffffffc, %ecx       # imm = 0xFFFFFFFC
    // 11: 29 c1                         subl    %eax, %ecx
    // 13: f7 d0                         notl    %eax
    // 15: 48 98                         cltq
    // 17: 48 8b 7c c5 00                movq    (%rbp,%rax,8), %rdi
    // 1c: 48 63 c1                      movslq  %ecx, %rax
    // 1f: 4c 8b 74 c5 00                movq    (%rbp,%rax,8), %r14
    // 24: 48 89 de                      movq    %rbx, %rsi
    // 27: ba 02 00 00 00                movl    $0x2, %edx
    // 2c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x32 <_JIT_ENTRY+0x32>
    // 000000000000002e:  R_X86_64_GOTPCRELX   _PyDict_MergeEx-0x4
    // 32: 85 c0                         testl   %eax, %eax
    // 34: 78 1a                         js      0x50 <_JIT_ENTRY+0x50>
    // 36: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 3a: 48 8b 03                      movq    (%rbx), %rax
    // 3d: 85 c0                         testl   %eax, %eax
    // 3f: 78 08                         js      0x49 <_JIT_ENTRY+0x49>
    // 41: 48 ff c8                      decq    %rax
    // 44: 48 89 03                      movq    %rax, (%rbx)
    // 47: 74 2c                         je      0x75 <_JIT_ENTRY+0x75>
    // 49: 58                            popq    %rax
    // 4a: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x50 <_JIT_ENTRY+0x50>
    // 000000000000004c:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 50: 4c 89 e7                      movq    %r12, %rdi
    // 53: 4c 89 f6                      movq    %r14, %rsi
    // 56: 48 89 da                      movq    %rbx, %rdx
    // 59: ff 15 00 00 00 00             callq   *(%rip)                 # 0x5f <_JIT_ENTRY+0x5f>
    // 000000000000005b:  R_X86_64_GOTPCRELX   _PyEval_FormatKwargsError-0x4
    // 5f: 48 8b 03                      movq    (%rbx), %rax
    // 62: 85 c0                         testl   %eax, %eax
    // 64: 78 08                         js      0x6e <_JIT_ENTRY+0x6e>
    // 66: 48 ff c8                      decq    %rax
    // 69: 48 89 03                      movq    %rax, (%rbx)
    // 6c: 74 17                         je      0x85 <_JIT_ENTRY+0x85>
    // 6e: 58                            popq    %rax
    // 6f: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x75 <_JIT_ENTRY+0x75>
    // 0000000000000071:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 75: 48 89 df                      movq    %rbx, %rdi
    // 78: ff 15 00 00 00 00             callq   *(%rip)                 # 0x7e <_JIT_ENTRY+0x7e>
    // 000000000000007a:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 7e: 58                            popq    %rax
    // 7f: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x85 <_JIT_ENTRY+0x85>
    // 0000000000000081:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 85: 48 89 df                      movq    %rbx, %rdi
    // 88: ff 15 00 00 00 00             callq   *(%rip)                 # 0x8e <_JIT_ENTRY+0x8e>
    // 000000000000008a:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 8e: 58                            popq    %rax
    // 8f: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x95 <_JIT_ENTRY+0x95>
    // 0000000000000091:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 95: 
    const unsigned char code_body[149] = {
        0x50, 0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x5d, 0xf8, 0xb9, 0xfc, 0xff, 0xff,
        0xff, 0x29, 0xc1, 0xf7, 0xd0, 0x48, 0x98, 0x48,
        0x8b, 0x7c, 0xc5, 0x00, 0x48, 0x63, 0xc1, 0x4c,
        0x8b, 0x74, 0xc5, 0x00, 0x48, 0x89, 0xde, 0xba,
        0x02, 0x00, 0x00, 0x00, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x85, 0xc0, 0x78, 0x1a, 0x48, 0x83,
        0xc5, 0xf8, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78,
        0x08, 0x48, 0xff, 0xc8, 0x48, 0x89, 0x03, 0x74,
        0x2c, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xf6, 0x48, 0x89,
        0xda, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x03, 0x85, 0xc0, 0x78, 0x08, 0x48, 0xff,
        0xc8, 0x48, 0x89, 0x03, 0x74, 0x17, 0x58, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x58, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x58, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: &_PyDict_MergeEx+0x0
    // 10: CONTINUE
    // 18: &_PyEval_FormatKwargsError+0x0
    // 20: ERROR_TARGET
    // 28: &_Py_Dealloc+0x0
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyDict_MergeEx);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&_PyEval_FormatKwargsError);
    patch_64(data + 0x20, instruction_starts[instruction->error_target]);
    patch_64(data + 0x28, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x4, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x4c, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x5b, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x71, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x7a, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x81, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x8a, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x91, (uintptr_t)data + 0x1c);
}

void
emit__DICT_UPDATE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_DICT_UPDATE.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 8b 05 00 00 00 00             movl    (%rip), %eax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  R_X86_64_GOTPCRELX   _JIT_OPARG-0x4
    // 7: f7 d0                         notl    %eax
    // 9: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // d: c1 e0 03                      shll    $0x3, %eax
    // 10: 48 0d 00 00 f8 ff             orq     $-0x80000, %rax         # imm = 0xFFF80000
    // 16: 48 8b 7c 05 00                movq    (%rbp,%rax), %rdi
    // 1b: 48 89 de                      movq    %rbx, %rsi
    // 1e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x24 <_JIT_ENTRY+0x24>
    // 0000000000000020:  R_X86_64_GOTPCRELX   PyDict_Update-0x4
    // 24: 85 c0                         testl   %eax, %eax
    // 26: 78 1a                         js      0x42 <_JIT_ENTRY+0x42>
    // 28: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 2c: 48 8b 03                      movq    (%rbx), %rax
    // 2f: 85 c0                         testl   %eax, %eax
    // 31: 78 08                         js      0x3b <_JIT_ENTRY+0x3b>
    // 33: 48 ff c8                      decq    %rax
    // 36: 48 89 03                      movq    %rax, (%rbx)
    // 39: 74 58                         je      0x93 <_JIT_ENTRY+0x93>
    // 3b: 58                            popq    %rax
    // 3c: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x42 <_JIT_ENTRY+0x42>
    // 000000000000003e:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 42: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x49 <_JIT_ENTRY+0x49>
    // 0000000000000045:  R_X86_64_REX_GOTPCRELX       PyExc_AttributeError-0x4
    // 49: 48 8b 30                      movq    (%rax), %rsi
    // 4c: 4c 89 e7                      movq    %r12, %rdi
    // 4f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x55 <_JIT_ENTRY+0x55>
    // 0000000000000051:  R_X86_64_GOTPCRELX   _PyErr_ExceptionMatches-0x4
    // 55: 85 c0                         testl   %eax, %eax
    // 57: 74 24                         je      0x7d <_JIT_ENTRY+0x7d>
    // 59: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x60 <_JIT_ENTRY+0x60>
    // 000000000000005c:  R_X86_64_REX_GOTPCRELX       PyExc_TypeError-0x4
    // 60: 48 8b 30                      movq    (%rax), %rsi
    // 63: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // 67: 48 8b 48 18                   movq    0x18(%rax), %rcx
    // 6b: 48 8d 15 00 00 00 00          leaq    (%rip), %rdx            # 0x72 <_JIT_ENTRY+0x72>
    // 000000000000006e:  R_X86_64_PC32        .L.str.13-0x4
    // 72: 4c 89 e7                      movq    %r12, %rdi
    // 75: 31 c0                         xorl    %eax, %eax
    // 77: ff 15 00 00 00 00             callq   *(%rip)                 # 0x7d <_JIT_ENTRY+0x7d>
    // 0000000000000079:  R_X86_64_GOTPCRELX   _PyErr_Format-0x4
    // 7d: 48 8b 03                      movq    (%rbx), %rax
    // 80: 85 c0                         testl   %eax, %eax
    // 82: 78 08                         js      0x8c <_JIT_ENTRY+0x8c>
    // 84: 48 ff c8                      decq    %rax
    // 87: 48 89 03                      movq    %rax, (%rbx)
    // 8a: 74 17                         je      0xa3 <_JIT_ENTRY+0xa3>
    // 8c: 58                            popq    %rax
    // 8d: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x93 <_JIT_ENTRY+0x93>
    // 000000000000008f:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 93: 48 89 df                      movq    %rbx, %rdi
    // 96: ff 15 00 00 00 00             callq   *(%rip)                 # 0x9c <_JIT_ENTRY+0x9c>
    // 0000000000000098:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 9c: 58                            popq    %rax
    // 9d: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xa3 <_JIT_ENTRY+0xa3>
    // 000000000000009f:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // a3: 48 89 df                      movq    %rbx, %rdi
    // a6: ff 15 00 00 00 00             callq   *(%rip)                 # 0xac <_JIT_ENTRY+0xac>
    // 00000000000000a8:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // ac: 58                            popq    %rax
    // ad: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xb3 <_JIT_ENTRY+0xb3>
    // 00000000000000af:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // b3: 
    const unsigned char code_body[179] = {
        0x50, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0xf7,
        0xd0, 0x48, 0x8b, 0x5d, 0xf8, 0xc1, 0xe0, 0x03,
        0x48, 0x0d, 0x00, 0x00, 0xf8, 0xff, 0x48, 0x8b,
        0x7c, 0x05, 0x00, 0x48, 0x89, 0xde, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x1a,
        0x48, 0x83, 0xc5, 0xf8, 0x48, 0x8b, 0x03, 0x85,
        0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8, 0x48, 0x89,
        0x03, 0x74, 0x58, 0x58, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x30, 0x4c, 0x89, 0xe7, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74,
        0x24, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x30, 0x48, 0x8b, 0x43, 0x08, 0x48,
        0x8b, 0x48, 0x18, 0x48, 0x8d, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xc0, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x03,
        0x85, 0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8, 0x48,
        0x89, 0x03, 0x74, 0x17, 0x58, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x58, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x58, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: "'%.200s' object is not a mapping\x00"
    // 21: 00 00 00 00 00 00 00
    // 28: OPARG
    // 30: &PyDict_Update+0x0
    // 38: CONTINUE
    // 40: &PyExc_AttributeError+0x0
    // 48: &_PyErr_ExceptionMatches+0x0
    // 50: &PyExc_TypeError+0x0
    // 58: &_PyErr_Format+0x0
    // 60: ERROR_TARGET
    // 68: &_Py_Dealloc+0x0
    const unsigned char data_body[112] = {
        0x27, 0x25, 0x2e, 0x32, 0x30, 0x30, 0x73, 0x27,
        0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20,
        0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x61,
        0x20, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x28, instruction->oparg);
    patch_64(data + 0x30, (uintptr_t)&PyDict_Update);
    patch_64(data + 0x38, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x40, (uintptr_t)&PyExc_AttributeError);
    patch_64(data + 0x48, (uintptr_t)&_PyErr_ExceptionMatches);
    patch_64(data + 0x50, (uintptr_t)&PyExc_TypeError);
    patch_64(data + 0x58, (uintptr_t)&_PyErr_Format);
    patch_64(data + 0x60, instruction_starts[instruction->error_target]);
    patch_64(data + 0x68, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x20, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0x3e, (uintptr_t)data + 0x34);
    patch_x86_64_32rx(code + 0x45, (uintptr_t)data + 0x3c);
    patch_x86_64_32rx(code + 0x51, (uintptr_t)data + 0x44);
    patch_x86_64_32rx(code + 0x5c, (uintptr_t)data + 0x4c);
    patch_32r(code + 0x6e, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x79, (uintptr_t)data + 0x54);
    patch_x86_64_32rx(code + 0x8f, (uintptr_t)data + 0x5c);
    patch_x86_64_32rx(code + 0x98, (uintptr_t)data + 0x64);
    patch_x86_64_32rx(code + 0x9f, (uintptr_t)data + 0x34);
    patch_x86_64_32rx(code + 0xa8, (uintptr_t)data + 0x64);
    patch_x86_64_32rx(code + 0xaf, (uintptr_t)data + 0x5c);
}

void
emit__DYNAMIC_EXIT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_DYNAMIC_EXIT.o:       file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 4c 8b 35 00 00 00 00          movq    (%rip), %r14            # 0x8 <_JIT_ENTRY+0x8>
    // 0000000000000004:  R_X86_64_REX_GOTPCRELX       _JIT_EXECUTOR-0x4
    // 8: 4d 89 b4 24 10 01 00 00       movq    %r14, 0x110(%r12)
    // 10: 49 8b 5d 38                   movq    0x38(%r13), %rbx
    // 14: 80 3b 46                      cmpb    $0x46, (%rbx)
    // 17: 75 23                         jne     0x3c <_JIT_ENTRY+0x3c>
    // 19: 49 8b 45 00                   movq    (%r13), %rax
    // 1d: 48 8b 80 98 00 00 00          movq    0x98(%rax), %rax
    // 24: 0f b6 4b 01                   movzbl  0x1(%rbx), %ecx
    // 28: 48 8b 44 c8 08                movq    0x8(%rax,%rcx,8), %rax
    // 2d: 8b 08                         movl    (%rax), %ecx
    // 2f: ff c1                         incl    %ecx
    // 31: 74 02                         je      0x35 <_JIT_ENTRY+0x35>
    // 33: 89 08                         movl    %ecx, (%rax)
    // 35: 48 8b 40 78                   movq    0x78(%rax), %rax
    // 39: 59                            popq    %rcx
    // 3a: ff e0                         jmpq    *%rax
    // 3c: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x43 <_JIT_ENTRY+0x43>
    // 000000000000003f:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 43: c1 e0 04                      shll    $0x4, %eax
    // 46: 4d 8d 3c 06                   leaq    (%r14,%rax), %r15
    // 4a: 49 81 c7 84 00 00 00          addq    $0x84, %r15
    // 51: 41 0f b7 84 06 84 00 00 00    movzwl  0x84(%r14,%rax), %eax
    // 5a: 66 83 f8 10                   cmpw    $0x10, %ax
    // 5e: 73 27                         jae     0x87 <_JIT_ENTRY+0x87>
    // 60: 48 89 e1                      movq    %rsp, %rcx
    // 63: 4c 89 ef                      movq    %r13, %rdi
    // 66: 48 89 de                      movq    %rbx, %rsi
    // 69: 48 89 ea                      movq    %rbp, %rdx
    // 6c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x72 <_JIT_ENTRY+0x72>
    // 000000000000006e:  R_X86_64_GOTPCRELX   _PyOptimizer_Optimize-0x4
    // 72: 85 c0                         testl   %eax, %eax
    // 74: 7e 38                         jle     0xae <_JIT_ENTRY+0xae>
    // 76: 66 41 c7 07 06 04             movw    $0x406, (%r15)          # imm = 0x406
    // 7c: 48 8b 04 24                   movq    (%rsp), %rax
    // 80: 48 8b 40 78                   movq    0x78(%rax), %rax
    // 84: 59                            popq    %rcx
    // 85: ff e0                         jmpq    *%rax
    // 87: 8d 48 f0                      leal    -0x10(%rax), %ecx
    // 8a: 66 83 f8 ff                   cmpw    $-0x1, %ax
    // 8e: b8 ff ff 00 00                movl    $0xffff, %eax           # imm = 0xFFFF
    // 93: 0f 45 c1                      cmovnel %ecx, %eax
    // 96: 66 41 89 07                   movw    %ax, (%r15)
    // 9a: 4c 29 ed                      subq    %r13, %rbp
    // 9d: 48 83 c5 b8                   addq    $-0x48, %rbp
    // a1: 48 c1 ed 03                   shrq    $0x3, %rbp
    // a5: 41 89 6d 40                   movl    %ebp, 0x40(%r13)
    // a9: 48 89 d8                      movq    %rbx, %rax
    // ac: 59                            popq    %rcx
    // ad: c3                            retq
    // ae: 41 0f b7 17                   movzwl  (%r15), %edx
    // b2: 83 e2 0f                      andl    $0xf, %edx
    // b5: 66 b9 fc ff                   movw    $0xfffc, %cx            # imm = 0xFFFC
    // b9: 66 83 fa 0b                   cmpw    $0xb, %dx
    // bd: 77 14                         ja      0xd3 <_JIT_ENTRY+0xd3>
    // bf: 8d 4a 01                      leal    0x1(%rdx), %ecx
    // c2: be ff ff ff ff                movl    $0xffffffff, %esi       # imm = 0xFFFFFFFF
    // c7: d3 e6                         shll    %cl, %esi
    // c9: f7 d6                         notl    %esi
    // cb: c1 e6 04                      shll    $0x4, %esi
    // ce: 8d 0c 16                      leal    (%rsi,%rdx), %ecx
    // d1: ff c1                         incl    %ecx
    // d3: 66 41 89 0f                   movw    %cx, (%r15)
    // d7: 85 c0                         testl   %eax, %eax
    // d9: 79 bf                         jns     0x9a <_JIT_ENTRY+0x9a>
    // db: 4d 89 b4 24 10 01 00 00       movq    %r14, 0x110(%r12)
    // e3: 4c 29 ed                      subq    %r13, %rbp
    // e6: 48 83 c5 b8                   addq    $-0x48, %rbp
    // ea: 48 c1 ed 03                   shrq    $0x3, %rbp
    // ee: 41 89 6d 40                   movl    %ebp, 0x40(%r13)
    // f2: 31 db                         xorl    %ebx, %ebx
    // f4: 48 89 d8                      movq    %rbx, %rax
    // f7: 59                            popq    %rcx
    // f8: c3                            retq
    // f9: 
    const unsigned char code_body[249] = {
        0x50, 0x4c, 0x8b, 0x35, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x89, 0xb4, 0x24, 0x10, 0x01, 0x00, 0x00,
        0x49, 0x8b, 0x5d, 0x38, 0x80, 0x3b, 0x46, 0x75,
        0x23, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8b, 0x80,
        0x98, 0x00, 0x00, 0x00, 0x0f, 0xb6, 0x4b, 0x01,
        0x48, 0x8b, 0x44, 0xc8, 0x08, 0x8b, 0x08, 0xff,
        0xc1, 0x74, 0x02, 0x89, 0x08, 0x48, 0x8b, 0x40,
        0x78, 0x59, 0xff, 0xe0, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0xc1, 0xe0, 0x04, 0x4d, 0x8d,
        0x3c, 0x06, 0x49, 0x81, 0xc7, 0x84, 0x00, 0x00,
        0x00, 0x41, 0x0f, 0xb7, 0x84, 0x06, 0x84, 0x00,
        0x00, 0x00, 0x66, 0x83, 0xf8, 0x10, 0x73, 0x27,
        0x48, 0x89, 0xe1, 0x4c, 0x89, 0xef, 0x48, 0x89,
        0xde, 0x48, 0x89, 0xea, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x85, 0xc0, 0x7e, 0x38, 0x66, 0x41,
        0xc7, 0x07, 0x06, 0x04, 0x48, 0x8b, 0x04, 0x24,
        0x48, 0x8b, 0x40, 0x78, 0x59, 0xff, 0xe0, 0x8d,
        0x48, 0xf0, 0x66, 0x83, 0xf8, 0xff, 0xb8, 0xff,
        0xff, 0x00, 0x00, 0x0f, 0x45, 0xc1, 0x66, 0x41,
        0x89, 0x07, 0x4c, 0x29, 0xed, 0x48, 0x83, 0xc5,
        0xb8, 0x48, 0xc1, 0xed, 0x03, 0x41, 0x89, 0x6d,
        0x40, 0x48, 0x89, 0xd8, 0x59, 0xc3, 0x41, 0x0f,
        0xb7, 0x17, 0x83, 0xe2, 0x0f, 0x66, 0xb9, 0xfc,
        0xff, 0x66, 0x83, 0xfa, 0x0b, 0x77, 0x14, 0x8d,
        0x4a, 0x01, 0xbe, 0xff, 0xff, 0xff, 0xff, 0xd3,
        0xe6, 0xf7, 0xd6, 0xc1, 0xe6, 0x04, 0x8d, 0x0c,
        0x16, 0xff, 0xc1, 0x66, 0x41, 0x89, 0x0f, 0x85,
        0xc0, 0x79, 0xbf, 0x4d, 0x89, 0xb4, 0x24, 0x10,
        0x01, 0x00, 0x00, 0x4c, 0x29, 0xed, 0x48, 0x83,
        0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x41, 0x89,
        0x6d, 0x40, 0x31, 0xdb, 0x48, 0x89, 0xd8, 0x59,
        0xc3,
    };
    // 0: 
    // 0: EXECUTOR
    // 8: OPARG
    // 10: &_PyOptimizer_Optimize+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)executor);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)&_PyOptimizer_Optimize);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x4, (uintptr_t)data + -0x4);
    patch_32r(code + 0x3f, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x6e, (uintptr_t)data + 0xc);
}

void
emit__END_SEND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_END_SEND.o:   file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 89 eb                      movq    %rbp, %rbx
    // 4: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 8: 48 8b 7b f0                   movq    -0x10(%rbx), %rdi
    // c: 4c 8b 73 f8                   movq    -0x8(%rbx), %r14
    // 10: 48 8b 07                      movq    (%rdi), %rax
    // 13: 85 c0                         testl   %eax, %eax
    // 15: 78 08                         js      0x1f <_JIT_ENTRY+0x1f>
    // 17: 48 ff c8                      decq    %rax
    // 1a: 48 89 07                      movq    %rax, (%rdi)
    // 1d: 74 0b                         je      0x2a <_JIT_ENTRY+0x2a>
    // 1f: 4c 89 73 f0                   movq    %r14, -0x10(%rbx)
    // 23: 58                            popq    %rax
    // 24: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x2a <_JIT_ENTRY+0x2a>
    // 0000000000000026:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 2a: ff 15 00 00 00 00             callq   *(%rip)                 # 0x30 <_JIT_ENTRY+0x30>
    // 000000000000002c:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 30: 4c 89 73 f0                   movq    %r14, -0x10(%rbx)
    // 34: 58                            popq    %rax
    // 35: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x3b <_JIT_ENTRY+0x3b>
    // 0000000000000037:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 35: 
    const unsigned char code_body[53] = {
        0x50, 0x48, 0x89, 0xeb, 0x48, 0x83, 0xc5, 0xf8,
        0x48, 0x8b, 0x7b, 0xf0, 0x4c, 0x8b, 0x73, 0xf8,
        0x48, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x08, 0x48,
        0xff, 0xc8, 0x48, 0x89, 0x07, 0x74, 0x0b, 0x4c,
        0x89, 0x73, 0xf0, 0x58, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x4c, 0x89, 0x73, 0xf0, 0x58,
    };
    // 0: 
    // 0: CONTINUE
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x26, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2c, (uintptr_t)data + 0x4);
}

void
emit__ERROR_POP_N(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_ERROR_POP_N.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 00                   movq    (%r13), %rax
    // 4: 8b 0d 00 00 00 00             movl    (%rip), %ecx            # 0xa <_JIT_ENTRY+0xa>
    // 0000000000000006:  R_X86_64_GOTPCRELX   _JIT_OPERAND-0x4
    // a: 48 8d 04 48                   leaq    (%rax,%rcx,2), %rax
    // e: 48 05 c8 00 00 00             addq    $0xc8, %rax
    // 14: 49 89 45 38                   movq    %rax, 0x38(%r13)
    // 18: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x1f <_JIT_ENTRY+0x1f>
    // 000000000000001b:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 1f: f7 d8                         negl    %eax
    // 21: 48 8d 04 c5 00 00 00 00       leaq    (,%rax,8), %rax
    // 29: 48 01 e8                      addq    %rbp, %rax
    // 2c: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x33 <_JIT_ENTRY+0x33>
    // 000000000000002f:  R_X86_64_REX_GOTPCRELX       _JIT_EXECUTOR-0x4
    // 33: 49 89 8c 24 10 01 00 00       movq    %rcx, 0x110(%r12)
    // 3b: 4c 29 e8                      subq    %r13, %rax
    // 3e: 48 83 c0 b8                   addq    $-0x48, %rax
    // 42: 48 c1 e8 03                   shrq    $0x3, %rax
    // 46: 41 89 45 40                   movl    %eax, 0x40(%r13)
    // 4a: 31 c0                         xorl    %eax, %eax
    // 4c: c3                            retq
    // 4d: 
    const unsigned char code_body[77] = {
        0x49, 0x8b, 0x45, 0x00, 0x8b, 0x0d, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8d, 0x04, 0x48, 0x48, 0x05,
        0xc8, 0x00, 0x00, 0x00, 0x49, 0x89, 0x45, 0x38,
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0xf7,
        0xd8, 0x48, 0x8d, 0x04, 0xc5, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x01, 0xe8, 0x48, 0x8b, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x89, 0x8c, 0x24, 0x10,
        0x01, 0x00, 0x00, 0x4c, 0x29, 0xe8, 0x48, 0x83,
        0xc0, 0xb8, 0x48, 0xc1, 0xe8, 0x03, 0x41, 0x89,
        0x45, 0x40, 0x31, 0xc0, 0xc3,
    };
    // 0: 
    // 0: OPERAND
    // 8: OPARG
    // 10: EXECUTOR
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)executor);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x6, (uintptr_t)data + -0x4);
    patch_32r(code + 0x1b, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x2f, (uintptr_t)data + 0xc);
}

void
emit__EXIT_INIT_CHECK(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_EXIT_INIT_CHECK.o:    file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 5: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xc <_JIT_ENTRY+0xc>
    // 0000000000000008:  R_X86_64_REX_GOTPCRELX       _Py_NoneStruct-0x4
    // c: 74 28                         je      0x36 <_JIT_ENTRY+0x36>
    // e: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x15 <_JIT_ENTRY+0x15>
    // 0000000000000011:  R_X86_64_REX_GOTPCRELX       PyExc_TypeError-0x4
    // 15: 48 8b 39                      movq    (%rcx), %rdi
    // 18: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 1c: 48 8b 50 18                   movq    0x18(%rax), %rdx
    // 20: 48 8d 35 00 00 00 00          leaq    (%rip), %rsi            # 0x27 <_JIT_ENTRY+0x27>
    // 0000000000000023:  R_X86_64_PC32        .L.str.15-0x4
    // 27: 31 c0                         xorl    %eax, %eax
    // 29: ff 15 00 00 00 00             callq   *(%rip)                 # 0x2f <_JIT_ENTRY+0x2f>
    // 000000000000002b:  R_X86_64_GOTPCRELX   PyErr_Format-0x4
    // 2f: 58                            popq    %rax
    // 30: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x36 <_JIT_ENTRY+0x36>
    // 0000000000000032:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 36: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 3a: 58                            popq    %rax
    // 3b: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x41 <_JIT_ENTRY+0x41>
    // 000000000000003d:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 3b: 
    const unsigned char code_body[59] = {
        0x50, 0x48, 0x8b, 0x45, 0xf8, 0x48, 0x3b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x74, 0x28, 0x48, 0x8b,
        0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x39,
        0x48, 0x8b, 0x40, 0x08, 0x48, 0x8b, 0x50, 0x18,
        0x48, 0x8d, 0x35, 0x00, 0x00, 0x00, 0x00, 0x31,
        0xc0, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x58,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83,
        0xc5, 0xf8, 0x58,
    };
    // 0: "__init__() should return None, not '%.200s'\x00"
    // 2c: 00 00 00 00
    // 30: &_Py_NoneStruct+0x0
    // 38: &PyExc_TypeError+0x0
    // 40: &PyErr_Format+0x0
    // 48: ERROR_TARGET
    const unsigned char data_body[80] = {
        0x5f, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x5f,
        0x28, 0x29, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c,
        0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
        0x20, 0x4e, 0x6f, 0x6e, 0x65, 0x2c, 0x20, 0x6e,
        0x6f, 0x74, 0x20, 0x27, 0x25, 0x2e, 0x32, 0x30,
        0x30, 0x73, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x30, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x38, (uintptr_t)&PyExc_TypeError);
    patch_64(data + 0x40, (uintptr_t)&PyErr_Format);
    patch_64(data + 0x48, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x8, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0x11, (uintptr_t)data + 0x34);
    patch_32r(code + 0x23, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2b, (uintptr_t)data + 0x3c);
    patch_x86_64_32rx(code + 0x32, (uintptr_t)data + 0x44);
}

void
emit__EXIT_TRACE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_EXIT_TRACE.o: file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 0f b7 15 00 00 00 00          movzwl  (%rip), %edx            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  R_X86_64_GOTPCREL    _JIT_EXIT_INDEX-0x4
    // 7: c1 e2 04                      shll    $0x4, %edx
    // a: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x11 <_JIT_ENTRY+0x11>
    // 000000000000000d:  R_X86_64_REX_GOTPCRELX       _JIT_EXECUTOR-0x4
    // 11: 48 8b 8c 10 88 00 00 00       movq    0x88(%rax,%rdx), %rcx
    // 19: 8b 31                         movl    (%rcx), %esi
    // 1b: ff c6                         incl    %esi
    // 1d: 74 0f                         je      0x2e <_JIT_ENTRY+0x2e>
    // 1f: 48 01 c2                      addq    %rax, %rdx
    // 22: 48 81 c2 88 00 00 00          addq    $0x88, %rdx
    // 29: 89 31                         movl    %esi, (%rcx)
    // 2b: 48 8b 0a                      movq    (%rdx), %rcx
    // 2e: 49 89 84 24 10 01 00 00       movq    %rax, 0x110(%r12)
    // 36: 48 8b 41 78                   movq    0x78(%rcx), %rax
    // 3a: ff e0                         jmpq    *%rax
    // 3c: 
    const unsigned char code_body[60] = {
        0x0f, 0xb7, 0x15, 0x00, 0x00, 0x00, 0x00, 0xc1,
        0xe2, 0x04, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x8c, 0x10, 0x88, 0x00, 0x00,
        0x00, 0x8b, 0x31, 0xff, 0xc6, 0x74, 0x0f, 0x48,
        0x01, 0xc2, 0x48, 0x81, 0xc2, 0x88, 0x00, 0x00,
        0x00, 0x89, 0x31, 0x48, 0x8b, 0x0a, 0x49, 0x89,
        0x84, 0x24, 0x10, 0x01, 0x00, 0x00, 0x48, 0x8b,
        0x41, 0x78, 0xff, 0xe0,
    };
    // 0: 
    // 0: EXIT_INDEX
    // 8: EXECUTOR
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->exit_index);
    patch_64(data + 0x8, (uintptr_t)executor);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xd, (uintptr_t)data + 0x4);
}

void
emit__EXPAND_METHOD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_EXPAND_METHOD.o:      file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 4c 89 e2                      movq    %r12, %rdx
    // 4: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // b: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
    // 10: 29 c1                         subl    %eax, %ecx
    // 12: f7 d0                         notl    %eax
    // 14: 4c 63 e0                      movslq  %eax, %r12
    // 17: 4c 63 f1                      movslq  %ecx, %r14
    // 1a: 4a 8b 7c f5 00                movq    (%rbp,%r14,8), %rdi
    // 1f: 4c 8b 7f 18                   movq    0x18(%rdi), %r15
    // 23: 41 8b 07                      movl    (%r15), %eax
    // 26: ff c0                         incl    %eax
    // 28: 74 03                         je      0x2d <_JIT_ENTRY+0x2d>
    // 2a: 41 89 07                      movl    %eax, (%r15)
    // 2d: 4e 89 7c e5 00                movq    %r15, (%rbp,%r12,8)
    // 32: 48 8b 5f 10                   movq    0x10(%rdi), %rbx
    // 36: 8b 03                         movl    (%rbx), %eax
    // 38: ff c0                         incl    %eax
    // 3a: 74 02                         je      0x3e <_JIT_ENTRY+0x3e>
    // 3c: 89 03                         movl    %eax, (%rbx)
    // 3e: 48 8b 07                      movq    (%rdi), %rax
    // 41: 85 c0                         testl   %eax, %eax
    // 43: 78 16                         js      0x5b <_JIT_ENTRY+0x5b>
    // 45: 48 ff c8                      decq    %rax
    // 48: 48 89 07                      movq    %rax, (%rdi)
    // 4b: 75 0e                         jne     0x5b <_JIT_ENTRY+0x5b>
    // 4d: 48 89 14 24                   movq    %rdx, (%rsp)
    // 51: ff 15 00 00 00 00             callq   *(%rip)                 # 0x57 <_JIT_ENTRY+0x57>
    // 0000000000000053:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 57: 48 8b 14 24                   movq    (%rsp), %rdx
    // 5b: 4a 89 5c f5 00                movq    %rbx, (%rbp,%r14,8)
    // 60: 4e 89 7c e5 00                movq    %r15, (%rbp,%r12,8)
    // 65: 49 89 d4                      movq    %rdx, %r12
    // 68: 58                            popq    %rax
    // 69: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x6f <_JIT_ENTRY+0x6f>
    // 000000000000006b:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 69: 
    const unsigned char code_body[105] = {
        0x50, 0x4c, 0x89, 0xe2, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff,
        0x29, 0xc1, 0xf7, 0xd0, 0x4c, 0x63, 0xe0, 0x4c,
        0x63, 0xf1, 0x4a, 0x8b, 0x7c, 0xf5, 0x00, 0x4c,
        0x8b, 0x7f, 0x18, 0x41, 0x8b, 0x07, 0xff, 0xc0,
        0x74, 0x03, 0x41, 0x89, 0x07, 0x4e, 0x89, 0x7c,
        0xe5, 0x00, 0x48, 0x8b, 0x5f, 0x10, 0x8b, 0x03,
        0xff, 0xc0, 0x74, 0x02, 0x89, 0x03, 0x48, 0x8b,
        0x07, 0x85, 0xc0, 0x78, 0x16, 0x48, 0xff, 0xc8,
        0x48, 0x89, 0x07, 0x75, 0x0e, 0x48, 0x89, 0x14,
        0x24, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x14, 0x24, 0x4a, 0x89, 0x5c, 0xf5, 0x00,
        0x4e, 0x89, 0x7c, 0xe5, 0x00, 0x49, 0x89, 0xd4,
        0x58,
    };
    // 0: 
    // 0: OPARG
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x53, (uintptr_t)data + 0x4);
}

void
emit__FATAL_ERROR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_FATAL_ERROR.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8d 3d 00 00 00 00          leaq    (%rip), %rdi            # 0x8 <_JIT_ENTRY+0x8>
    // 0000000000000004:  R_X86_64_PC32        .L__func__._JIT_ENTRY-0x4
    // 8: 48 8d 35 00 00 00 00          leaq    (%rip), %rsi            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  R_X86_64_PC32        .L.str.16-0x4
    // f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x15 <_JIT_ENTRY+0x15>
    // 0000000000000011:  R_X86_64_GOTPCRELX   _Py_FatalErrorFunc-0x4
    // 15: 
    const unsigned char code_body[21] = {
        0x50, 0x48, 0x8d, 0x3d, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8d, 0x35, 0x00, 0x00, 0x00, 0x00, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: '_JIT_ENTRY\x00Fatal error uop executed.\x00'
    // 25: 00 00 00
    // 28: &_Py_FatalErrorFunc+0x0
    const unsigned char data_body[48] = {
        0x5f, 0x4a, 0x49, 0x54, 0x5f, 0x45, 0x4e, 0x54,
        0x52, 0x59, 0x00, 0x46, 0x61, 0x74, 0x61, 0x6c,
        0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x75,
        0x6f, 0x70, 0x20, 0x65, 0x78, 0x65, 0x63, 0x75,
        0x74, 0x65, 0x64, 0x2e, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x28, (uintptr_t)&_Py_FatalErrorFunc);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x4, (uintptr_t)data + -0x4);
    patch_32r(code + 0xb, (uintptr_t)data + 0x7);
    patch_x86_64_32rx(code + 0x11, (uintptr_t)data + 0x24);
}

void
emit__FORMAT_SIMPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_FORMAT_SIMPLE.o:      file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 5: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // 9: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x10 <_JIT_ENTRY+0x10>
    // 000000000000000c:  R_X86_64_REX_GOTPCRELX       PyUnicode_Type-0x4
    // 10: 74 22                         je      0x34 <_JIT_ENTRY+0x34>
    // 12: 48 89 df                      movq    %rbx, %rdi
    // 15: 31 f6                         xorl    %esi, %esi
    // 17: ff 15 00 00 00 00             callq   *(%rip)                 # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  R_X86_64_GOTPCRELX   PyObject_Format-0x4
    // 1d: 48 8b 0b                      movq    (%rbx), %rcx
    // 20: 85 c9                         testl   %ecx, %ecx
    // 22: 78 08                         js      0x2c <_JIT_ENTRY+0x2c>
    // 24: 48 ff c9                      decq    %rcx
    // 27: 48 89 0b                      movq    %rcx, (%rbx)
    // 2a: 74 13                         je      0x3f <_JIT_ENTRY+0x3f>
    // 2c: 48 89 c3                      movq    %rax, %rbx
    // 2f: 48 85 c0                      testq   %rax, %rax
    // 32: 74 22                         je      0x56 <_JIT_ENTRY+0x56>
    // 34: 48 89 5d f8                   movq    %rbx, -0x8(%rbp)
    // 38: 58                            popq    %rax
    // 39: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x3f <_JIT_ENTRY+0x3f>
    // 000000000000003b:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 3f: 48 89 df                      movq    %rbx, %rdi
    // 42: 48 89 c3                      movq    %rax, %rbx
    // 45: ff 15 00 00 00 00             callq   *(%rip)                 # 0x4b <_JIT_ENTRY+0x4b>
    // 0000000000000047:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 4b: 48 89 d8                      movq    %rbx, %rax
    // 4e: 48 89 c3                      movq    %rax, %rbx
    // 51: 48 85 c0                      testq   %rax, %rax
    // 54: 75 de                         jne     0x34 <_JIT_ENTRY+0x34>
    // 56: 58                            popq    %rax
    // 57: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x5d <_JIT_ENTRY+0x5d>
    // 0000000000000059:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 5d: 
    const unsigned char code_body[93] = {
        0x50, 0x48, 0x8b, 0x5d, 0xf8, 0x48, 0x8b, 0x43,
        0x08, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x74, 0x22, 0x48, 0x89, 0xdf, 0x31, 0xf6, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x0b,
        0x85, 0xc9, 0x78, 0x08, 0x48, 0xff, 0xc9, 0x48,
        0x89, 0x0b, 0x74, 0x13, 0x48, 0x89, 0xc3, 0x48,
        0x85, 0xc0, 0x74, 0x22, 0x48, 0x89, 0x5d, 0xf8,
        0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0xdf, 0x48, 0x89, 0xc3, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x48, 0x89,
        0xc3, 0x48, 0x85, 0xc0, 0x75, 0xde, 0x58, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &PyUnicode_Type+0x0
    // 8: &PyObject_Format+0x0
    // 10: CONTINUE
    // 18: &_Py_Dealloc+0x0
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyUnicode_Type);
    patch_64(data + 0x8, (uintptr_t)&PyObject_Format);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xc, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x19, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3b, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x47, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x59, (uintptr_t)data + 0x1c);
}

void
emit__FORMAT_WITH_SPEC(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_FORMAT_WITH_SPEC.o:   file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 4c 8b 7d f0                   movq    -0x10(%rbp), %r15
    // 5: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 9: 4c 89 ff                      movq    %r15, %rdi
    // c: 4c 89 f6                      movq    %r14, %rsi
    // f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x15 <_JIT_ENTRY+0x15>
    // 0000000000000011:  R_X86_64_GOTPCRELX   PyObject_Format-0x4
    // 15: 48 89 c3                      movq    %rax, %rbx
    // 18: 49 8b 07                      movq    (%r15), %rax
    // 1b: 85 c0                         testl   %eax, %eax
    // 1d: 78 08                         js      0x27 <_JIT_ENTRY+0x27>
    // 1f: 48 ff c8                      decq    %rax
    // 22: 49 89 07                      movq    %rax, (%r15)
    // 25: 74 1a                         je      0x41 <_JIT_ENTRY+0x41>
    // 27: 49 8b 06                      movq    (%r14), %rax
    // 2a: 85 c0                         testl   %eax, %eax
    // 2c: 78 23                         js      0x51 <_JIT_ENTRY+0x51>
    // 2e: 48 ff c8                      decq    %rax
    // 31: 49 89 06                      movq    %rax, (%r14)
    // 34: 75 1b                         jne     0x51 <_JIT_ENTRY+0x51>
    // 36: 4c 89 f7                      movq    %r14, %rdi
    // 39: ff 15 00 00 00 00             callq   *(%rip)                 # 0x3f <_JIT_ENTRY+0x3f>
    // 000000000000003b:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 3f: eb 10                         jmp     0x51 <_JIT_ENTRY+0x51>
    // 41: 4c 89 ff                      movq    %r15, %rdi
    // 44: ff 15 00 00 00 00             callq   *(%rip)                 # 0x4a <_JIT_ENTRY+0x4a>
    // 0000000000000046:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 4a: 49 8b 06                      movq    (%r14), %rax
    // 4d: 85 c0                         testl   %eax, %eax
    // 4f: 79 dd                         jns     0x2e <_JIT_ENTRY+0x2e>
    // 51: 48 85 db                      testq   %rbx, %rbx
    // 54: 74 0f                         je      0x65 <_JIT_ENTRY+0x65>
    // 56: 48 89 5d f0                   movq    %rbx, -0x10(%rbp)
    // 5a: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 5e: 58                            popq    %rax
    // 5f: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x65 <_JIT_ENTRY+0x65>
    // 0000000000000061:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 65: 58                            popq    %rax
    // 66: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x6c <_JIT_ENTRY+0x6c>
    // 0000000000000068:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 6c: 
    const unsigned char code_body[108] = {
        0x50, 0x4c, 0x8b, 0x7d, 0xf0, 0x4c, 0x8b, 0x75,
        0xf8, 0x4c, 0x89, 0xff, 0x4c, 0x89, 0xf6, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc3,
        0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x08, 0x48,
        0xff, 0xc8, 0x49, 0x89, 0x07, 0x74, 0x1a, 0x49,
        0x8b, 0x06, 0x85, 0xc0, 0x78, 0x23, 0x48, 0xff,
        0xc8, 0x49, 0x89, 0x06, 0x75, 0x1b, 0x4c, 0x89,
        0xf7, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0xeb,
        0x10, 0x4c, 0x89, 0xff, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x79,
        0xdd, 0x48, 0x85, 0xdb, 0x74, 0x0f, 0x48, 0x89,
        0x5d, 0xf0, 0x48, 0x83, 0xc5, 0xf8, 0x58, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &PyObject_Format+0x0
    // 8: &_Py_Dealloc+0x0
    // 10: CONTINUE
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyObject_Format);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x11, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x3b, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x46, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x61, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x68, (uintptr_t)data + 0x14);
}

void
emit__FOR_ITER_GEN_FRAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_FOR_ITER_GEN_FRAME.o: file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 4: 48 8b 48 08                   movq    0x8(%rax), %rcx
    // 8: 48 3b 0d 00 00 00 00          cmpq    (%rip), %rcx            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  R_X86_64_REX_GOTPCRELX       PyGen_Type-0x4
    // f: 75 06                         jne     0x17 <_JIT_ENTRY+0x17>
    // 11: 80 78 43 00                   cmpb    $0x0, 0x43(%rax)
    // 15: 78 06                         js      0x1d <_JIT_ENTRY+0x1d>
    // 17: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 1d: 48 8d 48 48                   leaq    0x48(%rax), %rcx
    // 21: 48 63 90 88 00 00 00          movslq  0x88(%rax), %rdx
    // 28: 48 8b 35 00 00 00 00          movq    (%rip), %rsi            # 0x2f <_JIT_ENTRY+0x2f>
    // 000000000000002b:  R_X86_64_REX_GOTPCRELX       _Py_NoneStruct-0x4
    // 2f: 48 89 b4 d0 90 00 00 00       movq    %rsi, 0x90(%rax,%rdx,8)
    // 37: ff c2                         incl    %edx
    // 39: 89 90 88 00 00 00             movl    %edx, 0x88(%rax)
    // 3f: c6 40 43 00                   movb    $0x0, 0x43(%rax)
    // 43: 49 8b 54 24 78                movq    0x78(%r12), %rdx
    // 48: 48 89 50 30                   movq    %rdx, 0x30(%rax)
    // 4c: 48 83 c0 28                   addq    $0x28, %rax
    // 50: 49 89 44 24 78                movq    %rax, 0x78(%r12)
    // 55: 8b 05 00 00 00 00             movl    (%rip), %eax            # 0x5b <_JIT_ENTRY+0x5b>
    // 0000000000000057:  R_X86_64_GOTPCRELX   _JIT_OPARG-0x4
    // 5b: 83 c0 02                      addl    $0x2, %eax
    // 5e: 66 41 89 45 44                movw    %ax, 0x44(%r13)
    // 63: 48 89 4d 00                   movq    %rcx, (%rbp)
    // 67: 48 83 c5 08                   addq    $0x8, %rbp
    // 6b: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x71 <_JIT_ENTRY+0x71>
    // 000000000000006d:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 6b: 
    const unsigned char code_body[107] = {
        0x48, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x48, 0x08,
        0x48, 0x3b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x75,
        0x06, 0x80, 0x78, 0x43, 0x00, 0x78, 0x06, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x48,
        0x48, 0x48, 0x63, 0x90, 0x88, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x35, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0xb4, 0xd0, 0x90, 0x00, 0x00, 0x00, 0xff,
        0xc2, 0x89, 0x90, 0x88, 0x00, 0x00, 0x00, 0xc6,
        0x40, 0x43, 0x00, 0x49, 0x8b, 0x54, 0x24, 0x78,
        0x48, 0x89, 0x50, 0x30, 0x48, 0x83, 0xc0, 0x28,
        0x49, 0x89, 0x44, 0x24, 0x78, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x83, 0xc0, 0x02, 0x66, 0x41,
        0x89, 0x45, 0x44, 0x48, 0x89, 0x4d, 0x00, 0x48,
        0x83, 0xc5, 0x08,
    };
    // 0: 
    // 0: &PyGen_Type+0x0
    // 8: JUMP_TARGET
    // 10: &_Py_NoneStruct+0x0
    // 18: OPARG
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyGen_Type);
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x18, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x19, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x2b, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x57, (uintptr_t)data + 0x14);
}

void
emit__FOR_ITER_TIER_TWO(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_FOR_ITER_TIER_TWO.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 7d f8                   movq    -0x8(%rbp), %rdi
    // 5: 48 8b 47 08                   movq    0x8(%rdi), %rax
    // 9: ff 90 e0 00 00 00             callq   *0xe0(%rax)
    // f: 48 85 c0                      testq   %rax, %rax
    // 12: 74 0f                         je      0x23 <_JIT_ENTRY+0x23>
    // 14: 48 89 45 00                   movq    %rax, (%rbp)
    // 18: 48 83 c5 08                   addq    $0x8, %rbp
    // 1c: 58                            popq    %rax
    // 1d: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x23 <_JIT_ENTRY+0x23>
    // 000000000000001f:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 23: 49 8b 44 24 70                movq    0x70(%r12), %rax
    // 28: 48 85 c0                      testq   %rax, %rax
    // 2b: 74 37                         je      0x64 <_JIT_ENTRY+0x64>
    // 2d: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
    // 32: 74 30                         je      0x64 <_JIT_ENTRY+0x64>
    // 34: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x3b <_JIT_ENTRY+0x3b>
    // 0000000000000037:  R_X86_64_REX_GOTPCRELX       PyExc_StopIteration-0x4
    // 3b: 48 8b 30                      movq    (%rax), %rsi
    // 3e: 4c 89 e7                      movq    %r12, %rdi
    // 41: ff 15 00 00 00 00             callq   *(%rip)                 # 0x47 <_JIT_ENTRY+0x47>
    // 0000000000000043:  R_X86_64_GOTPCRELX   _PyErr_ExceptionMatches-0x4
    // 47: 85 c0                         testl   %eax, %eax
    // 49: 74 20                         je      0x6b <_JIT_ENTRY+0x6b>
    // 4b: 49 8b 55 38                   movq    0x38(%r13), %rdx
    // 4f: 4c 89 e7                      movq    %r12, %rdi
    // 52: 4c 89 ee                      movq    %r13, %rsi
    // 55: ff 15 00 00 00 00             callq   *(%rip)                 # 0x5b <_JIT_ENTRY+0x5b>
    // 0000000000000057:  R_X86_64_GOTPCRELX   _PyEval_MonitorRaise-0x4
    // 5b: 4c 89 e7                      movq    %r12, %rdi
    // 5e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x64 <_JIT_ENTRY+0x64>
    // 0000000000000060:  R_X86_64_GOTPCRELX   _PyErr_Clear-0x4
    // 64: 58                            popq    %rax
    // 65: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x6b <_JIT_ENTRY+0x6b>
    // 0000000000000067:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 6b: 58                            popq    %rax
    // 6c: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x72 <_JIT_ENTRY+0x72>
    // 000000000000006e:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 72: 
    const unsigned char code_body[114] = {
        0x50, 0x48, 0x8b, 0x7d, 0xf8, 0x48, 0x8b, 0x47,
        0x08, 0xff, 0x90, 0xe0, 0x00, 0x00, 0x00, 0x48,
        0x85, 0xc0, 0x74, 0x0f, 0x48, 0x89, 0x45, 0x00,
        0x48, 0x83, 0xc5, 0x08, 0x58, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x70,
        0x48, 0x85, 0xc0, 0x74, 0x37, 0x48, 0x83, 0x78,
        0x08, 0x00, 0x74, 0x30, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x4c, 0x89,
        0xe7, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x85,
        0xc0, 0x74, 0x20, 0x49, 0x8b, 0x55, 0x38, 0x4c,
        0x89, 0xe7, 0x4c, 0x89, 0xee, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x58, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x58, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: 
    // 0: CONTINUE
    // 8: &PyExc_StopIteration+0x0
    // 10: &_PyErr_ExceptionMatches+0x0
    // 18: &_PyEval_MonitorRaise+0x0
    // 20: &_PyErr_Clear+0x0
    // 28: JUMP_TARGET
    // 30: ERROR_TARGET
    const unsigned char data_body[56] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, (uintptr_t)&PyExc_StopIteration);
    patch_64(data + 0x10, (uintptr_t)&_PyErr_ExceptionMatches);
    patch_64(data + 0x18, (uintptr_t)&_PyEval_MonitorRaise);
    patch_64(data + 0x20, (uintptr_t)&_PyErr_Clear);
    patch_64(data + 0x28, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x30, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1f, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x37, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x43, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x57, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x60, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x67, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x6e, (uintptr_t)data + 0x2c);
}

void
emit__GET_AITER(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_GET_AITER.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 5: 49 8b 46 08                   movq    0x8(%r14), %rax
    // 9: 48 8b 48 50                   movq    0x50(%rax), %rcx
    // d: 48 85 c9                      testq   %rcx, %rcx
    // 10: 74 4c                         je      0x5e <_JIT_ENTRY+0x5e>
    // 12: 48 8b 49 08                   movq    0x8(%rcx), %rcx
    // 16: 48 85 c9                      testq   %rcx, %rcx
    // 19: 74 43                         je      0x5e <_JIT_ENTRY+0x5e>
    // 1b: 4c 89 f7                      movq    %r14, %rdi
    // 1e: ff d1                         callq   *%rcx
    // 20: 48 89 c3                      movq    %rax, %rbx
    // 23: 49 8b 06                      movq    (%r14), %rax
    // 26: 85 c0                         testl   %eax, %eax
    // 28: 78 0c                         js      0x36 <_JIT_ENTRY+0x36>
    // 2a: 48 ff c8                      decq    %rax
    // 2d: 49 89 06                      movq    %rax, (%r14)
    // 30: 0f 84 ad 00 00 00             je      0xe3 <_JIT_ENTRY+0xe3>
    // 36: 48 85 db                      testq   %rbx, %rbx
    // 39: 0f 84 b6 00 00 00             je      0xf5 <_JIT_ENTRY+0xf5>
    // 3f: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // 43: 48 8b 48 50                   movq    0x50(%rax), %rcx
    // 47: 48 85 c9                      testq   %rcx, %rcx
    // 4a: 74 48                         je      0x94 <_JIT_ENTRY+0x94>
    // 4c: 48 83 79 10 00                cmpq    $0x0, 0x10(%rcx)
    // 51: 74 41                         je      0x94 <_JIT_ENTRY+0x94>
    // 53: 48 89 5d f8                   movq    %rbx, -0x8(%rbp)
    // 57: 58                            popq    %rax
    // 58: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x5e <_JIT_ENTRY+0x5e>
    // 000000000000005a:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 5e: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x65 <_JIT_ENTRY+0x65>
    // 0000000000000061:  R_X86_64_REX_GOTPCRELX       PyExc_TypeError-0x4
    // 65: 48 8b 31                      movq    (%rcx), %rsi
    // 68: 48 8b 48 18                   movq    0x18(%rax), %rcx
    // 6c: 48 8d 15 00 00 00 00          leaq    (%rip), %rdx            # 0x73 <_JIT_ENTRY+0x73>
    // 000000000000006f:  R_X86_64_PC32        .L.str.1-0x4
    // 73: 4c 89 e7                      movq    %r12, %rdi
    // 76: 31 c0                         xorl    %eax, %eax
    // 78: ff 15 00 00 00 00             callq   *(%rip)                 # 0x7e <_JIT_ENTRY+0x7e>
    // 000000000000007a:  R_X86_64_GOTPCRELX   _PyErr_Format-0x4
    // 7e: 49 8b 06                      movq    (%r14), %rax
    // 81: 85 c0                         testl   %eax, %eax
    // 83: 78 08                         js      0x8d <_JIT_ENTRY+0x8d>
    // 85: 48 ff c8                      decq    %rax
    // 88: 49 89 06                      movq    %rax, (%r14)
    // 8b: 74 46                         je      0xd3 <_JIT_ENTRY+0xd3>
    // 8d: 58                            popq    %rax
    // 8e: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x94 <_JIT_ENTRY+0x94>
    // 0000000000000090:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 94: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x9b <_JIT_ENTRY+0x9b>
    // 0000000000000097:  R_X86_64_REX_GOTPCRELX       PyExc_TypeError-0x4
    // 9b: 48 8b 31                      movq    (%rcx), %rsi
    // 9e: 48 8b 48 18                   movq    0x18(%rax), %rcx
    // a2: 48 8d 15 00 00 00 00          leaq    (%rip), %rdx            # 0xa9 <_JIT_ENTRY+0xa9>
    // 00000000000000a5:  R_X86_64_PC32        .L.str.2-0x4
    // a9: 4c 89 e7                      movq    %r12, %rdi
    // ac: 31 c0                         xorl    %eax, %eax
    // ae: ff 15 00 00 00 00             callq   *(%rip)                 # 0xb4 <_JIT_ENTRY+0xb4>
    // 00000000000000b0:  R_X86_64_GOTPCRELX   _PyErr_Format-0x4
    // b4: 48 8b 03                      movq    (%rbx), %rax
    // b7: 85 c0                         testl   %eax, %eax
    // b9: 78 11                         js      0xcc <_JIT_ENTRY+0xcc>
    // bb: 48 ff c8                      decq    %rax
    // be: 48 89 03                      movq    %rax, (%rbx)
    // c1: 75 09                         jne     0xcc <_JIT_ENTRY+0xcc>
    // c3: 48 89 df                      movq    %rbx, %rdi
    // c6: ff 15 00 00 00 00             callq   *(%rip)                 # 0xcc <_JIT_ENTRY+0xcc>
    // 00000000000000c8:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // cc: 58                            popq    %rax
    // cd: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xd3 <_JIT_ENTRY+0xd3>
    // 00000000000000cf:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // d3: 4c 89 f7                      movq    %r14, %rdi
    // d6: ff 15 00 00 00 00             callq   *(%rip)                 # 0xdc <_JIT_ENTRY+0xdc>
    // 00000000000000d8:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // dc: 58                            popq    %rax
    // dd: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xe3 <_JIT_ENTRY+0xe3>
    // 00000000000000df:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // e3: 4c 89 f7                      movq    %r14, %rdi
    // e6: ff 15 00 00 00 00             callq   *(%rip)                 # 0xec <_JIT_ENTRY+0xec>
    // 00000000000000e8:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // ec: 48 85 db                      testq   %rbx, %rbx
    // ef: 0f 85 4a ff ff ff             jne     0x3f <_JIT_ENTRY+0x3f>
    // f5: 58                            popq    %rax
    // f6: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xfc <_JIT_ENTRY+0xfc>
    // 00000000000000f8:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // fc: 
    const unsigned char code_body[252] = {
        0x50, 0x4c, 0x8b, 0x75, 0xf8, 0x49, 0x8b, 0x46,
        0x08, 0x48, 0x8b, 0x48, 0x50, 0x48, 0x85, 0xc9,
        0x74, 0x4c, 0x48, 0x8b, 0x49, 0x08, 0x48, 0x85,
        0xc9, 0x74, 0x43, 0x4c, 0x89, 0xf7, 0xff, 0xd1,
        0x48, 0x89, 0xc3, 0x49, 0x8b, 0x06, 0x85, 0xc0,
        0x78, 0x0c, 0x48, 0xff, 0xc8, 0x49, 0x89, 0x06,
        0x0f, 0x84, 0xad, 0x00, 0x00, 0x00, 0x48, 0x85,
        0xdb, 0x0f, 0x84, 0xb6, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x43, 0x08, 0x48, 0x8b, 0x48, 0x50, 0x48,
        0x85, 0xc9, 0x74, 0x48, 0x48, 0x83, 0x79, 0x10,
        0x00, 0x74, 0x41, 0x48, 0x89, 0x5d, 0xf8, 0x58,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x31,
        0x48, 0x8b, 0x48, 0x18, 0x48, 0x8d, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xc0,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b,
        0x06, 0x85, 0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8,
        0x49, 0x89, 0x06, 0x74, 0x46, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x31, 0x48, 0x8b,
        0x48, 0x18, 0x48, 0x8d, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x4c, 0x89, 0xe7, 0x31, 0xc0, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x03, 0x85,
        0xc0, 0x78, 0x11, 0x48, 0xff, 0xc8, 0x48, 0x89,
        0x03, 0x75, 0x09, 0x48, 0x89, 0xdf, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x58, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x58, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xdb, 0x0f,
        0x85, 0x4a, 0xff, 0xff, 0xff, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: "'async for' requires an object with __aiter__ method, got %.100s\x00'async for' received an object from __aiter__ that does not implement __anext__: %.100s\x00"
    // 99: 00 00 00 00 00 00 00
    // a0: CONTINUE
    // a8: &PyExc_TypeError+0x0
    // b0: &_PyErr_Format+0x0
    // b8: ERROR_TARGET
    // c0: &_Py_Dealloc+0x0
    const unsigned char data_body[200] = {
        0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66,
        0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75,
        0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20,
        0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x77,
        0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f, 0x61, 0x69,
        0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x6d, 0x65,
        0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20, 0x67, 0x6f,
        0x74, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73,
        0x00, 0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20,
        0x66, 0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x63,
        0x65, 0x69, 0x76, 0x65, 0x64, 0x20, 0x61, 0x6e,
        0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20,
        0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f, 0x5f, 0x61,
        0x69, 0x74, 0x65, 0x72, 0x5f, 0x5f, 0x20, 0x74,
        0x68, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73,
        0x20, 0x6e, 0x6f, 0x74, 0x20, 0x69, 0x6d, 0x70,
        0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x5f,
        0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f,
        0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0xa0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0xa8, (uintptr_t)&PyExc_TypeError);
    patch_64(data + 0xb0, (uintptr_t)&_PyErr_Format);
    patch_64(data + 0xb8, instruction_starts[instruction->error_target]);
    patch_64(data + 0xc0, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x5a, (uintptr_t)data + 0x9c);
    patch_x86_64_32rx(code + 0x61, (uintptr_t)data + 0xa4);
    patch_32r(code + 0x6f, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x7a, (uintptr_t)data + 0xac);
    patch_x86_64_32rx(code + 0x90, (uintptr_t)data + 0xb4);
    patch_x86_64_32rx(code + 0x97, (uintptr_t)data + 0xa4);
    patch_32r(code + 0xa5, (uintptr_t)data + 0x3d);
    patch_x86_64_32rx(code + 0xb0, (uintptr_t)data + 0xac);
    patch_x86_64_32rx(code + 0xc8, (uintptr_t)data + 0xbc);
    patch_x86_64_32rx(code + 0xcf, (uintptr_t)data + 0xb4);
    patch_x86_64_32rx(code + 0xd8, (uintptr_t)data + 0xbc);
    patch_x86_64_32rx(code + 0xdf, (uintptr_t)data + 0xb4);
    patch_x86_64_32rx(code + 0xe8, (uintptr_t)data + 0xbc);
    patch_x86_64_32rx(code + 0xf8, (uintptr_t)data + 0xb4);
}

void
emit__GET_ANEXT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_GET_ANEXT.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 7d f8                   movq    -0x8(%rbp), %rdi
    // 5: 48 8b 47 08                   movq    0x8(%rdi), %rax
    // 9: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x10 <_JIT_ENTRY+0x10>
    // 000000000000000c:  R_X86_64_REX_GOTPCRELX       PyAsyncGen_Type-0x4
    // 10: 0f 84 82 00 00 00             je      0x98 <_JIT_ENTRY+0x98>
    // 16: 48 8b 48 50                   movq    0x50(%rax), %rcx
    // 1a: 48 85 c9                      testq   %rcx, %rcx
    // 1d: 74 52                         je      0x71 <_JIT_ENTRY+0x71>
    // 1f: 48 8b 49 10                   movq    0x10(%rcx), %rcx
    // 23: 48 85 c9                      testq   %rcx, %rcx
    // 26: 74 49                         je      0x71 <_JIT_ENTRY+0x71>
    // 28: ff d1                         callq   *%rcx
    // 2a: 48 85 c0                      testq   %rax, %rax
    // 2d: 0f 84 c0 00 00 00             je      0xf3 <_JIT_ENTRY+0xf3>
    // 33: 48 89 c3                      movq    %rax, %rbx
    // 36: 48 89 c7                      movq    %rax, %rdi
    // 39: ff 15 00 00 00 00             callq   *(%rip)                 # 0x3f <_JIT_ENTRY+0x3f>
    // 000000000000003b:  R_X86_64_GOTPCRELX   _PyCoro_GetAwaitableIter-0x4
    // 3f: 48 85 c0                      testq   %rax, %rax
    // 42: 74 76                         je      0xba <_JIT_ENTRY+0xba>
    // 44: 48 8b 0b                      movq    (%rbx), %rcx
    // 47: 85 c9                         testl   %ecx, %ecx
    // 49: 78 60                         js      0xab <_JIT_ENTRY+0xab>
    // 4b: 48 ff c9                      decq    %rcx
    // 4e: 48 89 0b                      movq    %rcx, (%rbx)
    // 51: 75 58                         jne     0xab <_JIT_ENTRY+0xab>
    // 53: 48 89 df                      movq    %rbx, %rdi
    // 56: 48 89 c3                      movq    %rax, %rbx
    // 59: ff 15 00 00 00 00             callq   *(%rip)                 # 0x5f <_JIT_ENTRY+0x5f>
    // 000000000000005b:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 5f: 48 89 d8                      movq    %rbx, %rax
    // 62: 48 89 45 00                   movq    %rax, (%rbp)
    // 66: 48 83 c5 08                   addq    $0x8, %rbp
    // 6a: 58                            popq    %rax
    // 6b: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x71 <_JIT_ENTRY+0x71>
    // 000000000000006d:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 71: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x78 <_JIT_ENTRY+0x78>
    // 0000000000000074:  R_X86_64_REX_GOTPCRELX       PyExc_TypeError-0x4
    // 78: 48 8b 31                      movq    (%rcx), %rsi
    // 7b: 48 8b 48 18                   movq    0x18(%rax), %rcx
    // 7f: 48 8d 15 00 00 00 00          leaq    (%rip), %rdx            # 0x86 <_JIT_ENTRY+0x86>
    // 0000000000000082:  R_X86_64_PC32        .L.str.3-0x4
    // 86: 4c 89 e7                      movq    %r12, %rdi
    // 89: 31 c0                         xorl    %eax, %eax
    // 8b: ff 15 00 00 00 00             callq   *(%rip)                 # 0x91 <_JIT_ENTRY+0x91>
    // 000000000000008d:  R_X86_64_GOTPCRELX   _PyErr_Format-0x4
    // 91: 58                            popq    %rax
    // 92: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x98 <_JIT_ENTRY+0x98>
    // 0000000000000094:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 98: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x9f <_JIT_ENTRY+0x9f>
    // 000000000000009b:  R_X86_64_REX_GOTPCRELX       PyAsyncGen_Type-0x4
    // 9f: 48 8b 40 50                   movq    0x50(%rax), %rax
    // a3: ff 50 10                      callq   *0x10(%rax)
    // a6: 48 85 c0                      testq   %rax, %rax
    // a9: 74 48                         je      0xf3 <_JIT_ENTRY+0xf3>
    // ab: 48 89 45 00                   movq    %rax, (%rbp)
    // af: 48 83 c5 08                   addq    $0x8, %rbp
    // b3: 58                            popq    %rax
    // b4: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xba <_JIT_ENTRY+0xba>
    // 00000000000000b6:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // ba: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0xc1 <_JIT_ENTRY+0xc1>
    // 00000000000000bd:  R_X86_64_REX_GOTPCRELX       PyExc_TypeError-0x4
    // c1: 48 8b 38                      movq    (%rax), %rdi
    // c4: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // c8: 48 8b 50 18                   movq    0x18(%rax), %rdx
    // cc: 48 8d 35 00 00 00 00          leaq    (%rip), %rsi            # 0xd3 <_JIT_ENTRY+0xd3>
    // 00000000000000cf:  R_X86_64_PC32        .L.str.4-0x4
    // d3: 31 c0                         xorl    %eax, %eax
    // d5: ff 15 00 00 00 00             callq   *(%rip)                 # 0xdb <_JIT_ENTRY+0xdb>
    // 00000000000000d7:  R_X86_64_GOTPCRELX   _PyErr_FormatFromCause-0x4
    // db: 48 8b 03                      movq    (%rbx), %rax
    // de: 85 c0                         testl   %eax, %eax
    // e0: 78 11                         js      0xf3 <_JIT_ENTRY+0xf3>
    // e2: 48 ff c8                      decq    %rax
    // e5: 48 89 03                      movq    %rax, (%rbx)
    // e8: 75 09                         jne     0xf3 <_JIT_ENTRY+0xf3>
    // ea: 48 89 df                      movq    %rbx, %rdi
    // ed: ff 15 00 00 00 00             callq   *(%rip)                 # 0xf3 <_JIT_ENTRY+0xf3>
    // 00000000000000ef:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // f3: 58                            popq    %rax
    // f4: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xfa <_JIT_ENTRY+0xfa>
    // 00000000000000f6:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // fa: 
    const unsigned char code_body[250] = {
        0x50, 0x48, 0x8b, 0x7d, 0xf8, 0x48, 0x8b, 0x47,
        0x08, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0x84, 0x82, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x48, 0x50, 0x48, 0x85, 0xc9, 0x74, 0x52, 0x48,
        0x8b, 0x49, 0x10, 0x48, 0x85, 0xc9, 0x74, 0x49,
        0xff, 0xd1, 0x48, 0x85, 0xc0, 0x0f, 0x84, 0xc0,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xc3, 0x48, 0x89,
        0xc7, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x85, 0xc0, 0x74, 0x76, 0x48, 0x8b, 0x0b, 0x85,
        0xc9, 0x78, 0x60, 0x48, 0xff, 0xc9, 0x48, 0x89,
        0x0b, 0x75, 0x58, 0x48, 0x89, 0xdf, 0x48, 0x89,
        0xc3, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0xd8, 0x48, 0x89, 0x45, 0x00, 0x48, 0x83,
        0xc5, 0x08, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x31, 0x48, 0x8b, 0x48, 0x18, 0x48,
        0x8d, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0xe7, 0x31, 0xc0, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x40, 0x50, 0xff, 0x50, 0x10, 0x48, 0x85,
        0xc0, 0x74, 0x48, 0x48, 0x89, 0x45, 0x00, 0x48,
        0x83, 0xc5, 0x08, 0x58, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x38, 0x48, 0x8b, 0x43, 0x08,
        0x48, 0x8b, 0x50, 0x18, 0x48, 0x8d, 0x35, 0x00,
        0x00, 0x00, 0x00, 0x31, 0xc0, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x03, 0x85, 0xc0,
        0x78, 0x11, 0x48, 0xff, 0xc8, 0x48, 0x89, 0x03,
        0x75, 0x09, 0x48, 0x89, 0xdf, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x58, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: "'async for' requires an iterator with __anext__ method, got %.100s\x00'async for' received an invalid object from __anext__: %.100s\x00"
    // 81: 00 00 00 00 00 00 00
    // 88: &PyAsyncGen_Type+0x0
    // 90: &_PyCoro_GetAwaitableIter+0x0
    // 98: &_Py_Dealloc+0x0
    // a0: CONTINUE
    // a8: &PyExc_TypeError+0x0
    // b0: &_PyErr_Format+0x0
    // b8: ERROR_TARGET
    // c0: &_PyErr_FormatFromCause+0x0
    const unsigned char data_body[200] = {
        0x27, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x20, 0x66,
        0x6f, 0x72, 0x27, 0x20, 0x72, 0x65, 0x71, 0x75,
        0x69, 0x72, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x20,
        0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
        0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x5f, 0x5f,
        0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f, 0x20,
        0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2c, 0x20,
        0x67, 0x6f, 0x74, 0x20, 0x25, 0x2e, 0x31, 0x30,
        0x30, 0x73, 0x00, 0x27, 0x61, 0x73, 0x79, 0x6e,
        0x63, 0x20, 0x66, 0x6f, 0x72, 0x27, 0x20, 0x72,
        0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x20,
        0x61, 0x6e, 0x20, 0x69, 0x6e, 0x76, 0x61, 0x6c,
        0x69, 0x64, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63,
        0x74, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x5f,
        0x5f, 0x61, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x5f,
        0x3a, 0x20, 0x25, 0x2e, 0x31, 0x30, 0x30, 0x73,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x88, (uintptr_t)&PyAsyncGen_Type);
    patch_64(data + 0x90, (uintptr_t)&_PyCoro_GetAwaitableIter);
    patch_64(data + 0x98, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0xa0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0xa8, (uintptr_t)&PyExc_TypeError);
    patch_64(data + 0xb0, (uintptr_t)&_PyErr_Format);
    patch_64(data + 0xb8, instruction_starts[instruction->error_target]);
    patch_64(data + 0xc0, (uintptr_t)&_PyErr_FormatFromCause);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xc, (uintptr_t)data + 0x84);
    patch_x86_64_32rx(code + 0x3b, (uintptr_t)data + 0x8c);
    patch_x86_64_32rx(code + 0x5b, (uintptr_t)data + 0x94);
    patch_x86_64_32rx(code + 0x6d, (uintptr_t)data + 0x9c);
    patch_x86_64_32rx(code + 0x74, (uintptr_t)data + 0xa4);
    patch_32r(code + 0x82, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x8d, (uintptr_t)data + 0xac);
    patch_x86_64_32rx(code + 0x94, (uintptr_t)data + 0xb4);
    patch_x86_64_32rx(code + 0x9b, (uintptr_t)data + 0x84);
    patch_x86_64_32rx(code + 0xb6, (uintptr_t)data + 0x9c);
    patch_x86_64_32rx(code + 0xbd, (uintptr_t)data + 0xa4);
    patch_32r(code + 0xcf, (uintptr_t)data + 0x3f);
    patch_x86_64_32rx(code + 0xd7, (uintptr_t)data + 0xbc);
    patch_x86_64_32rx(code + 0xef, (uintptr_t)data + 0x94);
    patch_x86_64_32rx(code + 0xf6, (uintptr_t)data + 0xb4);
}

void
emit__GET_AWAITABLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_GET_AWAITABLE.o:      file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 5: 4c 89 f7                      movq    %r14, %rdi
    // 8: ff 15 00 00 00 00             callq   *(%rip)                 # 0xe <_JIT_ENTRY+0xe>
    // 000000000000000a:  R_X86_64_GOTPCRELX   _PyCoro_GetAwaitableIter-0x4
    // e: 48 89 c3                      movq    %rax, %rbx
    // 11: 48 85 c0                      testq   %rax, %rax
    // 14: 74 09                         je      0x1f <_JIT_ENTRY+0x1f>
    // 16: 49 8b 06                      movq    (%r14), %rax
    // 19: 85 c0                         testl   %eax, %eax
    // 1b: 79 1d                         jns     0x3a <_JIT_ENTRY+0x3a>
    // 1d: eb 27                         jmp     0x46 <_JIT_ENTRY+0x46>
    // 1f: 0f b7 15 00 00 00 00          movzwl  (%rip), %edx            # 0x26 <_JIT_ENTRY+0x26>
    // 0000000000000022:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 26: 49 8b 76 08                   movq    0x8(%r14), %rsi
    // 2a: 4c 89 e7                      movq    %r12, %rdi
    // 2d: ff 15 00 00 00 00             callq   *(%rip)                 # 0x33 <_JIT_ENTRY+0x33>
    // 000000000000002f:  R_X86_64_GOTPCRELX   _PyEval_FormatAwaitableError-0x4
    // 33: 49 8b 06                      movq    (%r14), %rax
    // 36: 85 c0                         testl   %eax, %eax
    // 38: 78 0c                         js      0x46 <_JIT_ENTRY+0x46>
    // 3a: 48 ff c8                      decq    %rax
    // 3d: 49 89 06                      movq    %rax, (%r14)
    // 40: 0f 84 80 00 00 00             je      0xc6 <_JIT_ENTRY+0xc6>
    // 46: 48 85 db                      testq   %rbx, %rbx
    // 49: 0f 84 89 00 00 00             je      0xd8 <_JIT_ENTRY+0xd8>
    // 4f: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // 53: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x5a <_JIT_ENTRY+0x5a>
    // 0000000000000056:  R_X86_64_REX_GOTPCRELX       PyCoro_Type-0x4
    // 5a: 74 0b                         je      0x67 <_JIT_ENTRY+0x67>
    // 5c: 48 89 5d f8                   movq    %rbx, -0x8(%rbp)
    // 60: 58                            popq    %rax
    // 61: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x67 <_JIT_ENTRY+0x67>
    // 0000000000000063:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 67: 48 89 df                      movq    %rbx, %rdi
    // 6a: ff 15 00 00 00 00             callq   *(%rip)                 # 0x70 <_JIT_ENTRY+0x70>
    // 000000000000006c:  R_X86_64_GOTPCRELX   _PyGen_yf-0x4
    // 70: 48 85 c0                      testq   %rax, %rax
    // 73: 74 e7                         je      0x5c <_JIT_ENTRY+0x5c>
    // 75: 48 8b 08                      movq    (%rax), %rcx
    // 78: 85 c9                         testl   %ecx, %ecx
    // 7a: 78 11                         js      0x8d <_JIT_ENTRY+0x8d>
    // 7c: 48 ff c9                      decq    %rcx
    // 7f: 48 89 08                      movq    %rcx, (%rax)
    // 82: 75 09                         jne     0x8d <_JIT_ENTRY+0x8d>
    // 84: 48 89 c7                      movq    %rax, %rdi
    // 87: ff 15 00 00 00 00             callq   *(%rip)                 # 0x8d <_JIT_ENTRY+0x8d>
    // 0000000000000089:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 8d: 48 8b 03                      movq    (%rbx), %rax
    // 90: 85 c0                         testl   %eax, %eax
    // 92: 78 11                         js      0xa5 <_JIT_ENTRY+0xa5>
    // 94: 48 ff c8                      decq    %rax
    // 97: 48 89 03                      movq    %rax, (%rbx)
    // 9a: 75 09                         jne     0xa5 <_JIT_ENTRY+0xa5>
    // 9c: 48 89 df                      movq    %rbx, %rdi
    // 9f: ff 15 00 00 00 00             callq   *(%rip)                 # 0xa5 <_JIT_ENTRY+0xa5>
    // 00000000000000a1:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // a5: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0xac <_JIT_ENTRY+0xac>
    // 00000000000000a8:  R_X86_64_REX_GOTPCRELX       PyExc_RuntimeError-0x4
    // ac: 48 8b 30                      movq    (%rax), %rsi
    // af: 48 8d 15 00 00 00 00          leaq    (%rip), %rdx            # 0xb6 <_JIT_ENTRY+0xb6>
    // 00000000000000b2:  R_X86_64_PC32        .L.str.5-0x4
    // b6: 4c 89 e7                      movq    %r12, %rdi
    // b9: ff 15 00 00 00 00             callq   *(%rip)                 # 0xbf <_JIT_ENTRY+0xbf>
    // 00000000000000bb:  R_X86_64_GOTPCRELX   _PyErr_SetString-0x4
    // bf: 58                            popq    %rax
    // c0: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xc6 <_JIT_ENTRY+0xc6>
    // 00000000000000c2:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // c6: 4c 89 f7                      movq    %r14, %rdi
    // c9: ff 15 00 00 00 00             callq   *(%rip)                 # 0xcf <_JIT_ENTRY+0xcf>
    // 00000000000000cb:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // cf: 48 85 db                      testq   %rbx, %rbx
    // d2: 0f 85 77 ff ff ff             jne     0x4f <_JIT_ENTRY+0x4f>
    // d8: 58                            popq    %rax
    // d9: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xdf <_JIT_ENTRY+0xdf>
    // 00000000000000db:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // df: 
    const unsigned char code_body[223] = {
        0x50, 0x4c, 0x8b, 0x75, 0xf8, 0x4c, 0x89, 0xf7,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89,
        0xc3, 0x48, 0x85, 0xc0, 0x74, 0x09, 0x49, 0x8b,
        0x06, 0x85, 0xc0, 0x79, 0x1d, 0xeb, 0x27, 0x0f,
        0xb7, 0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b,
        0x76, 0x08, 0x4c, 0x89, 0xe7, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x8b, 0x06, 0x85, 0xc0,
        0x78, 0x0c, 0x48, 0xff, 0xc8, 0x49, 0x89, 0x06,
        0x0f, 0x84, 0x80, 0x00, 0x00, 0x00, 0x48, 0x85,
        0xdb, 0x0f, 0x84, 0x89, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x43, 0x08, 0x48, 0x3b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0x74, 0x0b, 0x48, 0x89, 0x5d, 0xf8,
        0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0xdf, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x85, 0xc0, 0x74, 0xe7, 0x48, 0x8b, 0x08,
        0x85, 0xc9, 0x78, 0x11, 0x48, 0xff, 0xc9, 0x48,
        0x89, 0x08, 0x75, 0x09, 0x48, 0x89, 0xc7, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x03,
        0x85, 0xc0, 0x78, 0x11, 0x48, 0xff, 0xc8, 0x48,
        0x89, 0x03, 0x75, 0x09, 0x48, 0x89, 0xdf, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48,
        0x8d, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0xe7, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x58,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0xf7, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x85, 0xdb, 0x0f, 0x85, 0x77, 0xff, 0xff, 0xff,
        0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 'coroutine is being awaited already\x00'
    // 23: 00 00 00 00 00
    // 28: &_PyCoro_GetAwaitableIter+0x0
    // 30: OPARG
    // 38: &_PyEval_FormatAwaitableError+0x0
    // 40: &PyCoro_Type+0x0
    // 48: CONTINUE
    // 50: &_PyGen_yf+0x0
    // 58: &_Py_Dealloc+0x0
    // 60: &PyExc_RuntimeError+0x0
    // 68: &_PyErr_SetString+0x0
    // 70: ERROR_TARGET
    const unsigned char data_body[120] = {
        0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
        0x65, 0x20, 0x69, 0x73, 0x20, 0x62, 0x65, 0x69,
        0x6e, 0x67, 0x20, 0x61, 0x77, 0x61, 0x69, 0x74,
        0x65, 0x64, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61,
        0x64, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x28, (uintptr_t)&_PyCoro_GetAwaitableIter);
    patch_64(data + 0x30, instruction->oparg);
    patch_64(data + 0x38, (uintptr_t)&_PyEval_FormatAwaitableError);
    patch_64(data + 0x40, (uintptr_t)&PyCoro_Type);
    patch_64(data + 0x48, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x50, (uintptr_t)&_PyGen_yf);
    patch_64(data + 0x58, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x60, (uintptr_t)&PyExc_RuntimeError);
    patch_64(data + 0x68, (uintptr_t)&_PyErr_SetString);
    patch_64(data + 0x70, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xa, (uintptr_t)data + 0x24);
    patch_32r(code + 0x22, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0x2f, (uintptr_t)data + 0x34);
    patch_x86_64_32rx(code + 0x56, (uintptr_t)data + 0x3c);
    patch_x86_64_32rx(code + 0x63, (uintptr_t)data + 0x44);
    patch_x86_64_32rx(code + 0x6c, (uintptr_t)data + 0x4c);
    patch_x86_64_32rx(code + 0x89, (uintptr_t)data + 0x54);
    patch_x86_64_32rx(code + 0xa1, (uintptr_t)data + 0x54);
    patch_x86_64_32rx(code + 0xa8, (uintptr_t)data + 0x5c);
    patch_32r(code + 0xb2, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xbb, (uintptr_t)data + 0x64);
    patch_x86_64_32rx(code + 0xc2, (uintptr_t)data + 0x6c);
    patch_x86_64_32rx(code + 0xcb, (uintptr_t)data + 0x54);
    patch_x86_64_32rx(code + 0xdb, (uintptr_t)data + 0x6c);
}

void
emit__GET_ITER(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_GET_ITER.o:   file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 5: 48 89 df                      movq    %rbx, %rdi
    // 8: ff 15 00 00 00 00             callq   *(%rip)                 # 0xe <_JIT_ENTRY+0xe>
    // 000000000000000a:  R_X86_64_GOTPCRELX   PyObject_GetIter-0x4
    // e: 48 8b 0b                      movq    (%rbx), %rcx
    // 11: 85 c9                         testl   %ecx, %ecx
    // 13: 78 08                         js      0x1d <_JIT_ENTRY+0x1d>
    // 15: 48 ff c9                      decq    %rcx
    // 18: 48 89 0b                      movq    %rcx, (%rbx)
    // 1b: 74 10                         je      0x2d <_JIT_ENTRY+0x2d>
    // 1d: 48 85 c0                      testq   %rax, %rax
    // 20: 74 1f                         je      0x41 <_JIT_ENTRY+0x41>
    // 22: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // 26: 58                            popq    %rax
    // 27: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x2d <_JIT_ENTRY+0x2d>
    // 0000000000000029:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 2d: 48 89 df                      movq    %rbx, %rdi
    // 30: 48 89 c3                      movq    %rax, %rbx
    // 33: ff 15 00 00 00 00             callq   *(%rip)                 # 0x39 <_JIT_ENTRY+0x39>
    // 0000000000000035:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 39: 48 89 d8                      movq    %rbx, %rax
    // 3c: 48 85 c0                      testq   %rax, %rax
    // 3f: 75 e1                         jne     0x22 <_JIT_ENTRY+0x22>
    // 41: 58                            popq    %rax
    // 42: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x48 <_JIT_ENTRY+0x48>
    // 0000000000000044:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 48: 
    const unsigned char code_body[72] = {
        0x50, 0x48, 0x8b, 0x5d, 0xf8, 0x48, 0x89, 0xdf,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x0b, 0x85, 0xc9, 0x78, 0x08, 0x48, 0xff, 0xc9,
        0x48, 0x89, 0x0b, 0x74, 0x10, 0x48, 0x85, 0xc0,
        0x74, 0x1f, 0x48, 0x89, 0x45, 0xf8, 0x58, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf,
        0x48, 0x89, 0xc3, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xd8, 0x48, 0x85, 0xc0, 0x75,
        0xe1, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &PyObject_GetIter+0x0
    // 8: CONTINUE
    // 10: &_Py_Dealloc+0x0
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyObject_GetIter);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xa, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x29, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x35, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x44, (uintptr_t)data + 0x14);
}

void
emit__GET_LEN(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_GET_LEN.o:    file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 7d f8                   movq    -0x8(%rbp), %rdi
    // 5: ff 15 00 00 00 00             callq   *(%rip)                 # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  R_X86_64_GOTPCRELX   PyObject_Size-0x4
    // b: 48 85 c0                      testq   %rax, %rax
    // e: 78 1d                         js      0x2d <_JIT_ENTRY+0x2d>
    // 10: 48 89 c7                      movq    %rax, %rdi
    // 13: ff 15 00 00 00 00             callq   *(%rip)                 # 0x19 <_JIT_ENTRY+0x19>
    // 0000000000000015:  R_X86_64_GOTPCRELX   PyLong_FromSsize_t-0x4
    // 19: 48 85 c0                      testq   %rax, %rax
    // 1c: 74 0f                         je      0x2d <_JIT_ENTRY+0x2d>
    // 1e: 48 89 45 00                   movq    %rax, (%rbp)
    // 22: 48 83 c5 08                   addq    $0x8, %rbp
    // 26: 58                            popq    %rax
    // 27: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x2d <_JIT_ENTRY+0x2d>
    // 0000000000000029:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 2d: 58                            popq    %rax
    // 2e: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x34 <_JIT_ENTRY+0x34>
    // 0000000000000030:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 34: 
    const unsigned char code_body[52] = {
        0x50, 0x48, 0x8b, 0x7d, 0xf8, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x78, 0x1d,
        0x48, 0x89, 0xc7, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x85, 0xc0, 0x74, 0x0f, 0x48, 0x89,
        0x45, 0x00, 0x48, 0x83, 0xc5, 0x08, 0x58, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &PyObject_Size+0x0
    // 8: &PyLong_FromSsize_t+0x0
    // 10: CONTINUE
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyObject_Size);
    patch_64(data + 0x8, (uintptr_t)&PyLong_FromSsize_t);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x15, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x29, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x30, (uintptr_t)data + 0x14);
}

void
emit__GET_YIELD_FROM_ITER(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_GET_YIELD_FROM_ITER.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 5: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // 9: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x10 <_JIT_ENTRY+0x10>
    // 000000000000000c:  R_X86_64_REX_GOTPCRELX       PyCoro_Type-0x4
    // 10: 74 34                         je      0x46 <_JIT_ENTRY+0x46>
    // 12: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x19 <_JIT_ENTRY+0x19>
    // 0000000000000015:  R_X86_64_REX_GOTPCRELX       PyGen_Type-0x4
    // 19: 74 3a                         je      0x55 <_JIT_ENTRY+0x55>
    // 1b: 48 89 df                      movq    %rbx, %rdi
    // 1e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x24 <_JIT_ENTRY+0x24>
    // 0000000000000020:  R_X86_64_GOTPCRELX   PyObject_GetIter-0x4
    // 24: 48 85 c0                      testq   %rax, %rax
    // 27: 74 51                         je      0x7a <_JIT_ENTRY+0x7a>
    // 29: 48 8b 0b                      movq    (%rbx), %rcx
    // 2c: 85 c9                         testl   %ecx, %ecx
    // 2e: 78 51                         js      0x81 <_JIT_ENTRY+0x81>
    // 30: 48 ff c9                      decq    %rcx
    // 33: 48 89 0b                      movq    %rcx, (%rbx)
    // 36: 74 57                         je      0x8f <_JIT_ENTRY+0x8f>
    // 38: 48 89 c3                      movq    %rax, %rbx
    // 3b: 48 89 5d f8                   movq    %rbx, -0x8(%rbp)
    // 3f: 58                            popq    %rax
    // 40: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x46 <_JIT_ENTRY+0x46>
    // 0000000000000042:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 46: 49 8b 45 00                   movq    (%r13), %rax
    // 4a: 0f b7 40 30                   movzwl  0x30(%rax), %eax
    // 4e: a9 80 01 00 00                testl   $0x180, %eax            # imm = 0x180
    // 53: 74 0b                         je      0x60 <_JIT_ENTRY+0x60>
    // 55: 48 89 5d f8                   movq    %rbx, -0x8(%rbp)
    // 59: 58                            popq    %rax
    // 5a: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x60 <_JIT_ENTRY+0x60>
    // 000000000000005c:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 60: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x67 <_JIT_ENTRY+0x67>
    // 0000000000000063:  R_X86_64_REX_GOTPCRELX       PyExc_TypeError-0x4
    // 67: 48 8b 30                      movq    (%rax), %rsi
    // 6a: 48 8d 15 00 00 00 00          leaq    (%rip), %rdx            # 0x71 <_JIT_ENTRY+0x71>
    // 000000000000006d:  R_X86_64_PC32        .L.str.14-0x4
    // 71: 4c 89 e7                      movq    %r12, %rdi
    // 74: ff 15 00 00 00 00             callq   *(%rip)                 # 0x7a <_JIT_ENTRY+0x7a>
    // 0000000000000076:  R_X86_64_GOTPCRELX   _PyErr_SetString-0x4
    // 7a: 58                            popq    %rax
    // 7b: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x81 <_JIT_ENTRY+0x81>
    // 000000000000007d:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 81: 48 89 c3                      movq    %rax, %rbx
    // 84: 48 89 5d f8                   movq    %rbx, -0x8(%rbp)
    // 88: 58                            popq    %rax
    // 89: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x8f <_JIT_ENTRY+0x8f>
    // 000000000000008b:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 8f: 48 89 df                      movq    %rbx, %rdi
    // 92: 48 89 c3                      movq    %rax, %rbx
    // 95: ff 15 00 00 00 00             callq   *(%rip)                 # 0x9b <_JIT_ENTRY+0x9b>
    // 0000000000000097:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 9b: 48 89 5d f8                   movq    %rbx, -0x8(%rbp)
    // 9f: 58                            popq    %rax
    // a0: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xa6 <_JIT_ENTRY+0xa6>
    // 00000000000000a2:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // a0: 
    const unsigned char code_body[160] = {
        0x50, 0x48, 0x8b, 0x5d, 0xf8, 0x48, 0x8b, 0x43,
        0x08, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x74, 0x34, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x74, 0x3a, 0x48, 0x89, 0xdf, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74,
        0x51, 0x48, 0x8b, 0x0b, 0x85, 0xc9, 0x78, 0x51,
        0x48, 0xff, 0xc9, 0x48, 0x89, 0x0b, 0x74, 0x57,
        0x48, 0x89, 0xc3, 0x48, 0x89, 0x5d, 0xf8, 0x58,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b,
        0x45, 0x00, 0x0f, 0xb7, 0x40, 0x30, 0xa9, 0x80,
        0x01, 0x00, 0x00, 0x74, 0x0b, 0x48, 0x89, 0x5d,
        0xf8, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x30, 0x48, 0x8d, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x4c, 0x89, 0xe7, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xc3, 0x48, 0x89, 0x5d, 0xf8,
        0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0xdf, 0x48, 0x89, 0xc3, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0x5d, 0xf8, 0x58,
    };
    // 0: "cannot 'yield from' a coroutine object in a non-coroutine generator\x00"
    // 44: 00 00 00 00
    // 48: &PyCoro_Type+0x0
    // 50: &PyGen_Type+0x0
    // 58: &PyObject_GetIter+0x0
    // 60: CONTINUE
    // 68: &PyExc_TypeError+0x0
    // 70: &_PyErr_SetString+0x0
    // 78: ERROR_TARGET
    // 80: &_Py_Dealloc+0x0
    const unsigned char data_body[136] = {
        0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x27,
        0x79, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x66, 0x72,
        0x6f, 0x6d, 0x27, 0x20, 0x61, 0x20, 0x63, 0x6f,
        0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x20,
        0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x69,
        0x6e, 0x20, 0x61, 0x20, 0x6e, 0x6f, 0x6e, 0x2d,
        0x63, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
        0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
        0x74, 0x6f, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x48, (uintptr_t)&PyCoro_Type);
    patch_64(data + 0x50, (uintptr_t)&PyGen_Type);
    patch_64(data + 0x58, (uintptr_t)&PyObject_GetIter);
    patch_64(data + 0x60, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x68, (uintptr_t)&PyExc_TypeError);
    patch_64(data + 0x70, (uintptr_t)&_PyErr_SetString);
    patch_64(data + 0x78, instruction_starts[instruction->error_target]);
    patch_64(data + 0x80, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xc, (uintptr_t)data + 0x44);
    patch_x86_64_32rx(code + 0x15, (uintptr_t)data + 0x4c);
    patch_x86_64_32rx(code + 0x20, (uintptr_t)data + 0x54);
    patch_x86_64_32rx(code + 0x42, (uintptr_t)data + 0x5c);
    patch_x86_64_32rx(code + 0x5c, (uintptr_t)data + 0x5c);
    patch_x86_64_32rx(code + 0x63, (uintptr_t)data + 0x64);
    patch_32r(code + 0x6d, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x76, (uintptr_t)data + 0x6c);
    patch_x86_64_32rx(code + 0x7d, (uintptr_t)data + 0x74);
    patch_x86_64_32rx(code + 0x8b, (uintptr_t)data + 0x5c);
    patch_x86_64_32rx(code + 0x97, (uintptr_t)data + 0x7c);
}

void
emit__GUARD_BOTH_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_GUARD_BOTH_FLOAT.o:   file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f0                   movq    -0x10(%rbp), %rax
    // 4: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  R_X86_64_REX_GOTPCRELX       PyFloat_Type-0x4
    // f: 75 11                         jne     0x22 <_JIT_ENTRY+0x22>
    // 11: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 15: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 19: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x20 <_JIT_ENTRY+0x20>
    // 000000000000001c:  R_X86_64_REX_GOTPCRELX       PyFloat_Type-0x4
    // 20: 74 06                         je      0x28 <_JIT_ENTRY+0x28>
    // 22: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x28 <_JIT_ENTRY+0x28>
    // 0000000000000024:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 28: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x2e <_JIT_ENTRY+0x2e>
    // 000000000000002a:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 28: 
    const unsigned char code_body[40] = {
        0x48, 0x8b, 0x45, 0xf0, 0x48, 0x8b, 0x40, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x75,
        0x11, 0x48, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x40,
        0x08, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x74, 0x06, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &PyFloat_Type+0x0
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyFloat_Type);
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1c, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x24, (uintptr_t)data + 0x4);
}

void
emit__GUARD_BOTH_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_GUARD_BOTH_INT.o:     file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f0                   movq    -0x10(%rbp), %rax
    // 4: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  R_X86_64_REX_GOTPCRELX       PyLong_Type-0x4
    // f: 75 11                         jne     0x22 <_JIT_ENTRY+0x22>
    // 11: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 15: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 19: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x20 <_JIT_ENTRY+0x20>
    // 000000000000001c:  R_X86_64_REX_GOTPCRELX       PyLong_Type-0x4
    // 20: 74 06                         je      0x28 <_JIT_ENTRY+0x28>
    // 22: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x28 <_JIT_ENTRY+0x28>
    // 0000000000000024:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 28: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x2e <_JIT_ENTRY+0x2e>
    // 000000000000002a:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 28: 
    const unsigned char code_body[40] = {
        0x48, 0x8b, 0x45, 0xf0, 0x48, 0x8b, 0x40, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x75,
        0x11, 0x48, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x40,
        0x08, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x74, 0x06, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &PyLong_Type+0x0
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1c, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x24, (uintptr_t)data + 0x4);
}

void
emit__GUARD_BOTH_UNICODE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_GUARD_BOTH_UNICODE.o: file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f0                   movq    -0x10(%rbp), %rax
    // 4: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  R_X86_64_REX_GOTPCRELX       PyUnicode_Type-0x4
    // f: 75 11                         jne     0x22 <_JIT_ENTRY+0x22>
    // 11: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 15: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 19: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x20 <_JIT_ENTRY+0x20>
    // 000000000000001c:  R_X86_64_REX_GOTPCRELX       PyUnicode_Type-0x4
    // 20: 74 06                         je      0x28 <_JIT_ENTRY+0x28>
    // 22: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x28 <_JIT_ENTRY+0x28>
    // 0000000000000024:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 28: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x2e <_JIT_ENTRY+0x2e>
    // 000000000000002a:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 28: 
    const unsigned char code_body[40] = {
        0x48, 0x8b, 0x45, 0xf0, 0x48, 0x8b, 0x40, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x75,
        0x11, 0x48, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x40,
        0x08, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x74, 0x06, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &PyUnicode_Type+0x0
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyUnicode_Type);
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1c, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x24, (uintptr_t)data + 0x4);
}

void
emit__GUARD_BUILTINS_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_GUARD_BUILTINS_VERSION.o:     file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 20                   movq    0x20(%r13), %rax
    // 4: 48 8b 48 08                   movq    0x8(%rax), %rcx
    // 8: 48 3b 0d 00 00 00 00          cmpq    (%rip), %rcx            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  R_X86_64_REX_GOTPCRELX       PyDict_Type-0x4
    // f: 75 16                         jne     0x27 <_JIT_ENTRY+0x27>
    // 11: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 15: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x1c <_JIT_ENTRY+0x1c>
    // 0000000000000018:  R_X86_64_GOTPCREL    _JIT_OPERAND-0x4
    // 1c: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
    // 1f: 75 06                         jne     0x27 <_JIT_ENTRY+0x27>
    // 21: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x27 <_JIT_ENTRY+0x27>
    // 0000000000000023:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 27: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x2d <_JIT_ENTRY+0x2d>
    // 0000000000000029:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 2d: 
    const unsigned char code_body[45] = {
        0x49, 0x8b, 0x45, 0x20, 0x48, 0x8b, 0x48, 0x08,
        0x48, 0x3b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x75,
        0x16, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb7, 0x0d,
        0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c, 0x75,
        0x06, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &PyDict_Type+0x0
    // 8: OPERAND
    // 10: CONTINUE
    // 18: JUMP_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyDict_Type);
    patch_64(data + 0x8, instruction->operand);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_32r(code + 0x18, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x23, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x29, (uintptr_t)data + 0x14);
}

void
emit__GUARD_DORV_NO_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_GUARD_DORV_NO_DICT.o: file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 4: 48 83 78 e8 00                cmpq    $0x0, -0x18(%rax)
    // 9: 74 06                         je      0x11 <_JIT_ENTRY+0x11>
    // b: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x11 <_JIT_ENTRY+0x11>
    // 000000000000000d:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 11: 80 78 13 00                   cmpb    $0x0, 0x13(%rax)
    // 15: 74 f4                         je      0xb <_JIT_ENTRY+0xb>
    // 17: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 17: 
    const unsigned char code_body[23] = {
        0x48, 0x8b, 0x45, 0xf8, 0x48, 0x83, 0x78, 0xe8,
        0x00, 0x74, 0x06, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x80, 0x78, 0x13, 0x00, 0x74, 0xf4,
    };
    // 0: 
    // 0: JUMP_TARGET
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xd, (uintptr_t)data + -0x4);
}

void
emit__GUARD_DORV_VALUES_INST_ATTR_FROM_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT.o:      file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 4: 80 78 13 00                   cmpb    $0x0, 0x13(%rax)
    // 8: 74 06                         je      0x10 <_JIT_ENTRY+0x10>
    // a: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x10 <_JIT_ENTRY+0x10>
    // 000000000000000c:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 10: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x16 <_JIT_ENTRY+0x16>
    // 0000000000000012:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 16: 
    const unsigned char code_body[22] = {
        0x48, 0x8b, 0x45, 0xf8, 0x80, 0x78, 0x13, 0x00,
        0x74, 0x06, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: CONTINUE
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xc, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x12, (uintptr_t)data + 0x4);
}

void
emit__GUARD_GLOBALS_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_GUARD_GLOBALS_VERSION.o:      file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 18                   movq    0x18(%r13), %rax
    // 4: 48 8b 48 08                   movq    0x8(%rax), %rcx
    // 8: 48 3b 0d 00 00 00 00          cmpq    (%rip), %rcx            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  R_X86_64_REX_GOTPCRELX       PyDict_Type-0x4
    // f: 75 16                         jne     0x27 <_JIT_ENTRY+0x27>
    // 11: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 15: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x1c <_JIT_ENTRY+0x1c>
    // 0000000000000018:  R_X86_64_GOTPCREL    _JIT_OPERAND-0x4
    // 1c: 39 48 0c                      cmpl    %ecx, 0xc(%rax)
    // 1f: 75 06                         jne     0x27 <_JIT_ENTRY+0x27>
    // 21: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x27 <_JIT_ENTRY+0x27>
    // 0000000000000023:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 27: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x2d <_JIT_ENTRY+0x2d>
    // 0000000000000029:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 2d: 
    const unsigned char code_body[45] = {
        0x49, 0x8b, 0x45, 0x18, 0x48, 0x8b, 0x48, 0x08,
        0x48, 0x3b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x75,
        0x16, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb7, 0x0d,
        0x00, 0x00, 0x00, 0x00, 0x39, 0x48, 0x0c, 0x75,
        0x06, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &PyDict_Type+0x0
    // 8: OPERAND
    // 10: CONTINUE
    // 18: JUMP_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyDict_Type);
    patch_64(data + 0x8, instruction->operand);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_32r(code + 0x18, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x23, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x29, (uintptr_t)data + 0x14);
}

void
emit__GUARD_IS_FALSE_POP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_GUARD_IS_FALSE_POP.o: file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 4: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  R_X86_64_REX_GOTPCRELX       _Py_FalseStruct-0x4
    // f: 74 06                         je      0x17 <_JIT_ENTRY+0x17>
    // 11: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x17 <_JIT_ENTRY+0x17>
    // 0000000000000013:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 17: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 17: 
    const unsigned char code_body[23] = {
        0x48, 0x8b, 0x45, 0xf8, 0x48, 0x83, 0xc5, 0xf8,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x06, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &_Py_FalseStruct+0x0
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x13, (uintptr_t)data + 0x4);
}

void
emit__GUARD_IS_NONE_POP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_GUARD_IS_NONE_POP.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 7d f8                   movq    -0x8(%rbp), %rdi
    // 5: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 9: 48 3b 3d 00 00 00 00          cmpq    (%rip), %rdi            # 0x10 <_JIT_ENTRY+0x10>
    // 000000000000000c:  R_X86_64_REX_GOTPCRELX       _Py_NoneStruct-0x4
    // 10: 74 16                         je      0x28 <_JIT_ENTRY+0x28>
    // 12: 48 8b 07                      movq    (%rdi), %rax
    // 15: 85 c0                         testl   %eax, %eax
    // 17: 78 08                         js      0x21 <_JIT_ENTRY+0x21>
    // 19: 48 ff c8                      decq    %rax
    // 1c: 48 89 07                      movq    %rax, (%rdi)
    // 1f: 74 0e                         je      0x2f <_JIT_ENTRY+0x2f>
    // 21: 58                            popq    %rax
    // 22: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x28 <_JIT_ENTRY+0x28>
    // 0000000000000024:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 28: 58                            popq    %rax
    // 29: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x2f <_JIT_ENTRY+0x2f>
    // 000000000000002b:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 2f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x35 <_JIT_ENTRY+0x35>
    // 0000000000000031:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 35: 58                            popq    %rax
    // 36: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x3c <_JIT_ENTRY+0x3c>
    // 0000000000000038:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 3c: 
    const unsigned char code_body[60] = {
        0x50, 0x48, 0x8b, 0x7d, 0xf8, 0x48, 0x83, 0xc5,
        0xf8, 0x48, 0x3b, 0x3d, 0x00, 0x00, 0x00, 0x00,
        0x74, 0x16, 0x48, 0x8b, 0x07, 0x85, 0xc0, 0x78,
        0x08, 0x48, 0xff, 0xc8, 0x48, 0x89, 0x07, 0x74,
        0x0e, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &_Py_NoneStruct+0x0
    // 8: JUMP_TARGET
    // 10: CONTINUE
    // 18: &_Py_Dealloc+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xc, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x24, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x2b, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x31, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x38, (uintptr_t)data + 0x4);
}

void
emit__GUARD_IS_NOT_NONE_POP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_GUARD_IS_NOT_NONE_POP.o:      file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 7d f8                   movq    -0x8(%rbp), %rdi
    // 5: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 9: 48 3b 3d 00 00 00 00          cmpq    (%rip), %rdi            # 0x10 <_JIT_ENTRY+0x10>
    // 000000000000000c:  R_X86_64_REX_GOTPCRELX       _Py_NoneStruct-0x4
    // 10: 74 16                         je      0x28 <_JIT_ENTRY+0x28>
    // 12: 48 8b 07                      movq    (%rdi), %rax
    // 15: 85 c0                         testl   %eax, %eax
    // 17: 78 08                         js      0x21 <_JIT_ENTRY+0x21>
    // 19: 48 ff c8                      decq    %rax
    // 1c: 48 89 07                      movq    %rax, (%rdi)
    // 1f: 74 0e                         je      0x2f <_JIT_ENTRY+0x2f>
    // 21: 58                            popq    %rax
    // 22: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x28 <_JIT_ENTRY+0x28>
    // 0000000000000024:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 28: 58                            popq    %rax
    // 29: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x2f <_JIT_ENTRY+0x2f>
    // 000000000000002b:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 2f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x35 <_JIT_ENTRY+0x35>
    // 0000000000000031:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 35: 58                            popq    %rax
    // 36: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x3c <_JIT_ENTRY+0x3c>
    // 0000000000000038:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 36: 
    const unsigned char code_body[54] = {
        0x50, 0x48, 0x8b, 0x7d, 0xf8, 0x48, 0x83, 0xc5,
        0xf8, 0x48, 0x3b, 0x3d, 0x00, 0x00, 0x00, 0x00,
        0x74, 0x16, 0x48, 0x8b, 0x07, 0x85, 0xc0, 0x78,
        0x08, 0x48, 0xff, 0xc8, 0x48, 0x89, 0x07, 0x74,
        0x0e, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x58,
    };
    // 0: 
    // 0: &_Py_NoneStruct+0x0
    // 8: CONTINUE
    // 10: JUMP_TARGET
    // 18: &_Py_Dealloc+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xc, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x24, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x2b, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x31, (uintptr_t)data + 0x14);
}

void
emit__GUARD_IS_TRUE_POP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_GUARD_IS_TRUE_POP.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 4: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  R_X86_64_REX_GOTPCRELX       _Py_TrueStruct-0x4
    // f: 74 06                         je      0x17 <_JIT_ENTRY+0x17>
    // 11: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x17 <_JIT_ENTRY+0x17>
    // 0000000000000013:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 17: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 17: 
    const unsigned char code_body[23] = {
        0x48, 0x8b, 0x45, 0xf8, 0x48, 0x83, 0xc5, 0xf8,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x06, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &_Py_TrueStruct+0x0
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x13, (uintptr_t)data + 0x4);
}

void
emit__GUARD_KEYS_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_GUARD_KEYS_VERSION.o: file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 4: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 8: 48 8b 80 70 03 00 00          movq    0x370(%rax), %rax
    // f: 8b 40 0c                      movl    0xc(%rax), %eax
    // 12: 3b 05 00 00 00 00             cmpl    (%rip), %eax            # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  R_X86_64_GOTPCRELX   _JIT_OPERAND-0x4
    // 18: 75 06                         jne     0x20 <_JIT_ENTRY+0x20>
    // 1a: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x20 <_JIT_ENTRY+0x20>
    // 000000000000001c:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 20: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x26 <_JIT_ENTRY+0x26>
    // 0000000000000022:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 26: 
    const unsigned char code_body[38] = {
        0x48, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x40, 0x08,
        0x48, 0x8b, 0x80, 0x70, 0x03, 0x00, 0x00, 0x8b,
        0x40, 0x0c, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x75, 0x06, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPERAND
    // 8: CONTINUE
    // 10: JUMP_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1c, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x22, (uintptr_t)data + 0xc);
}

void
emit__GUARD_NOS_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_GUARD_NOS_FLOAT.o:    file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f0                   movq    -0x10(%rbp), %rax
    // 4: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  R_X86_64_REX_GOTPCRELX       PyFloat_Type-0x4
    // f: 74 06                         je      0x17 <_JIT_ENTRY+0x17>
    // 11: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x17 <_JIT_ENTRY+0x17>
    // 0000000000000013:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 17: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 17: 
    const unsigned char code_body[23] = {
        0x48, 0x8b, 0x45, 0xf0, 0x48, 0x8b, 0x40, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x06, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &PyFloat_Type+0x0
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyFloat_Type);
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x13, (uintptr_t)data + 0x4);
}

void
emit__GUARD_NOS_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_GUARD_NOS_INT.o:      file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f0                   movq    -0x10(%rbp), %rax
    // 4: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  R_X86_64_REX_GOTPCRELX       PyLong_Type-0x4
    // f: 74 06                         je      0x17 <_JIT_ENTRY+0x17>
    // 11: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x17 <_JIT_ENTRY+0x17>
    // 0000000000000013:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 17: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 17: 
    const unsigned char code_body[23] = {
        0x48, 0x8b, 0x45, 0xf0, 0x48, 0x8b, 0x40, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x06, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &PyLong_Type+0x0
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x13, (uintptr_t)data + 0x4);
}

void
emit__GUARD_NOT_EXHAUSTED_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_GUARD_NOT_EXHAUSTED_LIST.o:   file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 4: 48 8b 48 18                   movq    0x18(%rax), %rcx
    // 8: 48 85 c9                      testq   %rcx, %rcx
    // b: 74 10                         je      0x1d <_JIT_ENTRY+0x1d>
    // d: 48 8b 50 10                   movq    0x10(%rax), %rdx
    // 11: 48 3b 51 10                   cmpq    0x10(%rcx), %rdx
    // 15: 73 0c                         jae     0x23 <_JIT_ENTRY+0x23>
    // 17: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 1d: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x23 <_JIT_ENTRY+0x23>
    // 000000000000001f:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 23: 48 c7 40 10 ff ff ff ff       movq    $-0x1, 0x10(%rax)
    // 2b: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x31 <_JIT_ENTRY+0x31>
    // 000000000000002d:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 31: 
    const unsigned char code_body[49] = {
        0x48, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x48, 0x18,
        0x48, 0x85, 0xc9, 0x74, 0x10, 0x48, 0x8b, 0x50,
        0x10, 0x48, 0x3b, 0x51, 0x10, 0x73, 0x0c, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0xc7, 0x40, 0x10, 0xff,
        0xff, 0xff, 0xff, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: 
    // 0: CONTINUE
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x19, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1f, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x2d, (uintptr_t)data + 0x4);
}

void
emit__GUARD_NOT_EXHAUSTED_RANGE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_GUARD_NOT_EXHAUSTED_RANGE.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 4: 48 83 78 20 00                cmpq    $0x0, 0x20(%rax)
    // 9: 7e 06                         jle     0x11 <_JIT_ENTRY+0x11>
    // b: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x11 <_JIT_ENTRY+0x11>
    // 000000000000000d:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 11: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x17 <_JIT_ENTRY+0x17>
    // 0000000000000013:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 17: 
    const unsigned char code_body[23] = {
        0x48, 0x8b, 0x45, 0xf8, 0x48, 0x83, 0x78, 0x20,
        0x00, 0x7e, 0x06, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: CONTINUE
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xd, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x13, (uintptr_t)data + 0x4);
}

void
emit__GUARD_NOT_EXHAUSTED_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_GUARD_NOT_EXHAUSTED_TUPLE.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 4: 48 8b 48 18                   movq    0x18(%rax), %rcx
    // 8: 48 85 c9                      testq   %rcx, %rcx
    // b: 74 10                         je      0x1d <_JIT_ENTRY+0x1d>
    // d: 48 8b 40 10                   movq    0x10(%rax), %rax
    // 11: 48 3b 41 10                   cmpq    0x10(%rcx), %rax
    // 15: 7d 06                         jge     0x1d <_JIT_ENTRY+0x1d>
    // 17: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 1d: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x23 <_JIT_ENTRY+0x23>
    // 000000000000001f:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 23: 
    const unsigned char code_body[35] = {
        0x48, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x48, 0x18,
        0x48, 0x85, 0xc9, 0x74, 0x10, 0x48, 0x8b, 0x40,
        0x10, 0x48, 0x3b, 0x41, 0x10, 0x7d, 0x06, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: CONTINUE
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x19, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1f, (uintptr_t)data + 0x4);
}

void
emit__GUARD_TOS_FLOAT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_GUARD_TOS_FLOAT.o:    file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 4: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  R_X86_64_REX_GOTPCRELX       PyFloat_Type-0x4
    // f: 74 06                         je      0x17 <_JIT_ENTRY+0x17>
    // 11: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x17 <_JIT_ENTRY+0x17>
    // 0000000000000013:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 17: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 17: 
    const unsigned char code_body[23] = {
        0x48, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x40, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x06, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &PyFloat_Type+0x0
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyFloat_Type);
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x13, (uintptr_t)data + 0x4);
}

void
emit__GUARD_TOS_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_GUARD_TOS_INT.o:      file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 4: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  R_X86_64_REX_GOTPCRELX       PyLong_Type-0x4
    // f: 74 06                         je      0x17 <_JIT_ENTRY+0x17>
    // 11: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x17 <_JIT_ENTRY+0x17>
    // 0000000000000013:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 17: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 17: 
    const unsigned char code_body[23] = {
        0x48, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x40, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x06, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &PyLong_Type+0x0
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x13, (uintptr_t)data + 0x4);
}

void
emit__GUARD_TYPE_VERSION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_GUARD_TYPE_VERSION.o: file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 4: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 8: 8b 80 80 01 00 00             movl    0x180(%rax), %eax
    // e: 3b 05 00 00 00 00             cmpl    (%rip), %eax            # 0x14 <_JIT_ENTRY+0x14>
    // 0000000000000010:  R_X86_64_GOTPCRELX   _JIT_OPERAND-0x4
    // 14: 75 06                         jne     0x1c <_JIT_ENTRY+0x1c>
    // 16: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1c <_JIT_ENTRY+0x1c>
    // 0000000000000018:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 1c: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x22 <_JIT_ENTRY+0x22>
    // 000000000000001e:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 22: 
    const unsigned char code_body[34] = {
        0x48, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x40, 0x08,
        0x8b, 0x80, 0x80, 0x01, 0x00, 0x00, 0x3b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x75, 0x06, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: 
    // 0: OPERAND
    // 8: CONTINUE
    // 10: JUMP_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x10, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x18, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x1e, (uintptr_t)data + 0xc);
}

void
emit__INIT_CALL_BOUND_METHOD_EXACT_ARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_INIT_CALL_BOUND_METHOD_EXACT_ARGS.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 4c 89 e2                      movq    %r12, %rdx
    // 4: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // b: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
    // 10: 29 c1                         subl    %eax, %ecx
    // 12: 48 63 d9                      movslq  %ecx, %rbx
    // 15: 48 8b 7c dd 00                movq    (%rbp,%rbx,8), %rdi
    // 1a: 4c 8b 77 18                   movq    0x18(%rdi), %r14
    // 1e: 41 8b 0e                      movl    (%r14), %ecx
    // 21: ff c1                         incl    %ecx
    // 23: 74 03                         je      0x28 <_JIT_ENTRY+0x28>
    // 25: 41 89 0e                      movl    %ecx, (%r14)
    // 28: f7 d0                         notl    %eax
    // 2a: 4c 63 e0                      movslq  %eax, %r12
    // 2d: 4e 89 74 e5 00                movq    %r14, (%rbp,%r12,8)
    // 32: 4c 8b 7f 10                   movq    0x10(%rdi), %r15
    // 36: 41 8b 07                      movl    (%r15), %eax
    // 39: ff c0                         incl    %eax
    // 3b: 74 03                         je      0x40 <_JIT_ENTRY+0x40>
    // 3d: 41 89 07                      movl    %eax, (%r15)
    // 40: 4c 89 7c dd 00                movq    %r15, (%rbp,%rbx,8)
    // 45: 48 8b 07                      movq    (%rdi), %rax
    // 48: 85 c0                         testl   %eax, %eax
    // 4a: 78 16                         js      0x62 <_JIT_ENTRY+0x62>
    // 4c: 48 ff c8                      decq    %rax
    // 4f: 48 89 07                      movq    %rax, (%rdi)
    // 52: 75 0e                         jne     0x62 <_JIT_ENTRY+0x62>
    // 54: 48 89 14 24                   movq    %rdx, (%rsp)
    // 58: ff 15 00 00 00 00             callq   *(%rip)                 # 0x5e <_JIT_ENTRY+0x5e>
    // 000000000000005a:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 5e: 48 8b 14 24                   movq    (%rsp), %rdx
    // 62: 4c 89 7c dd 00                movq    %r15, (%rbp,%rbx,8)
    // 67: 4e 89 74 e5 00                movq    %r14, (%rbp,%r12,8)
    // 6c: 49 89 d4                      movq    %rdx, %r12
    // 6f: 58                            popq    %rax
    // 70: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x76 <_JIT_ENTRY+0x76>
    // 0000000000000072:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 70: 
    const unsigned char code_body[112] = {
        0x50, 0x4c, 0x89, 0xe2, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff,
        0x29, 0xc1, 0x48, 0x63, 0xd9, 0x48, 0x8b, 0x7c,
        0xdd, 0x00, 0x4c, 0x8b, 0x77, 0x18, 0x41, 0x8b,
        0x0e, 0xff, 0xc1, 0x74, 0x03, 0x41, 0x89, 0x0e,
        0xf7, 0xd0, 0x4c, 0x63, 0xe0, 0x4e, 0x89, 0x74,
        0xe5, 0x00, 0x4c, 0x8b, 0x7f, 0x10, 0x41, 0x8b,
        0x07, 0xff, 0xc0, 0x74, 0x03, 0x41, 0x89, 0x07,
        0x4c, 0x89, 0x7c, 0xdd, 0x00, 0x48, 0x8b, 0x07,
        0x85, 0xc0, 0x78, 0x16, 0x48, 0xff, 0xc8, 0x48,
        0x89, 0x07, 0x75, 0x0e, 0x48, 0x89, 0x14, 0x24,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x14, 0x24, 0x4c, 0x89, 0x7c, 0xdd, 0x00, 0x4e,
        0x89, 0x74, 0xe5, 0x00, 0x49, 0x89, 0xd4, 0x58,
    };
    // 0: 
    // 0: OPARG
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x5a, (uintptr_t)data + 0x4);
}

void
emit__INIT_CALL_PY_EXACT_ARGS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_INIT_CALL_PY_EXACT_ARGS.o:    file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 0f b7 35 00 00 00 00          movzwl  (%rip), %esi            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 7: 89 f0                         movl    %esi, %eax
    // 9: f7 d0                         notl    %eax
    // b: 48 98                         cltq
    // d: 4c 8b 4c c5 00                movq    (%rbp,%rax,8), %r9
    // 12: b9 fe ff ff ff                movl    $0xfffffffe, %ecx       # imm = 0xFFFFFFFE
    // 17: 29 f1                         subl    %esi, %ecx
    // 19: 48 63 c9                      movslq  %ecx, %rcx
    // 1c: 48 8b 7c cd 00                movq    (%rbp,%rcx,8), %rdi
    // 21: 49 83 f9 01                   cmpq    $0x1, %r9
    // 25: 89 f3                         movl    %esi, %ebx
    // 27: 83 db ff                      sbbl    $-0x1, %ebx
    // 2a: 4c 8b 47 30                   movq    0x30(%rdi), %r8
    // 2e: 49 8b 94 24 f0 00 00 00       movq    0xf0(%r12), %rdx
    // 36: 4d 63 50 4c                   movslq  0x4c(%r8), %r10
    // 3a: 4e 8d 14 d2                   leaq    (%rdx,%r10,8), %r10
    // 3e: 4d 89 94 24 f0 00 00 00       movq    %r10, 0xf0(%r12)
    // 46: 48 89 7a 10                   movq    %rdi, 0x10(%rdx)
    // 4a: 45 8b 10                      movl    (%r8), %r10d
    // 4d: 41 ff c2                      incl    %r10d
    // 50: 74 03                         je      0x55 <_JIT_ENTRY+0x55>
    // 52: 45 89 10                      movl    %r10d, (%r8)
    // 55: 4c 89 02                      movq    %r8, (%rdx)
    // 58: 0f 10 47 10                   movups  0x10(%rdi), %xmm0
    // 5c: 0f 11 42 18                   movups  %xmm0, 0x18(%rdx)
    // 60: 48 c7 42 28 00 00 00 00       movq    $0x0, 0x28(%rdx)
    // 68: 41 8b 78 48                   movl    0x48(%r8), %edi
    // 6c: 89 7a 40                      movl    %edi, 0x40(%rdx)
    // 6f: 48 c7 42 30 00 00 00 00       movq    $0x0, 0x30(%rdx)
    // 77: 49 81 c0 c8 00 00 00          addq    $0xc8, %r8
    // 7e: 4c 89 42 38                   movq    %r8, 0x38(%rdx)
    // 82: 66 c7 42 44 00 00             movw    $0x0, 0x44(%rdx)
    // 88: c6 42 46 00                   movb    $0x0, 0x46(%rdx)
    // 8c: 39 df                         cmpl    %ebx, %edi
    // 8e: 7e 61                         jle     0xf1 <_JIT_ENTRY+0xf1>
    // 90: 41 89 d8                      movl    %ebx, %r8d
    // 93: 49 89 fa                      movq    %rdi, %r10
    // 96: 4d 29 c2                      subq    %r8, %r10
    // 99: 49 83 fa 04                   cmpq    $0x4, %r10
    // 9d: 72 41                         jb      0xe0 <_JIT_ENTRY+0xe0>
    // 9f: 4d 89 d3                      movq    %r10, %r11
    // a2: 49 83 e3 fc                   andq    $-0x4, %r11
    // a6: 4a 8d 1c c2                   leaq    (%rdx,%r8,8), %rbx
    // aa: 48 83 c3 58                   addq    $0x58, %rbx
    // ae: 45 31 f6                      xorl    %r14d, %r14d
    // b1: 0f 57 c0                      xorps   %xmm0, %xmm0
    // b4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
    // c0: 42 0f 11 44 f3 f0             movups  %xmm0, -0x10(%rbx,%r14,8)
    // c6: 42 0f 11 04 f3                movups  %xmm0, (%rbx,%r14,8)
    // cb: 49 83 c6 04                   addq    $0x4, %r14
    // cf: 4d 39 f3                      cmpq    %r14, %r11
    // d2: 75 ec                         jne     0xc0 <_JIT_ENTRY+0xc0>
    // d4: 4d 39 da                      cmpq    %r11, %r10
    // d7: 74 18                         je      0xf1 <_JIT_ENTRY+0xf1>
    // d9: 4d 01 d8                      addq    %r11, %r8
    // dc: 0f 1f 40 00                   nopl    (%rax)
    // e0: 4a c7 44 c2 48 00 00 00 00    movq    $0x0, 0x48(%rdx,%r8,8)
    // e9: 49 ff c0                      incq    %r8
    // ec: 4c 39 c7                      cmpq    %r8, %rdi
    // ef: 75 ef                         jne     0xe0 <_JIT_ENTRY+0xe0>
    // f1: 48 8d 04 c5 00 00 00 00       leaq    (,%rax,8), %rax
    // f9: 48 01 e8                      addq    %rbp, %rax
    // fc: 45 31 c0                      xorl    %r8d, %r8d
    // ff: 4d 85 c9                      testq   %r9, %r9
    // 102: 0f 95 c3                      setne   %bl
    // 105: 4c 89 4a 48                   movq    %r9, 0x48(%rdx)
    // 109: 48 8b 3d 00 00 00 00          movq    (%rip), %rdi            # 0x110 <_JIT_ENTRY+0x110>
    // 000000000000010c:  R_X86_64_REX_GOTPCRELX       _JIT_OPARG-0x4
    // 110: 66 85 ff                      testw   %di, %di
    // 113: 0f 84 1f 01 00 00             je      0x238 <_JIT_ENTRY+0x238>
    // 119: 41 88 d8                      movb    %bl, %r8b
    // 11c: 83 fe 01                      cmpl    $0x1, %esi
    // 11f: 89 f7                         movl    %esi, %edi
    // 121: 83 d7 00                      adcl    $0x0, %edi
    // 124: 4c 8b 15 00 00 00 00          movq    (%rip), %r10            # 0x12b <_JIT_ENTRY+0x12b>
    // 0000000000000127:  R_X86_64_REX_GOTPCRELX       _JIT_OPARG-0x4
    // 12b: 66 41 83 fa 14                cmpw    $0x14, %r10w
    // 130: 72 30                         jb      0x162 <_JIT_ENTRY+0x162>
    // 132: 45 31 d2                      xorl    %r10d, %r10d
    // 135: 4d 85 c9                      testq   %r9, %r9
    // 138: 41 0f 95 c2                   setne   %r10b
    // 13c: 0f b7 1d 00 00 00 00          movzwl  (%rip), %ebx            # 0x143 <_JIT_ENTRY+0x143>
    // 000000000000013f:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 143: 48 c1 e3 03                   shlq    $0x3, %rbx
    // 147: 49 89 d9                      movq    %rbx, %r9
    // 14a: 49 29 e9                      subq    %rbp, %r9
    // 14d: 4f 8d 0c d1                   leaq    (%r9,%r10,8), %r9
    // 151: 49 01 d1                      addq    %rdx, %r9
    // 154: 49 83 c1 48                   addq    $0x48, %r9
    // 158: 49 83 f9 20                   cmpq    $0x20, %r9
    // 15c: 0f 83 8f 00 00 00             jae     0x1f1 <_JIT_ENTRY+0x1f1>
    // 162: 45 31 c9                      xorl    %r9d, %r9d
    // 165: c1 e6 03                      shll    $0x3, %esi
    // 168: 49 89 fb                      movq    %rdi, %r11
    // 16b: 4d 89 ca                      movq    %r9, %r10
    // 16e: 49 83 e3 03                   andq    $0x3, %r11
    // 172: 74 2c                         je      0x1a0 <_JIT_ENTRY+0x1a0>
    // 174: 48 89 eb                      movq    %rbp, %rbx
    // 177: 48 29 f3                      subq    %rsi, %rbx
    // 17a: 4e 8d 34 c2                   leaq    (%rdx,%r8,8), %r14
    // 17e: 49 83 c6 48                   addq    $0x48, %r14
    // 182: 4d 89 ca                      movq    %r9, %r10
    // 185: 66 66 2e 0f 1f 84 00 00 00 00 00      nopw    %cs:(%rax,%rax)
    // 190: 4e 8b 3c d3                   movq    (%rbx,%r10,8), %r15
    // 194: 4f 89 3c d6                   movq    %r15, (%r14,%r10,8)
    // 198: 49 ff c2                      incq    %r10
    // 19b: 49 ff cb                      decq    %r11
    // 19e: 75 f0                         jne     0x190 <_JIT_ENTRY+0x190>
    // 1a0: 49 29 f9                      subq    %rdi, %r9
    // 1a3: 49 83 f9 fc                   cmpq    $-0x4, %r9
    // 1a7: 0f 87 8b 00 00 00             ja      0x238 <_JIT_ENTRY+0x238>
    // 1ad: 4e 8d 04 c2                   leaq    (%rdx,%r8,8), %r8
    // 1b1: 49 83 c0 60                   addq    $0x60, %r8
    // 1b5: 49 89 e9                      movq    %rbp, %r9
    // 1b8: 49 29 f1                      subq    %rsi, %r9
    // 1bb: 49 83 c1 18                   addq    $0x18, %r9
    // 1bf: 90                            nop
    // 1c0: 4b 8b 74 d1 e8                movq    -0x18(%r9,%r10,8), %rsi
    // 1c5: 4b 89 74 d0 e8                movq    %rsi, -0x18(%r8,%r10,8)
    // 1ca: 4b 8b 74 d1 f0                movq    -0x10(%r9,%r10,8), %rsi
    // 1cf: 4b 89 74 d0 f0                movq    %rsi, -0x10(%r8,%r10,8)
    // 1d4: 4b 8b 74 d1 f8                movq    -0x8(%r9,%r10,8), %rsi
    // 1d9: 4b 89 74 d0 f8                movq    %rsi, -0x8(%r8,%r10,8)
    // 1de: 4b 8b 34 d1                   movq    (%r9,%r10,8), %rsi
    // 1e2: 4b 89 34 d0                   movq    %rsi, (%r8,%r10,8)
    // 1e6: 49 83 c2 04                   addq    $0x4, %r10
    // 1ea: 4c 39 d7                      cmpq    %r10, %rdi
    // 1ed: 75 d1                         jne     0x1c0 <_JIT_ENTRY+0x1c0>
    // 1ef: eb 47                         jmp     0x238 <_JIT_ENTRY+0x238>
    // 1f1: 41 89 f9                      movl    %edi, %r9d
    // 1f4: 41 81 e1 fc ff 00 00          andl    $0xfffc, %r9d           # imm = 0xFFFC
    // 1fb: 4e 8d 14 c2                   leaq    (%rdx,%r8,8), %r10
    // 1ff: 49 83 c2 58                   addq    $0x58, %r10
    // 203: 49 89 eb                      movq    %rbp, %r11
    // 206: 49 29 db                      subq    %rbx, %r11
    // 209: 49 83 c3 10                   addq    $0x10, %r11
    // 20d: 31 db                         xorl    %ebx, %ebx
    // 20f: 90                            nop
    // 210: 41 0f 10 44 db f0             movups  -0x10(%r11,%rbx,8), %xmm0
    // 216: 41 0f 10 0c db                movups  (%r11,%rbx,8), %xmm1
    // 21b: 41 0f 11 44 da f0             movups  %xmm0, -0x10(%r10,%rbx,8)
    // 221: 41 0f 11 0c da                movups  %xmm1, (%r10,%rbx,8)
    // 226: 48 83 c3 04                   addq    $0x4, %rbx
    // 22a: 49 39 d9                      cmpq    %rbx, %r9
    // 22d: 75 e1                         jne     0x210 <_JIT_ENTRY+0x210>
    // 22f: 49 39 f9                      cmpq    %rdi, %r9
    // 232: 0f 85 2d ff ff ff             jne     0x165 <_JIT_ENTRY+0x165>
    // 238: 48 89 54 cd 00                movq    %rdx, (%rbp,%rcx,8)
    // 23d: 48 89 c5                      movq    %rax, %rbp
    // 240: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x246 <_JIT_ENTRY+0x246>
    // 0000000000000242:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 240: 
    const unsigned char code_body[576] = {
        0x0f, 0xb7, 0x35, 0x00, 0x00, 0x00, 0x00, 0x89,
        0xf0, 0xf7, 0xd0, 0x48, 0x98, 0x4c, 0x8b, 0x4c,
        0xc5, 0x00, 0xb9, 0xfe, 0xff, 0xff, 0xff, 0x29,
        0xf1, 0x48, 0x63, 0xc9, 0x48, 0x8b, 0x7c, 0xcd,
        0x00, 0x49, 0x83, 0xf9, 0x01, 0x89, 0xf3, 0x83,
        0xdb, 0xff, 0x4c, 0x8b, 0x47, 0x30, 0x49, 0x8b,
        0x94, 0x24, 0xf0, 0x00, 0x00, 0x00, 0x4d, 0x63,
        0x50, 0x4c, 0x4e, 0x8d, 0x14, 0xd2, 0x4d, 0x89,
        0x94, 0x24, 0xf0, 0x00, 0x00, 0x00, 0x48, 0x89,
        0x7a, 0x10, 0x45, 0x8b, 0x10, 0x41, 0xff, 0xc2,
        0x74, 0x03, 0x45, 0x89, 0x10, 0x4c, 0x89, 0x02,
        0x0f, 0x10, 0x47, 0x10, 0x0f, 0x11, 0x42, 0x18,
        0x48, 0xc7, 0x42, 0x28, 0x00, 0x00, 0x00, 0x00,
        0x41, 0x8b, 0x78, 0x48, 0x89, 0x7a, 0x40, 0x48,
        0xc7, 0x42, 0x30, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x81, 0xc0, 0xc8, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0x42, 0x38, 0x66, 0xc7, 0x42, 0x44, 0x00, 0x00,
        0xc6, 0x42, 0x46, 0x00, 0x39, 0xdf, 0x7e, 0x61,
        0x41, 0x89, 0xd8, 0x49, 0x89, 0xfa, 0x4d, 0x29,
        0xc2, 0x49, 0x83, 0xfa, 0x04, 0x72, 0x41, 0x4d,
        0x89, 0xd3, 0x49, 0x83, 0xe3, 0xfc, 0x4a, 0x8d,
        0x1c, 0xc2, 0x48, 0x83, 0xc3, 0x58, 0x45, 0x31,
        0xf6, 0x0f, 0x57, 0xc0, 0x66, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x42, 0x0f, 0x11, 0x44, 0xf3, 0xf0, 0x42, 0x0f,
        0x11, 0x04, 0xf3, 0x49, 0x83, 0xc6, 0x04, 0x4d,
        0x39, 0xf3, 0x75, 0xec, 0x4d, 0x39, 0xda, 0x74,
        0x18, 0x4d, 0x01, 0xd8, 0x0f, 0x1f, 0x40, 0x00,
        0x4a, 0xc7, 0x44, 0xc2, 0x48, 0x00, 0x00, 0x00,
        0x00, 0x49, 0xff, 0xc0, 0x4c, 0x39, 0xc7, 0x75,
        0xef, 0x48, 0x8d, 0x04, 0xc5, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x01, 0xe8, 0x45, 0x31, 0xc0, 0x4d,
        0x85, 0xc9, 0x0f, 0x95, 0xc3, 0x4c, 0x89, 0x4a,
        0x48, 0x48, 0x8b, 0x3d, 0x00, 0x00, 0x00, 0x00,
        0x66, 0x85, 0xff, 0x0f, 0x84, 0x1f, 0x01, 0x00,
        0x00, 0x41, 0x88, 0xd8, 0x83, 0xfe, 0x01, 0x89,
        0xf7, 0x83, 0xd7, 0x00, 0x4c, 0x8b, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x66, 0x41, 0x83, 0xfa, 0x14,
        0x72, 0x30, 0x45, 0x31, 0xd2, 0x4d, 0x85, 0xc9,
        0x41, 0x0f, 0x95, 0xc2, 0x0f, 0xb7, 0x1d, 0x00,
        0x00, 0x00, 0x00, 0x48, 0xc1, 0xe3, 0x03, 0x49,
        0x89, 0xd9, 0x49, 0x29, 0xe9, 0x4f, 0x8d, 0x0c,
        0xd1, 0x49, 0x01, 0xd1, 0x49, 0x83, 0xc1, 0x48,
        0x49, 0x83, 0xf9, 0x20, 0x0f, 0x83, 0x8f, 0x00,
        0x00, 0x00, 0x45, 0x31, 0xc9, 0xc1, 0xe6, 0x03,
        0x49, 0x89, 0xfb, 0x4d, 0x89, 0xca, 0x49, 0x83,
        0xe3, 0x03, 0x74, 0x2c, 0x48, 0x89, 0xeb, 0x48,
        0x29, 0xf3, 0x4e, 0x8d, 0x34, 0xc2, 0x49, 0x83,
        0xc6, 0x48, 0x4d, 0x89, 0xca, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x4e, 0x8b, 0x3c, 0xd3, 0x4f, 0x89, 0x3c, 0xd6,
        0x49, 0xff, 0xc2, 0x49, 0xff, 0xcb, 0x75, 0xf0,
        0x49, 0x29, 0xf9, 0x49, 0x83, 0xf9, 0xfc, 0x0f,
        0x87, 0x8b, 0x00, 0x00, 0x00, 0x4e, 0x8d, 0x04,
        0xc2, 0x49, 0x83, 0xc0, 0x60, 0x49, 0x89, 0xe9,
        0x49, 0x29, 0xf1, 0x49, 0x83, 0xc1, 0x18, 0x90,
        0x4b, 0x8b, 0x74, 0xd1, 0xe8, 0x4b, 0x89, 0x74,
        0xd0, 0xe8, 0x4b, 0x8b, 0x74, 0xd1, 0xf0, 0x4b,
        0x89, 0x74, 0xd0, 0xf0, 0x4b, 0x8b, 0x74, 0xd1,
        0xf8, 0x4b, 0x89, 0x74, 0xd0, 0xf8, 0x4b, 0x8b,
        0x34, 0xd1, 0x4b, 0x89, 0x34, 0xd0, 0x49, 0x83,
        0xc2, 0x04, 0x4c, 0x39, 0xd7, 0x75, 0xd1, 0xeb,
        0x47, 0x41, 0x89, 0xf9, 0x41, 0x81, 0xe1, 0xfc,
        0xff, 0x00, 0x00, 0x4e, 0x8d, 0x14, 0xc2, 0x49,
        0x83, 0xc2, 0x58, 0x49, 0x89, 0xeb, 0x49, 0x29,
        0xdb, 0x49, 0x83, 0xc3, 0x10, 0x31, 0xdb, 0x90,
        0x41, 0x0f, 0x10, 0x44, 0xdb, 0xf0, 0x41, 0x0f,
        0x10, 0x0c, 0xdb, 0x41, 0x0f, 0x11, 0x44, 0xda,
        0xf0, 0x41, 0x0f, 0x11, 0x0c, 0xda, 0x48, 0x83,
        0xc3, 0x04, 0x49, 0x39, 0xd9, 0x75, 0xe1, 0x49,
        0x39, 0xf9, 0x0f, 0x85, 0x2d, 0xff, 0xff, 0xff,
        0x48, 0x89, 0x54, 0xcd, 0x00, 0x48, 0x89, 0xc5,
    };
    // 0: 
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x10c, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x127, (uintptr_t)data + -0x4);
    patch_32r(code + 0x13f, (uintptr_t)data + -0x4);
}

void
emit__INIT_CALL_PY_EXACT_ARGS_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_INIT_CALL_PY_EXACT_ARGS_0.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 75 f0                   movq    -0x10(%rbp), %rsi
    // 4: 48 8b 4d f8                   movq    -0x8(%rbp), %rcx
    // 8: 31 ff                         xorl    %edi, %edi
    // a: 48 85 c9                      testq   %rcx, %rcx
    // d: 40 0f 95 c7                   setne   %dil
    // 11: 4c 8b 46 30                   movq    0x30(%rsi), %r8
    // 15: 49 8b 94 24 f0 00 00 00       movq    0xf0(%r12), %rdx
    // 1d: 49 63 40 4c                   movslq  0x4c(%r8), %rax
    // 21: 48 8d 04 c2                   leaq    (%rdx,%rax,8), %rax
    // 25: 49 89 84 24 f0 00 00 00       movq    %rax, 0xf0(%r12)
    // 2d: 48 89 72 10                   movq    %rsi, 0x10(%rdx)
    // 31: 41 8b 00                      movl    (%r8), %eax
    // 34: ff c0                         incl    %eax
    // 36: 74 03                         je      0x3b <_JIT_ENTRY+0x3b>
    // 38: 41 89 00                      movl    %eax, (%r8)
    // 3b: 48 8d 45 f8                   leaq    -0x8(%rbp), %rax
    // 3f: 4c 89 02                      movq    %r8, (%rdx)
    // 42: 0f 10 46 10                   movups  0x10(%rsi), %xmm0
    // 46: 0f 11 42 18                   movups  %xmm0, 0x18(%rdx)
    // 4a: 48 c7 42 28 00 00 00 00       movq    $0x0, 0x28(%rdx)
    // 52: 41 8b 70 48                   movl    0x48(%r8), %esi
    // 56: 89 72 40                      movl    %esi, 0x40(%rdx)
    // 59: 48 c7 42 30 00 00 00 00       movq    $0x0, 0x30(%rdx)
    // 61: 49 81 c0 c8 00 00 00          addq    $0xc8, %r8
    // 68: 4c 89 42 38                   movq    %r8, 0x38(%rdx)
    // 6c: 66 c7 42 44 00 00             movw    $0x0, 0x44(%rdx)
    // 72: c6 42 46 00                   movb    $0x0, 0x46(%rdx)
    // 76: 39 fe                         cmpl    %edi, %esi
    // 78: 7e 67                         jle     0xe1 <_JIT_ENTRY+0xe1>
    // 7a: 31 ff                         xorl    %edi, %edi
    // 7c: 48 85 c9                      testq   %rcx, %rcx
    // 7f: 40 0f 95 c7                   setne   %dil
    // 83: 49 89 f0                      movq    %rsi, %r8
    // 86: 49 29 f8                      subq    %rdi, %r8
    // 89: 49 83 f8 04                   cmpq    $0x4, %r8
    // 8d: 72 41                         jb      0xd0 <_JIT_ENTRY+0xd0>
    // 8f: 4d 89 c1                      movq    %r8, %r9
    // 92: 49 83 e1 fc                   andq    $-0x4, %r9
    // 96: 4c 8d 14 fa                   leaq    (%rdx,%rdi,8), %r10
    // 9a: 49 83 c2 58                   addq    $0x58, %r10
    // 9e: 45 31 db                      xorl    %r11d, %r11d
    // a1: 0f 57 c0                      xorps   %xmm0, %xmm0
    // a4: 66 66 66 2e 0f 1f 84 00 00 00 00 00   nopw    %cs:(%rax,%rax)
    // b0: 43 0f 11 44 da f0             movups  %xmm0, -0x10(%r10,%r11,8)
    // b6: 43 0f 11 04 da                movups  %xmm0, (%r10,%r11,8)
    // bb: 49 83 c3 04                   addq    $0x4, %r11
    // bf: 4d 39 d9                      cmpq    %r11, %r9
    // c2: 75 ec                         jne     0xb0 <_JIT_ENTRY+0xb0>
    // c4: 4d 39 c8                      cmpq    %r9, %r8
    // c7: 74 18                         je      0xe1 <_JIT_ENTRY+0xe1>
    // c9: 4c 09 cf                      orq     %r9, %rdi
    // cc: 0f 1f 40 00                   nopl    (%rax)
    // d0: 48 c7 44 fa 48 00 00 00 00    movq    $0x0, 0x48(%rdx,%rdi,8)
    // d9: 48 ff c7                      incq    %rdi
    // dc: 48 39 fe                      cmpq    %rdi, %rsi
    // df: 75 ef                         jne     0xd0 <_JIT_ENTRY+0xd0>
    // e1: 48 89 4a 48                   movq    %rcx, 0x48(%rdx)
    // e5: 48 89 55 f0                   movq    %rdx, -0x10(%rbp)
    // e9: 48 89 c5                      movq    %rax, %rbp
    // ec: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xf2 <_JIT_ENTRY+0xf2>
    // 00000000000000ee:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // ec: 
    const unsigned char code_body[236] = {
        0x48, 0x8b, 0x75, 0xf0, 0x48, 0x8b, 0x4d, 0xf8,
        0x31, 0xff, 0x48, 0x85, 0xc9, 0x40, 0x0f, 0x95,
        0xc7, 0x4c, 0x8b, 0x46, 0x30, 0x49, 0x8b, 0x94,
        0x24, 0xf0, 0x00, 0x00, 0x00, 0x49, 0x63, 0x40,
        0x4c, 0x48, 0x8d, 0x04, 0xc2, 0x49, 0x89, 0x84,
        0x24, 0xf0, 0x00, 0x00, 0x00, 0x48, 0x89, 0x72,
        0x10, 0x41, 0x8b, 0x00, 0xff, 0xc0, 0x74, 0x03,
        0x41, 0x89, 0x00, 0x48, 0x8d, 0x45, 0xf8, 0x4c,
        0x89, 0x02, 0x0f, 0x10, 0x46, 0x10, 0x0f, 0x11,
        0x42, 0x18, 0x48, 0xc7, 0x42, 0x28, 0x00, 0x00,
        0x00, 0x00, 0x41, 0x8b, 0x70, 0x48, 0x89, 0x72,
        0x40, 0x48, 0xc7, 0x42, 0x30, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x81, 0xc0, 0xc8, 0x00, 0x00, 0x00,
        0x4c, 0x89, 0x42, 0x38, 0x66, 0xc7, 0x42, 0x44,
        0x00, 0x00, 0xc6, 0x42, 0x46, 0x00, 0x39, 0xfe,
        0x7e, 0x67, 0x31, 0xff, 0x48, 0x85, 0xc9, 0x40,
        0x0f, 0x95, 0xc7, 0x49, 0x89, 0xf0, 0x49, 0x29,
        0xf8, 0x49, 0x83, 0xf8, 0x04, 0x72, 0x41, 0x4d,
        0x89, 0xc1, 0x49, 0x83, 0xe1, 0xfc, 0x4c, 0x8d,
        0x14, 0xfa, 0x49, 0x83, 0xc2, 0x58, 0x45, 0x31,
        0xdb, 0x0f, 0x57, 0xc0, 0x66, 0x66, 0x66, 0x2e,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x43, 0x0f, 0x11, 0x44, 0xda, 0xf0, 0x43, 0x0f,
        0x11, 0x04, 0xda, 0x49, 0x83, 0xc3, 0x04, 0x4d,
        0x39, 0xd9, 0x75, 0xec, 0x4d, 0x39, 0xc8, 0x74,
        0x18, 0x4c, 0x09, 0xcf, 0x0f, 0x1f, 0x40, 0x00,
        0x48, 0xc7, 0x44, 0xfa, 0x48, 0x00, 0x00, 0x00,
        0x00, 0x48, 0xff, 0xc7, 0x48, 0x39, 0xfe, 0x75,
        0xef, 0x48, 0x89, 0x4a, 0x48, 0x48, 0x89, 0x55,
        0xf0, 0x48, 0x89, 0xc5,
    };
    // 0: 
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__INIT_CALL_PY_EXACT_ARGS_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_INIT_CALL_PY_EXACT_ARGS_1.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 75 e8                   movq    -0x18(%rbp), %rsi
    // 4: 48 8b 4d f0                   movq    -0x10(%rbp), %rcx
    // 8: 48 83 f9 01                   cmpq    $0x1, %rcx
    // c: bf 01 00 00 00                movl    $0x1, %edi
    // 11: 83 df ff                      sbbl    $-0x1, %edi
    // 14: 4c 8b 46 30                   movq    0x30(%rsi), %r8
    // 18: 49 8b 94 24 f0 00 00 00       movq    0xf0(%r12), %rdx
    // 20: 49 63 40 4c                   movslq  0x4c(%r8), %rax
    // 24: 48 8d 04 c2                   leaq    (%rdx,%rax,8), %rax
    // 28: 49 89 84 24 f0 00 00 00       movq    %rax, 0xf0(%r12)
    // 30: 48 89 72 10                   movq    %rsi, 0x10(%rdx)
    // 34: 41 8b 00                      movl    (%r8), %eax
    // 37: ff c0                         incl    %eax
    // 39: 74 03                         je      0x3e <_JIT_ENTRY+0x3e>
    // 3b: 41 89 00                      movl    %eax, (%r8)
    // 3e: 48 8d 45 f0                   leaq    -0x10(%rbp), %rax
    // 42: 4c 89 02                      movq    %r8, (%rdx)
    // 45: 0f 10 46 10                   movups  0x10(%rsi), %xmm0
    // 49: 0f 11 42 18                   movups  %xmm0, 0x18(%rdx)
    // 4d: 48 c7 42 28 00 00 00 00       movq    $0x0, 0x28(%rdx)
    // 55: 41 8b 70 48                   movl    0x48(%r8), %esi
    // 59: 89 72 40                      movl    %esi, 0x40(%rdx)
    // 5c: 48 c7 42 30 00 00 00 00       movq    $0x0, 0x30(%rdx)
    // 64: 49 81 c0 c8 00 00 00          addq    $0xc8, %r8
    // 6b: 4c 89 42 38                   movq    %r8, 0x38(%rdx)
    // 6f: 66 c7 42 44 00 00             movw    $0x0, 0x44(%rdx)
    // 75: c6 42 46 00                   movb    $0x0, 0x46(%rdx)
    // 79: 39 fe                         cmpl    %edi, %esi
    // 7b: 7e 54                         jle     0xd1 <_JIT_ENTRY+0xd1>
    // 7d: 89 ff                         movl    %edi, %edi
    // 7f: 49 89 f0                      movq    %rsi, %r8
    // 82: 49 29 f8                      subq    %rdi, %r8
    // 85: 49 83 f8 04                   cmpq    $0x4, %r8
    // 89: 72 35                         jb      0xc0 <_JIT_ENTRY+0xc0>
    // 8b: 4d 89 c1                      movq    %r8, %r9
    // 8e: 49 83 e1 fc                   andq    $-0x4, %r9
    // 92: 4c 8d 14 fa                   leaq    (%rdx,%rdi,8), %r10
    // 96: 49 83 c2 58                   addq    $0x58, %r10
    // 9a: 45 31 db                      xorl    %r11d, %r11d
    // 9d: 0f 57 c0                      xorps   %xmm0, %xmm0
    // a0: 43 0f 11 44 da f0             movups  %xmm0, -0x10(%r10,%r11,8)
    // a6: 43 0f 11 04 da                movups  %xmm0, (%r10,%r11,8)
    // ab: 49 83 c3 04                   addq    $0x4, %r11
    // af: 4d 39 d9                      cmpq    %r11, %r9
    // b2: 75 ec                         jne     0xa0 <_JIT_ENTRY+0xa0>
    // b4: 4d 39 c8                      cmpq    %r9, %r8
    // b7: 74 18                         je      0xd1 <_JIT_ENTRY+0xd1>
    // b9: 4c 09 cf                      orq     %r9, %rdi
    // bc: 0f 1f 40 00                   nopl    (%rax)
    // c0: 48 c7 44 fa 48 00 00 00 00    movq    $0x0, 0x48(%rdx,%rdi,8)
    // c9: 48 ff c7                      incq    %rdi
    // cc: 48 39 fe                      cmpq    %rdi, %rsi
    // cf: 75 ef                         jne     0xc0 <_JIT_ENTRY+0xc0>
    // d1: 31 f6                         xorl    %esi, %esi
    // d3: 48 85 c9                      testq   %rcx, %rcx
    // d6: 40 0f 95 c6                   setne   %sil
    // da: 48 89 4a 48                   movq    %rcx, 0x48(%rdx)
    // de: 48 8b 4d f8                   movq    -0x8(%rbp), %rcx
    // e2: 48 89 4c f2 48                movq    %rcx, 0x48(%rdx,%rsi,8)
    // e7: 48 89 55 e8                   movq    %rdx, -0x18(%rbp)
    // eb: 48 89 c5                      movq    %rax, %rbp
    // ee: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xf4 <_JIT_ENTRY+0xf4>
    // 00000000000000f0:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // ee: 
    const unsigned char code_body[238] = {
        0x48, 0x8b, 0x75, 0xe8, 0x48, 0x8b, 0x4d, 0xf0,
        0x48, 0x83, 0xf9, 0x01, 0xbf, 0x01, 0x00, 0x00,
        0x00, 0x83, 0xdf, 0xff, 0x4c, 0x8b, 0x46, 0x30,
        0x49, 0x8b, 0x94, 0x24, 0xf0, 0x00, 0x00, 0x00,
        0x49, 0x63, 0x40, 0x4c, 0x48, 0x8d, 0x04, 0xc2,
        0x49, 0x89, 0x84, 0x24, 0xf0, 0x00, 0x00, 0x00,
        0x48, 0x89, 0x72, 0x10, 0x41, 0x8b, 0x00, 0xff,
        0xc0, 0x74, 0x03, 0x41, 0x89, 0x00, 0x48, 0x8d,
        0x45, 0xf0, 0x4c, 0x89, 0x02, 0x0f, 0x10, 0x46,
        0x10, 0x0f, 0x11, 0x42, 0x18, 0x48, 0xc7, 0x42,
        0x28, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x70,
        0x48, 0x89, 0x72, 0x40, 0x48, 0xc7, 0x42, 0x30,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc0, 0xc8,
        0x00, 0x00, 0x00, 0x4c, 0x89, 0x42, 0x38, 0x66,
        0xc7, 0x42, 0x44, 0x00, 0x00, 0xc6, 0x42, 0x46,
        0x00, 0x39, 0xfe, 0x7e, 0x54, 0x89, 0xff, 0x49,
        0x89, 0xf0, 0x49, 0x29, 0xf8, 0x49, 0x83, 0xf8,
        0x04, 0x72, 0x35, 0x4d, 0x89, 0xc1, 0x49, 0x83,
        0xe1, 0xfc, 0x4c, 0x8d, 0x14, 0xfa, 0x49, 0x83,
        0xc2, 0x58, 0x45, 0x31, 0xdb, 0x0f, 0x57, 0xc0,
        0x43, 0x0f, 0x11, 0x44, 0xda, 0xf0, 0x43, 0x0f,
        0x11, 0x04, 0xda, 0x49, 0x83, 0xc3, 0x04, 0x4d,
        0x39, 0xd9, 0x75, 0xec, 0x4d, 0x39, 0xc8, 0x74,
        0x18, 0x4c, 0x09, 0xcf, 0x0f, 0x1f, 0x40, 0x00,
        0x48, 0xc7, 0x44, 0xfa, 0x48, 0x00, 0x00, 0x00,
        0x00, 0x48, 0xff, 0xc7, 0x48, 0x39, 0xfe, 0x75,
        0xef, 0x31, 0xf6, 0x48, 0x85, 0xc9, 0x40, 0x0f,
        0x95, 0xc6, 0x48, 0x89, 0x4a, 0x48, 0x48, 0x8b,
        0x4d, 0xf8, 0x48, 0x89, 0x4c, 0xf2, 0x48, 0x48,
        0x89, 0x55, 0xe8, 0x48, 0x89, 0xc5,
    };
    // 0: 
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__INIT_CALL_PY_EXACT_ARGS_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_INIT_CALL_PY_EXACT_ARGS_2.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 75 e0                   movq    -0x20(%rbp), %rsi
    // 4: 48 8b 4d e8                   movq    -0x18(%rbp), %rcx
    // 8: 48 83 f9 01                   cmpq    $0x1, %rcx
    // c: bf 02 00 00 00                movl    $0x2, %edi
    // 11: 83 df ff                      sbbl    $-0x1, %edi
    // 14: 4c 8b 46 30                   movq    0x30(%rsi), %r8
    // 18: 49 8b 94 24 f0 00 00 00       movq    0xf0(%r12), %rdx
    // 20: 49 63 40 4c                   movslq  0x4c(%r8), %rax
    // 24: 48 8d 04 c2                   leaq    (%rdx,%rax,8), %rax
    // 28: 49 89 84 24 f0 00 00 00       movq    %rax, 0xf0(%r12)
    // 30: 48 89 72 10                   movq    %rsi, 0x10(%rdx)
    // 34: 41 8b 00                      movl    (%r8), %eax
    // 37: ff c0                         incl    %eax
    // 39: 74 03                         je      0x3e <_JIT_ENTRY+0x3e>
    // 3b: 41 89 00                      movl    %eax, (%r8)
    // 3e: 48 8d 45 e8                   leaq    -0x18(%rbp), %rax
    // 42: 4c 89 02                      movq    %r8, (%rdx)
    // 45: 0f 10 46 10                   movups  0x10(%rsi), %xmm0
    // 49: 0f 11 42 18                   movups  %xmm0, 0x18(%rdx)
    // 4d: 48 c7 42 28 00 00 00 00       movq    $0x0, 0x28(%rdx)
    // 55: 41 8b 70 48                   movl    0x48(%r8), %esi
    // 59: 89 72 40                      movl    %esi, 0x40(%rdx)
    // 5c: 48 c7 42 30 00 00 00 00       movq    $0x0, 0x30(%rdx)
    // 64: 49 81 c0 c8 00 00 00          addq    $0xc8, %r8
    // 6b: 4c 89 42 38                   movq    %r8, 0x38(%rdx)
    // 6f: 66 c7 42 44 00 00             movw    $0x0, 0x44(%rdx)
    // 75: c6 42 46 00                   movb    $0x0, 0x46(%rdx)
    // 79: 39 fe                         cmpl    %edi, %esi
    // 7b: 7e 54                         jle     0xd1 <_JIT_ENTRY+0xd1>
    // 7d: 89 ff                         movl    %edi, %edi
    // 7f: 49 89 f0                      movq    %rsi, %r8
    // 82: 49 29 f8                      subq    %rdi, %r8
    // 85: 49 83 f8 04                   cmpq    $0x4, %r8
    // 89: 72 35                         jb      0xc0 <_JIT_ENTRY+0xc0>
    // 8b: 4d 89 c1                      movq    %r8, %r9
    // 8e: 49 83 e1 fc                   andq    $-0x4, %r9
    // 92: 4c 8d 14 fa                   leaq    (%rdx,%rdi,8), %r10
    // 96: 49 83 c2 58                   addq    $0x58, %r10
    // 9a: 45 31 db                      xorl    %r11d, %r11d
    // 9d: 0f 57 c0                      xorps   %xmm0, %xmm0
    // a0: 43 0f 11 44 da f0             movups  %xmm0, -0x10(%r10,%r11,8)
    // a6: 43 0f 11 04 da                movups  %xmm0, (%r10,%r11,8)
    // ab: 49 83 c3 04                   addq    $0x4, %r11
    // af: 4d 39 d9                      cmpq    %r11, %r9
    // b2: 75 ec                         jne     0xa0 <_JIT_ENTRY+0xa0>
    // b4: 4d 39 c8                      cmpq    %r9, %r8
    // b7: 74 18                         je      0xd1 <_JIT_ENTRY+0xd1>
    // b9: 4c 09 cf                      orq     %r9, %rdi
    // bc: 0f 1f 40 00                   nopl    (%rax)
    // c0: 48 c7 44 fa 48 00 00 00 00    movq    $0x0, 0x48(%rdx,%rdi,8)
    // c9: 48 ff c7                      incq    %rdi
    // cc: 48 39 fe                      cmpq    %rdi, %rsi
    // cf: 75 ef                         jne     0xc0 <_JIT_ENTRY+0xc0>
    // d1: 31 f6                         xorl    %esi, %esi
    // d3: 48 85 c9                      testq   %rcx, %rcx
    // d6: 40 0f 95 c6                   setne   %sil
    // da: 48 89 4a 48                   movq    %rcx, 0x48(%rdx)
    // de: 48 8b 4d f0                   movq    -0x10(%rbp), %rcx
    // e2: 48 89 4c f2 48                movq    %rcx, 0x48(%rdx,%rsi,8)
    // e7: 48 8b 4d f8                   movq    -0x8(%rbp), %rcx
    // eb: 48 89 4c f2 50                movq    %rcx, 0x50(%rdx,%rsi,8)
    // f0: 48 89 55 e0                   movq    %rdx, -0x20(%rbp)
    // f4: 48 89 c5                      movq    %rax, %rbp
    // f7: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xfd <_JIT_ENTRY+0xfd>
    // 00000000000000f9:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // f7: 
    const unsigned char code_body[247] = {
        0x48, 0x8b, 0x75, 0xe0, 0x48, 0x8b, 0x4d, 0xe8,
        0x48, 0x83, 0xf9, 0x01, 0xbf, 0x02, 0x00, 0x00,
        0x00, 0x83, 0xdf, 0xff, 0x4c, 0x8b, 0x46, 0x30,
        0x49, 0x8b, 0x94, 0x24, 0xf0, 0x00, 0x00, 0x00,
        0x49, 0x63, 0x40, 0x4c, 0x48, 0x8d, 0x04, 0xc2,
        0x49, 0x89, 0x84, 0x24, 0xf0, 0x00, 0x00, 0x00,
        0x48, 0x89, 0x72, 0x10, 0x41, 0x8b, 0x00, 0xff,
        0xc0, 0x74, 0x03, 0x41, 0x89, 0x00, 0x48, 0x8d,
        0x45, 0xe8, 0x4c, 0x89, 0x02, 0x0f, 0x10, 0x46,
        0x10, 0x0f, 0x11, 0x42, 0x18, 0x48, 0xc7, 0x42,
        0x28, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x70,
        0x48, 0x89, 0x72, 0x40, 0x48, 0xc7, 0x42, 0x30,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc0, 0xc8,
        0x00, 0x00, 0x00, 0x4c, 0x89, 0x42, 0x38, 0x66,
        0xc7, 0x42, 0x44, 0x00, 0x00, 0xc6, 0x42, 0x46,
        0x00, 0x39, 0xfe, 0x7e, 0x54, 0x89, 0xff, 0x49,
        0x89, 0xf0, 0x49, 0x29, 0xf8, 0x49, 0x83, 0xf8,
        0x04, 0x72, 0x35, 0x4d, 0x89, 0xc1, 0x49, 0x83,
        0xe1, 0xfc, 0x4c, 0x8d, 0x14, 0xfa, 0x49, 0x83,
        0xc2, 0x58, 0x45, 0x31, 0xdb, 0x0f, 0x57, 0xc0,
        0x43, 0x0f, 0x11, 0x44, 0xda, 0xf0, 0x43, 0x0f,
        0x11, 0x04, 0xda, 0x49, 0x83, 0xc3, 0x04, 0x4d,
        0x39, 0xd9, 0x75, 0xec, 0x4d, 0x39, 0xc8, 0x74,
        0x18, 0x4c, 0x09, 0xcf, 0x0f, 0x1f, 0x40, 0x00,
        0x48, 0xc7, 0x44, 0xfa, 0x48, 0x00, 0x00, 0x00,
        0x00, 0x48, 0xff, 0xc7, 0x48, 0x39, 0xfe, 0x75,
        0xef, 0x31, 0xf6, 0x48, 0x85, 0xc9, 0x40, 0x0f,
        0x95, 0xc6, 0x48, 0x89, 0x4a, 0x48, 0x48, 0x8b,
        0x4d, 0xf0, 0x48, 0x89, 0x4c, 0xf2, 0x48, 0x48,
        0x8b, 0x4d, 0xf8, 0x48, 0x89, 0x4c, 0xf2, 0x50,
        0x48, 0x89, 0x55, 0xe0, 0x48, 0x89, 0xc5,
    };
    // 0: 
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__INIT_CALL_PY_EXACT_ARGS_3(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_INIT_CALL_PY_EXACT_ARGS_3.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 75 d8                   movq    -0x28(%rbp), %rsi
    // 4: 48 8b 55 e0                   movq    -0x20(%rbp), %rdx
    // 8: 48 83 fa 01                   cmpq    $0x1, %rdx
    // c: bf 03 00 00 00                movl    $0x3, %edi
    // 11: 83 df ff                      sbbl    $-0x1, %edi
    // 14: 4c 8b 46 30                   movq    0x30(%rsi), %r8
    // 18: 49 8b 8c 24 f0 00 00 00       movq    0xf0(%r12), %rcx
    // 20: 49 63 40 4c                   movslq  0x4c(%r8), %rax
    // 24: 48 8d 04 c1                   leaq    (%rcx,%rax,8), %rax
    // 28: 49 89 84 24 f0 00 00 00       movq    %rax, 0xf0(%r12)
    // 30: 48 89 71 10                   movq    %rsi, 0x10(%rcx)
    // 34: 41 8b 00                      movl    (%r8), %eax
    // 37: ff c0                         incl    %eax
    // 39: 74 03                         je      0x3e <_JIT_ENTRY+0x3e>
    // 3b: 41 89 00                      movl    %eax, (%r8)
    // 3e: 48 8d 45 e0                   leaq    -0x20(%rbp), %rax
    // 42: 4c 89 01                      movq    %r8, (%rcx)
    // 45: 0f 10 46 10                   movups  0x10(%rsi), %xmm0
    // 49: 0f 11 41 18                   movups  %xmm0, 0x18(%rcx)
    // 4d: 48 c7 41 28 00 00 00 00       movq    $0x0, 0x28(%rcx)
    // 55: 41 8b 70 48                   movl    0x48(%r8), %esi
    // 59: 89 71 40                      movl    %esi, 0x40(%rcx)
    // 5c: 48 c7 41 30 00 00 00 00       movq    $0x0, 0x30(%rcx)
    // 64: 49 81 c0 c8 00 00 00          addq    $0xc8, %r8
    // 6b: 4c 89 41 38                   movq    %r8, 0x38(%rcx)
    // 6f: 66 c7 41 44 00 00             movw    $0x0, 0x44(%rcx)
    // 75: c6 41 46 00                   movb    $0x0, 0x46(%rcx)
    // 79: 39 fe                         cmpl    %edi, %esi
    // 7b: 7e 54                         jle     0xd1 <_JIT_ENTRY+0xd1>
    // 7d: 89 ff                         movl    %edi, %edi
    // 7f: 49 89 f0                      movq    %rsi, %r8
    // 82: 49 29 f8                      subq    %rdi, %r8
    // 85: 49 83 f8 04                   cmpq    $0x4, %r8
    // 89: 72 35                         jb      0xc0 <_JIT_ENTRY+0xc0>
    // 8b: 4d 89 c1                      movq    %r8, %r9
    // 8e: 49 83 e1 fc                   andq    $-0x4, %r9
    // 92: 4c 8d 14 f9                   leaq    (%rcx,%rdi,8), %r10
    // 96: 49 83 c2 58                   addq    $0x58, %r10
    // 9a: 45 31 db                      xorl    %r11d, %r11d
    // 9d: 0f 57 c0                      xorps   %xmm0, %xmm0
    // a0: 43 0f 11 44 da f0             movups  %xmm0, -0x10(%r10,%r11,8)
    // a6: 43 0f 11 04 da                movups  %xmm0, (%r10,%r11,8)
    // ab: 49 83 c3 04                   addq    $0x4, %r11
    // af: 4d 39 d9                      cmpq    %r11, %r9
    // b2: 75 ec                         jne     0xa0 <_JIT_ENTRY+0xa0>
    // b4: 4d 39 c8                      cmpq    %r9, %r8
    // b7: 74 18                         je      0xd1 <_JIT_ENTRY+0xd1>
    // b9: 4c 01 cf                      addq    %r9, %rdi
    // bc: 0f 1f 40 00                   nopl    (%rax)
    // c0: 48 c7 44 f9 48 00 00 00 00    movq    $0x0, 0x48(%rcx,%rdi,8)
    // c9: 48 ff c7                      incq    %rdi
    // cc: 48 39 fe                      cmpq    %rdi, %rsi
    // cf: 75 ef                         jne     0xc0 <_JIT_ENTRY+0xc0>
    // d1: 31 f6                         xorl    %esi, %esi
    // d3: 48 85 d2                      testq   %rdx, %rdx
    // d6: 40 0f 95 c6                   setne   %sil
    // da: 48 89 51 48                   movq    %rdx, 0x48(%rcx)
    // de: 48 8b 55 e8                   movq    -0x18(%rbp), %rdx
    // e2: 48 89 54 f1 48                movq    %rdx, 0x48(%rcx,%rsi,8)
    // e7: 48 8b 55 f0                   movq    -0x10(%rbp), %rdx
    // eb: 48 89 54 f1 50                movq    %rdx, 0x50(%rcx,%rsi,8)
    // f0: 48 8b 55 f8                   movq    -0x8(%rbp), %rdx
    // f4: 48 89 54 f1 58                movq    %rdx, 0x58(%rcx,%rsi,8)
    // f9: 48 89 4d d8                   movq    %rcx, -0x28(%rbp)
    // fd: 48 89 c5                      movq    %rax, %rbp
    // 100: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x106 <_JIT_ENTRY+0x106>
    // 0000000000000102:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 100: 
    const unsigned char code_body[256] = {
        0x48, 0x8b, 0x75, 0xd8, 0x48, 0x8b, 0x55, 0xe0,
        0x48, 0x83, 0xfa, 0x01, 0xbf, 0x03, 0x00, 0x00,
        0x00, 0x83, 0xdf, 0xff, 0x4c, 0x8b, 0x46, 0x30,
        0x49, 0x8b, 0x8c, 0x24, 0xf0, 0x00, 0x00, 0x00,
        0x49, 0x63, 0x40, 0x4c, 0x48, 0x8d, 0x04, 0xc1,
        0x49, 0x89, 0x84, 0x24, 0xf0, 0x00, 0x00, 0x00,
        0x48, 0x89, 0x71, 0x10, 0x41, 0x8b, 0x00, 0xff,
        0xc0, 0x74, 0x03, 0x41, 0x89, 0x00, 0x48, 0x8d,
        0x45, 0xe0, 0x4c, 0x89, 0x01, 0x0f, 0x10, 0x46,
        0x10, 0x0f, 0x11, 0x41, 0x18, 0x48, 0xc7, 0x41,
        0x28, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x70,
        0x48, 0x89, 0x71, 0x40, 0x48, 0xc7, 0x41, 0x30,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc0, 0xc8,
        0x00, 0x00, 0x00, 0x4c, 0x89, 0x41, 0x38, 0x66,
        0xc7, 0x41, 0x44, 0x00, 0x00, 0xc6, 0x41, 0x46,
        0x00, 0x39, 0xfe, 0x7e, 0x54, 0x89, 0xff, 0x49,
        0x89, 0xf0, 0x49, 0x29, 0xf8, 0x49, 0x83, 0xf8,
        0x04, 0x72, 0x35, 0x4d, 0x89, 0xc1, 0x49, 0x83,
        0xe1, 0xfc, 0x4c, 0x8d, 0x14, 0xf9, 0x49, 0x83,
        0xc2, 0x58, 0x45, 0x31, 0xdb, 0x0f, 0x57, 0xc0,
        0x43, 0x0f, 0x11, 0x44, 0xda, 0xf0, 0x43, 0x0f,
        0x11, 0x04, 0xda, 0x49, 0x83, 0xc3, 0x04, 0x4d,
        0x39, 0xd9, 0x75, 0xec, 0x4d, 0x39, 0xc8, 0x74,
        0x18, 0x4c, 0x01, 0xcf, 0x0f, 0x1f, 0x40, 0x00,
        0x48, 0xc7, 0x44, 0xf9, 0x48, 0x00, 0x00, 0x00,
        0x00, 0x48, 0xff, 0xc7, 0x48, 0x39, 0xfe, 0x75,
        0xef, 0x31, 0xf6, 0x48, 0x85, 0xd2, 0x40, 0x0f,
        0x95, 0xc6, 0x48, 0x89, 0x51, 0x48, 0x48, 0x8b,
        0x55, 0xe8, 0x48, 0x89, 0x54, 0xf1, 0x48, 0x48,
        0x8b, 0x55, 0xf0, 0x48, 0x89, 0x54, 0xf1, 0x50,
        0x48, 0x8b, 0x55, 0xf8, 0x48, 0x89, 0x54, 0xf1,
        0x58, 0x48, 0x89, 0x4d, 0xd8, 0x48, 0x89, 0xc5,
    };
    // 0: 
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__INIT_CALL_PY_EXACT_ARGS_4(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_INIT_CALL_PY_EXACT_ARGS_4.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 75 d0                   movq    -0x30(%rbp), %rsi
    // 4: 48 8b 55 d8                   movq    -0x28(%rbp), %rdx
    // 8: 48 83 fa 01                   cmpq    $0x1, %rdx
    // c: bf 04 00 00 00                movl    $0x4, %edi
    // 11: 83 df ff                      sbbl    $-0x1, %edi
    // 14: 4c 8b 46 30                   movq    0x30(%rsi), %r8
    // 18: 49 8b 8c 24 f0 00 00 00       movq    0xf0(%r12), %rcx
    // 20: 49 63 40 4c                   movslq  0x4c(%r8), %rax
    // 24: 48 8d 04 c1                   leaq    (%rcx,%rax,8), %rax
    // 28: 49 89 84 24 f0 00 00 00       movq    %rax, 0xf0(%r12)
    // 30: 48 89 71 10                   movq    %rsi, 0x10(%rcx)
    // 34: 41 8b 00                      movl    (%r8), %eax
    // 37: ff c0                         incl    %eax
    // 39: 74 03                         je      0x3e <_JIT_ENTRY+0x3e>
    // 3b: 41 89 00                      movl    %eax, (%r8)
    // 3e: 48 8d 45 d8                   leaq    -0x28(%rbp), %rax
    // 42: 4c 89 01                      movq    %r8, (%rcx)
    // 45: 0f 10 46 10                   movups  0x10(%rsi), %xmm0
    // 49: 0f 11 41 18                   movups  %xmm0, 0x18(%rcx)
    // 4d: 48 c7 41 28 00 00 00 00       movq    $0x0, 0x28(%rcx)
    // 55: 41 8b 70 48                   movl    0x48(%r8), %esi
    // 59: 89 71 40                      movl    %esi, 0x40(%rcx)
    // 5c: 48 c7 41 30 00 00 00 00       movq    $0x0, 0x30(%rcx)
    // 64: 49 81 c0 c8 00 00 00          addq    $0xc8, %r8
    // 6b: 4c 89 41 38                   movq    %r8, 0x38(%rcx)
    // 6f: 66 c7 41 44 00 00             movw    $0x0, 0x44(%rcx)
    // 75: c6 41 46 00                   movb    $0x0, 0x46(%rcx)
    // 79: 39 fe                         cmpl    %edi, %esi
    // 7b: 7e 54                         jle     0xd1 <_JIT_ENTRY+0xd1>
    // 7d: 89 ff                         movl    %edi, %edi
    // 7f: 49 89 f0                      movq    %rsi, %r8
    // 82: 49 29 f8                      subq    %rdi, %r8
    // 85: 49 83 f8 04                   cmpq    $0x4, %r8
    // 89: 72 35                         jb      0xc0 <_JIT_ENTRY+0xc0>
    // 8b: 4d 89 c1                      movq    %r8, %r9
    // 8e: 49 83 e1 fc                   andq    $-0x4, %r9
    // 92: 4c 8d 14 f9                   leaq    (%rcx,%rdi,8), %r10
    // 96: 49 83 c2 58                   addq    $0x58, %r10
    // 9a: 45 31 db                      xorl    %r11d, %r11d
    // 9d: 0f 57 c0                      xorps   %xmm0, %xmm0
    // a0: 43 0f 11 44 da f0             movups  %xmm0, -0x10(%r10,%r11,8)
    // a6: 43 0f 11 04 da                movups  %xmm0, (%r10,%r11,8)
    // ab: 49 83 c3 04                   addq    $0x4, %r11
    // af: 4d 39 d9                      cmpq    %r11, %r9
    // b2: 75 ec                         jne     0xa0 <_JIT_ENTRY+0xa0>
    // b4: 4d 39 c8                      cmpq    %r9, %r8
    // b7: 74 18                         je      0xd1 <_JIT_ENTRY+0xd1>
    // b9: 4c 01 cf                      addq    %r9, %rdi
    // bc: 0f 1f 40 00                   nopl    (%rax)
    // c0: 48 c7 44 f9 48 00 00 00 00    movq    $0x0, 0x48(%rcx,%rdi,8)
    // c9: 48 ff c7                      incq    %rdi
    // cc: 48 39 fe                      cmpq    %rdi, %rsi
    // cf: 75 ef                         jne     0xc0 <_JIT_ENTRY+0xc0>
    // d1: 31 f6                         xorl    %esi, %esi
    // d3: 48 85 d2                      testq   %rdx, %rdx
    // d6: 40 0f 95 c6                   setne   %sil
    // da: 48 89 51 48                   movq    %rdx, 0x48(%rcx)
    // de: 48 8b 55 e0                   movq    -0x20(%rbp), %rdx
    // e2: 48 89 54 f1 48                movq    %rdx, 0x48(%rcx,%rsi,8)
    // e7: 48 8b 55 e8                   movq    -0x18(%rbp), %rdx
    // eb: 48 89 54 f1 50                movq    %rdx, 0x50(%rcx,%rsi,8)
    // f0: 48 8b 55 f0                   movq    -0x10(%rbp), %rdx
    // f4: 48 89 54 f1 58                movq    %rdx, 0x58(%rcx,%rsi,8)
    // f9: 48 8b 55 f8                   movq    -0x8(%rbp), %rdx
    // fd: 48 89 54 f1 60                movq    %rdx, 0x60(%rcx,%rsi,8)
    // 102: 48 89 4d d0                   movq    %rcx, -0x30(%rbp)
    // 106: 48 89 c5                      movq    %rax, %rbp
    // 109: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x10f <_JIT_ENTRY+0x10f>
    // 000000000000010b:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 109: 
    const unsigned char code_body[265] = {
        0x48, 0x8b, 0x75, 0xd0, 0x48, 0x8b, 0x55, 0xd8,
        0x48, 0x83, 0xfa, 0x01, 0xbf, 0x04, 0x00, 0x00,
        0x00, 0x83, 0xdf, 0xff, 0x4c, 0x8b, 0x46, 0x30,
        0x49, 0x8b, 0x8c, 0x24, 0xf0, 0x00, 0x00, 0x00,
        0x49, 0x63, 0x40, 0x4c, 0x48, 0x8d, 0x04, 0xc1,
        0x49, 0x89, 0x84, 0x24, 0xf0, 0x00, 0x00, 0x00,
        0x48, 0x89, 0x71, 0x10, 0x41, 0x8b, 0x00, 0xff,
        0xc0, 0x74, 0x03, 0x41, 0x89, 0x00, 0x48, 0x8d,
        0x45, 0xd8, 0x4c, 0x89, 0x01, 0x0f, 0x10, 0x46,
        0x10, 0x0f, 0x11, 0x41, 0x18, 0x48, 0xc7, 0x41,
        0x28, 0x00, 0x00, 0x00, 0x00, 0x41, 0x8b, 0x70,
        0x48, 0x89, 0x71, 0x40, 0x48, 0xc7, 0x41, 0x30,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x81, 0xc0, 0xc8,
        0x00, 0x00, 0x00, 0x4c, 0x89, 0x41, 0x38, 0x66,
        0xc7, 0x41, 0x44, 0x00, 0x00, 0xc6, 0x41, 0x46,
        0x00, 0x39, 0xfe, 0x7e, 0x54, 0x89, 0xff, 0x49,
        0x89, 0xf0, 0x49, 0x29, 0xf8, 0x49, 0x83, 0xf8,
        0x04, 0x72, 0x35, 0x4d, 0x89, 0xc1, 0x49, 0x83,
        0xe1, 0xfc, 0x4c, 0x8d, 0x14, 0xf9, 0x49, 0x83,
        0xc2, 0x58, 0x45, 0x31, 0xdb, 0x0f, 0x57, 0xc0,
        0x43, 0x0f, 0x11, 0x44, 0xda, 0xf0, 0x43, 0x0f,
        0x11, 0x04, 0xda, 0x49, 0x83, 0xc3, 0x04, 0x4d,
        0x39, 0xd9, 0x75, 0xec, 0x4d, 0x39, 0xc8, 0x74,
        0x18, 0x4c, 0x01, 0xcf, 0x0f, 0x1f, 0x40, 0x00,
        0x48, 0xc7, 0x44, 0xf9, 0x48, 0x00, 0x00, 0x00,
        0x00, 0x48, 0xff, 0xc7, 0x48, 0x39, 0xfe, 0x75,
        0xef, 0x31, 0xf6, 0x48, 0x85, 0xd2, 0x40, 0x0f,
        0x95, 0xc6, 0x48, 0x89, 0x51, 0x48, 0x48, 0x8b,
        0x55, 0xe0, 0x48, 0x89, 0x54, 0xf1, 0x48, 0x48,
        0x8b, 0x55, 0xe8, 0x48, 0x89, 0x54, 0xf1, 0x50,
        0x48, 0x8b, 0x55, 0xf0, 0x48, 0x89, 0x54, 0xf1,
        0x58, 0x48, 0x8b, 0x55, 0xf8, 0x48, 0x89, 0x54,
        0xf1, 0x60, 0x48, 0x89, 0x4d, 0xd0, 0x48, 0x89,
        0xc5,
    };
    // 0: 
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__INTERNAL_INCREMENT_OPT_COUNTER(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_INTERNAL_INCREMENT_OPT_COUNTER.o:     file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 4: 48 ff 40 18                   incq    0x18(%rax)
    // 8: 48 83 c5 f8                   addq    $-0x8, %rbp
    // c: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x12 <_JIT_ENTRY+0x12>
    // 000000000000000e:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // c: 
    const unsigned char code_body[12] = {
        0x48, 0x8b, 0x45, 0xf8, 0x48, 0xff, 0x40, 0x18,
        0x48, 0x83, 0xc5, 0xf8,
    };
    // 0: 
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__IS_NONE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_IS_NONE.o:    file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 7d f8                   movq    -0x8(%rbp), %rdi
    // 5: 48 3b 3d 00 00 00 00          cmpq    (%rip), %rdi            # 0xc <_JIT_ENTRY+0xc>
    // 0000000000000008:  R_X86_64_REX_GOTPCRELX       _Py_NoneStruct-0x4
    // c: 74 21                         je      0x2f <_JIT_ENTRY+0x2f>
    // e: 48 8b 07                      movq    (%rdi), %rax
    // 11: 48 8b 1d 00 00 00 00          movq    (%rip), %rbx            # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  R_X86_64_REX_GOTPCRELX       _Py_FalseStruct-0x4
    // 18: 85 c0                         testl   %eax, %eax
    // 1a: 78 08                         js      0x24 <_JIT_ENTRY+0x24>
    // 1c: 48 ff c8                      decq    %rax
    // 1f: 48 89 07                      movq    %rax, (%rdi)
    // 22: 74 1d                         je      0x41 <_JIT_ENTRY+0x41>
    // 24: 48 89 5d f8                   movq    %rbx, -0x8(%rbp)
    // 28: 58                            popq    %rax
    // 29: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x2f <_JIT_ENTRY+0x2f>
    // 000000000000002b:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 2f: 48 8b 1d 00 00 00 00          movq    (%rip), %rbx            # 0x36 <_JIT_ENTRY+0x36>
    // 0000000000000032:  R_X86_64_REX_GOTPCRELX       _Py_TrueStruct-0x4
    // 36: 48 89 5d f8                   movq    %rbx, -0x8(%rbp)
    // 3a: 58                            popq    %rax
    // 3b: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x41 <_JIT_ENTRY+0x41>
    // 000000000000003d:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 41: ff 15 00 00 00 00             callq   *(%rip)                 # 0x47 <_JIT_ENTRY+0x47>
    // 0000000000000043:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 47: 48 89 5d f8                   movq    %rbx, -0x8(%rbp)
    // 4b: 58                            popq    %rax
    // 4c: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x52 <_JIT_ENTRY+0x52>
    // 000000000000004e:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 4c: 
    const unsigned char code_body[76] = {
        0x50, 0x48, 0x8b, 0x7d, 0xf8, 0x48, 0x3b, 0x3d,
        0x00, 0x00, 0x00, 0x00, 0x74, 0x21, 0x48, 0x8b,
        0x07, 0x48, 0x8b, 0x1d, 0x00, 0x00, 0x00, 0x00,
        0x85, 0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8, 0x48,
        0x89, 0x07, 0x74, 0x1d, 0x48, 0x89, 0x5d, 0xf8,
        0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89,
        0x5d, 0xf8, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0x5d, 0xf8, 0x58,
    };
    // 0: 
    // 0: &_Py_NoneStruct+0x0
    // 8: &_Py_FalseStruct+0x0
    // 10: CONTINUE
    // 18: &_Py_TrueStruct+0x0
    // 20: &_Py_Dealloc+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x8, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x2b, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x32, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x3d, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x43, (uintptr_t)data + 0x1c);
}

void
emit__IS_OP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_IS_OP.o:      file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 5d f0                   movq    -0x10(%rbp), %rbx
    // 5: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 9: 48 8b 03                      movq    (%rbx), %rax
    // c: 85 c0                         testl   %eax, %eax
    // e: 78 08                         js      0x18 <_JIT_ENTRY+0x18>
    // 10: 48 ff c8                      decq    %rax
    // 13: 48 89 03                      movq    %rax, (%rbx)
    // 16: 74 1a                         je      0x32 <_JIT_ENTRY+0x32>
    // 18: 49 8b 06                      movq    (%r14), %rax
    // 1b: 85 c0                         testl   %eax, %eax
    // 1d: 78 23                         js      0x42 <_JIT_ENTRY+0x42>
    // 1f: 48 ff c8                      decq    %rax
    // 22: 49 89 06                      movq    %rax, (%r14)
    // 25: 75 1b                         jne     0x42 <_JIT_ENTRY+0x42>
    // 27: 4c 89 f7                      movq    %r14, %rdi
    // 2a: ff 15 00 00 00 00             callq   *(%rip)                 # 0x30 <_JIT_ENTRY+0x30>
    // 000000000000002c:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 30: eb 10                         jmp     0x42 <_JIT_ENTRY+0x42>
    // 32: 48 89 df                      movq    %rbx, %rdi
    // 35: ff 15 00 00 00 00             callq   *(%rip)                 # 0x3b <_JIT_ENTRY+0x3b>
    // 0000000000000037:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 3b: 49 8b 06                      movq    (%r14), %rax
    // 3e: 85 c0                         testl   %eax, %eax
    // 40: 79 dd                         jns     0x1f <_JIT_ENTRY+0x1f>
    // 42: 48 8d 45 f8                   leaq    -0x8(%rbp), %rax
    // 46: 31 c9                         xorl    %ecx, %ecx
    // 48: 4c 39 f3                      cmpq    %r14, %rbx
    // 4b: 0f 94 c1                      sete    %cl
    // 4e: 48 8b 15 00 00 00 00          movq    (%rip), %rdx            # 0x55 <_JIT_ENTRY+0x55>
    // 0000000000000051:  R_X86_64_REX_GOTPCRELX       _JIT_OPARG-0x4
    // 55: 66 39 d1                      cmpw    %dx, %cx
    // 58: 75 15                         jne     0x6f <_JIT_ENTRY+0x6f>
    // 5a: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x61 <_JIT_ENTRY+0x61>
    // 000000000000005d:  R_X86_64_REX_GOTPCRELX       _Py_FalseStruct-0x4
    // 61: 48 89 4d f0                   movq    %rcx, -0x10(%rbp)
    // 65: 48 89 c5                      movq    %rax, %rbp
    // 68: 58                            popq    %rax
    // 69: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x6f <_JIT_ENTRY+0x6f>
    // 000000000000006b:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 6f: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x76 <_JIT_ENTRY+0x76>
    // 0000000000000072:  R_X86_64_REX_GOTPCRELX       _Py_TrueStruct-0x4
    // 76: 48 89 4d f0                   movq    %rcx, -0x10(%rbp)
    // 7a: 48 89 c5                      movq    %rax, %rbp
    // 7d: 58                            popq    %rax
    // 7e: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x84 <_JIT_ENTRY+0x84>
    // 0000000000000080:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 7e: 
    const unsigned char code_body[126] = {
        0x50, 0x48, 0x8b, 0x5d, 0xf0, 0x4c, 0x8b, 0x75,
        0xf8, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x08,
        0x48, 0xff, 0xc8, 0x48, 0x89, 0x03, 0x74, 0x1a,
        0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x23, 0x48,
        0xff, 0xc8, 0x49, 0x89, 0x06, 0x75, 0x1b, 0x4c,
        0x89, 0xf7, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0xeb, 0x10, 0x48, 0x89, 0xdf, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x8b, 0x06, 0x85, 0xc0,
        0x79, 0xdd, 0x48, 0x8d, 0x45, 0xf8, 0x31, 0xc9,
        0x4c, 0x39, 0xf3, 0x0f, 0x94, 0xc1, 0x48, 0x8b,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x66, 0x39, 0xd1,
        0x75, 0x15, 0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0x4d, 0xf0, 0x48, 0x89, 0xc5,
        0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89,
        0x4d, 0xf0, 0x48, 0x89, 0xc5, 0x58,
    };
    // 0: 
    // 0: &_Py_Dealloc+0x0
    // 8: OPARG
    // 10: &_Py_FalseStruct+0x0
    // 18: CONTINUE
    // 20: &_Py_TrueStruct+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, (uintptr_t)&_Py_TrueStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x2c, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x37, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x51, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x5d, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x6b, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x72, (uintptr_t)data + 0x1c);
}

void
emit__ITER_CHECK_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_ITER_CHECK_LIST.o:    file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 4: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  R_X86_64_REX_GOTPCRELX       PyListIter_Type-0x4
    // f: 74 06                         je      0x17 <_JIT_ENTRY+0x17>
    // 11: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x17 <_JIT_ENTRY+0x17>
    // 0000000000000013:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 17: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 17: 
    const unsigned char code_body[23] = {
        0x48, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x40, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x06, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &PyListIter_Type+0x0
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyListIter_Type);
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x13, (uintptr_t)data + 0x4);
}

void
emit__ITER_CHECK_RANGE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_ITER_CHECK_RANGE.o:   file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 4: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  R_X86_64_REX_GOTPCRELX       PyRangeIter_Type-0x4
    // f: 74 06                         je      0x17 <_JIT_ENTRY+0x17>
    // 11: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x17 <_JIT_ENTRY+0x17>
    // 0000000000000013:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 17: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 17: 
    const unsigned char code_body[23] = {
        0x48, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x40, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x06, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &PyRangeIter_Type+0x0
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyRangeIter_Type);
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x13, (uintptr_t)data + 0x4);
}

void
emit__ITER_CHECK_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_ITER_CHECK_TUPLE.o:   file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 4: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  R_X86_64_REX_GOTPCRELX       PyTupleIter_Type-0x4
    // f: 74 06                         je      0x17 <_JIT_ENTRY+0x17>
    // 11: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x17 <_JIT_ENTRY+0x17>
    // 0000000000000013:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 17: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 17: 
    const unsigned char code_body[23] = {
        0x48, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x40, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x06, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &PyTupleIter_Type+0x0
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyTupleIter_Type);
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x13, (uintptr_t)data + 0x4);
}

void
emit__ITER_NEXT_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_ITER_NEXT_LIST.o:     file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 4: 48 8b 48 10                   movq    0x10(%rax), %rcx
    // 8: 48 8b 50 18                   movq    0x18(%rax), %rdx
    // c: 48 8b 52 18                   movq    0x18(%rdx), %rdx
    // 10: 48 8d 71 01                   leaq    0x1(%rcx), %rsi
    // 14: 48 89 70 10                   movq    %rsi, 0x10(%rax)
    // 18: 48 8b 04 ca                   movq    (%rdx,%rcx,8), %rax
    // 1c: 8b 08                         movl    (%rax), %ecx
    // 1e: ff c1                         incl    %ecx
    // 20: 74 02                         je      0x24 <_JIT_ENTRY+0x24>
    // 22: 89 08                         movl    %ecx, (%rax)
    // 24: 48 89 45 00                   movq    %rax, (%rbp)
    // 28: 48 83 c5 08                   addq    $0x8, %rbp
    // 2c: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x32 <_JIT_ENTRY+0x32>
    // 000000000000002e:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 2c: 
    const unsigned char code_body[44] = {
        0x48, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x48, 0x10,
        0x48, 0x8b, 0x50, 0x18, 0x48, 0x8b, 0x52, 0x18,
        0x48, 0x8d, 0x71, 0x01, 0x48, 0x89, 0x70, 0x10,
        0x48, 0x8b, 0x04, 0xca, 0x8b, 0x08, 0xff, 0xc1,
        0x74, 0x02, 0x89, 0x08, 0x48, 0x89, 0x45, 0x00,
        0x48, 0x83, 0xc5, 0x08,
    };
    // 0: 
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__ITER_NEXT_RANGE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_ITER_NEXT_RANGE.o:    file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 5: 48 8b 78 10                   movq    0x10(%rax), %rdi
    // 9: 48 8b 48 18                   movq    0x18(%rax), %rcx
    // d: 48 01 f9                      addq    %rdi, %rcx
    // 10: 48 89 48 10                   movq    %rcx, 0x10(%rax)
    // 14: 48 ff 48 20                   decq    0x20(%rax)
    // 18: ff 15 00 00 00 00             callq   *(%rip)                 # 0x1e <_JIT_ENTRY+0x1e>
    // 000000000000001a:  R_X86_64_GOTPCRELX   PyLong_FromLong-0x4
    // 1e: 48 85 c0                      testq   %rax, %rax
    // 21: 74 0f                         je      0x32 <_JIT_ENTRY+0x32>
    // 23: 48 89 45 00                   movq    %rax, (%rbp)
    // 27: 48 83 c5 08                   addq    $0x8, %rbp
    // 2b: 58                            popq    %rax
    // 2c: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x32 <_JIT_ENTRY+0x32>
    // 000000000000002e:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 32: 58                            popq    %rax
    // 33: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x39 <_JIT_ENTRY+0x39>
    // 0000000000000035:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 39: 
    const unsigned char code_body[57] = {
        0x50, 0x48, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x78,
        0x10, 0x48, 0x8b, 0x48, 0x18, 0x48, 0x01, 0xf9,
        0x48, 0x89, 0x48, 0x10, 0x48, 0xff, 0x48, 0x20,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85,
        0xc0, 0x74, 0x0f, 0x48, 0x89, 0x45, 0x00, 0x48,
        0x83, 0xc5, 0x08, 0x58, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: 
    // 0: &PyLong_FromLong+0x0
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_FromLong);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1a, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x35, (uintptr_t)data + 0xc);
}

void
emit__ITER_NEXT_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_ITER_NEXT_TUPLE.o:    file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 4: 48 8b 48 10                   movq    0x10(%rax), %rcx
    // 8: 48 8b 50 18                   movq    0x18(%rax), %rdx
    // c: 48 8d 71 01                   leaq    0x1(%rcx), %rsi
    // 10: 48 89 70 10                   movq    %rsi, 0x10(%rax)
    // 14: 48 8b 44 ca 18                movq    0x18(%rdx,%rcx,8), %rax
    // 19: 8b 08                         movl    (%rax), %ecx
    // 1b: ff c1                         incl    %ecx
    // 1d: 74 02                         je      0x21 <_JIT_ENTRY+0x21>
    // 1f: 89 08                         movl    %ecx, (%rax)
    // 21: 48 89 45 00                   movq    %rax, (%rbp)
    // 25: 48 83 c5 08                   addq    $0x8, %rbp
    // 29: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x2f <_JIT_ENTRY+0x2f>
    // 000000000000002b:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 29: 
    const unsigned char code_body[41] = {
        0x48, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x48, 0x10,
        0x48, 0x8b, 0x50, 0x18, 0x48, 0x8d, 0x71, 0x01,
        0x48, 0x89, 0x70, 0x10, 0x48, 0x8b, 0x44, 0xca,
        0x18, 0x8b, 0x08, 0xff, 0xc1, 0x74, 0x02, 0x89,
        0x08, 0x48, 0x89, 0x45, 0x00, 0x48, 0x83, 0xc5,
        0x08,
    };
    // 0: 
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__JUMP_TO_TOP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_JUMP_TO_TOP.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x6 <_JIT_ENTRY+0x6>
    // 0000000000000002:  R_X86_64_GOTPCRELX   _JIT_TOP-0x4
    // 6: 
    const unsigned char code_body[6] = {
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: TOP
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction_starts[1]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x2, (uintptr_t)data + -0x4);
}

void
emit__LIST_APPEND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LIST_APPEND.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 8b 05 00 00 00 00             movl    (%rip), %eax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  R_X86_64_GOTPCRELX   _JIT_OPARG-0x4
    // 7: f7 d0                         notl    %eax
    // 9: 48 8b 75 f8                   movq    -0x8(%rbp), %rsi
    // d: c1 e0 03                      shll    $0x3, %eax
    // 10: 48 0d 00 00 f8 ff             orq     $-0x80000, %rax         # imm = 0xFFF80000
    // 16: 48 8b 7c 05 00                movq    (%rbp,%rax), %rdi
    // 1b: 48 8b 47 10                   movq    0x10(%rdi), %rax
    // 1f: 48 39 47 20                   cmpq    %rax, 0x20(%rdi)
    // 23: 7e 1a                         jle     0x3f <_JIT_ENTRY+0x3f>
    // 25: 48 8b 4f 18                   movq    0x18(%rdi), %rcx
    // 29: 48 89 34 c1                   movq    %rsi, (%rcx,%rax,8)
    // 2d: 48 ff c0                      incq    %rax
    // 30: 48 89 47 10                   movq    %rax, 0x10(%rdi)
    // 34: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 38: 58                            popq    %rax
    // 39: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x3f <_JIT_ENTRY+0x3f>
    // 000000000000003b:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 3f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x45 <_JIT_ENTRY+0x45>
    // 0000000000000041:  R_X86_64_GOTPCRELX   _PyList_AppendTakeRefListResize-0x4
    // 45: 85 c0                         testl   %eax, %eax
    // 47: 78 0b                         js      0x54 <_JIT_ENTRY+0x54>
    // 49: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 4d: 58                            popq    %rax
    // 4e: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x54 <_JIT_ENTRY+0x54>
    // 0000000000000050:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 54: 58                            popq    %rax
    // 55: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x5b <_JIT_ENTRY+0x5b>
    // 0000000000000057:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 5b: 
    const unsigned char code_body[91] = {
        0x50, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0xf7,
        0xd0, 0x48, 0x8b, 0x75, 0xf8, 0xc1, 0xe0, 0x03,
        0x48, 0x0d, 0x00, 0x00, 0xf8, 0xff, 0x48, 0x8b,
        0x7c, 0x05, 0x00, 0x48, 0x8b, 0x47, 0x10, 0x48,
        0x39, 0x47, 0x20, 0x7e, 0x1a, 0x48, 0x8b, 0x4f,
        0x18, 0x48, 0x89, 0x34, 0xc1, 0x48, 0xff, 0xc0,
        0x48, 0x89, 0x47, 0x10, 0x48, 0x83, 0xc5, 0xf8,
        0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78,
        0x0b, 0x48, 0x83, 0xc5, 0xf8, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x58, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: CONTINUE
    // 10: &_PyList_AppendTakeRefListResize+0x0
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_PyList_AppendTakeRefListResize);
    patch_64(data + 0x18, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x3b, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x41, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x50, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x57, (uintptr_t)data + 0x14);
}

void
emit__LIST_EXTEND(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LIST_EXTEND.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 8b 05 00 00 00 00             movl    (%rip), %eax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  R_X86_64_GOTPCRELX   _JIT_OPARG-0x4
    // 7: f7 d0                         notl    %eax
    // 9: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // d: c1 e0 03                      shll    $0x3, %eax
    // 10: 48 0d 00 00 f8 ff             orq     $-0x80000, %rax         # imm = 0xFFF80000
    // 16: 48 8b 7c 05 00                movq    (%rbp,%rax), %rdi
    // 1b: 48 89 de                      movq    %rbx, %rsi
    // 1e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x24 <_JIT_ENTRY+0x24>
    // 0000000000000020:  R_X86_64_GOTPCRELX   _PyList_Extend-0x4
    // 24: 48 85 c0                      testq   %rax, %rax
    // 27: 74 1a                         je      0x43 <_JIT_ENTRY+0x43>
    // 29: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 2d: 48 8b 03                      movq    (%rbx), %rax
    // 30: 85 c0                         testl   %eax, %eax
    // 32: 78 08                         js      0x3c <_JIT_ENTRY+0x3c>
    // 34: 48 ff c8                      decq    %rax
    // 37: 48 89 03                      movq    %rax, (%rbx)
    // 3a: 74 75                         je      0xb1 <_JIT_ENTRY+0xb1>
    // 3c: 58                            popq    %rax
    // 3d: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x43 <_JIT_ENTRY+0x43>
    // 000000000000003f:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 43: 4c 8b 35 00 00 00 00          movq    (%rip), %r14            # 0x4a <_JIT_ENTRY+0x4a>
    // 0000000000000046:  R_X86_64_REX_GOTPCRELX       PyExc_TypeError-0x4
    // 4a: 49 8b 36                      movq    (%r14), %rsi
    // 4d: 4c 89 e7                      movq    %r12, %rdi
    // 50: ff 15 00 00 00 00             callq   *(%rip)                 # 0x56 <_JIT_ENTRY+0x56>
    // 0000000000000052:  R_X86_64_GOTPCRELX   _PyErr_ExceptionMatches-0x4
    // 56: 85 c0                         testl   %eax, %eax
    // 58: 74 41                         je      0x9b <_JIT_ENTRY+0x9b>
    // 5a: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // 5e: 48 83 b8 d8 00 00 00 00       cmpq    $0x0, 0xd8(%rax)
    // 66: 75 33                         jne     0x9b <_JIT_ENTRY+0x9b>
    // 68: 48 89 df                      movq    %rbx, %rdi
    // 6b: ff 15 00 00 00 00             callq   *(%rip)                 # 0x71 <_JIT_ENTRY+0x71>
    // 000000000000006d:  R_X86_64_GOTPCRELX   PySequence_Check-0x4
    // 71: 85 c0                         testl   %eax, %eax
    // 73: 75 26                         jne     0x9b <_JIT_ENTRY+0x9b>
    // 75: 4c 89 e7                      movq    %r12, %rdi
    // 78: ff 15 00 00 00 00             callq   *(%rip)                 # 0x7e <_JIT_ENTRY+0x7e>
    // 000000000000007a:  R_X86_64_GOTPCRELX   _PyErr_Clear-0x4
    // 7e: 49 8b 36                      movq    (%r14), %rsi
    // 81: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // 85: 48 8b 48 18                   movq    0x18(%rax), %rcx
    // 89: 48 8d 15 00 00 00 00          leaq    (%rip), %rdx            # 0x90 <_JIT_ENTRY+0x90>
    // 000000000000008c:  R_X86_64_PC32        .L.str.11-0x4
    // 90: 4c 89 e7                      movq    %r12, %rdi
    // 93: 31 c0                         xorl    %eax, %eax
    // 95: ff 15 00 00 00 00             callq   *(%rip)                 # 0x9b <_JIT_ENTRY+0x9b>
    // 0000000000000097:  R_X86_64_GOTPCRELX   _PyErr_Format-0x4
    // 9b: 48 8b 03                      movq    (%rbx), %rax
    // 9e: 85 c0                         testl   %eax, %eax
    // a0: 78 08                         js      0xaa <_JIT_ENTRY+0xaa>
    // a2: 48 ff c8                      decq    %rax
    // a5: 48 89 03                      movq    %rax, (%rbx)
    // a8: 74 17                         je      0xc1 <_JIT_ENTRY+0xc1>
    // aa: 58                            popq    %rax
    // ab: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xb1 <_JIT_ENTRY+0xb1>
    // 00000000000000ad:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // b1: 48 89 df                      movq    %rbx, %rdi
    // b4: ff 15 00 00 00 00             callq   *(%rip)                 # 0xba <_JIT_ENTRY+0xba>
    // 00000000000000b6:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // ba: 58                            popq    %rax
    // bb: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xc1 <_JIT_ENTRY+0xc1>
    // 00000000000000bd:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // c1: 48 89 df                      movq    %rbx, %rdi
    // c4: ff 15 00 00 00 00             callq   *(%rip)                 # 0xca <_JIT_ENTRY+0xca>
    // 00000000000000c6:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // ca: 58                            popq    %rax
    // cb: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xd1 <_JIT_ENTRY+0xd1>
    // 00000000000000cd:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // d1: 
    const unsigned char code_body[209] = {
        0x50, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0xf7,
        0xd0, 0x48, 0x8b, 0x5d, 0xf8, 0xc1, 0xe0, 0x03,
        0x48, 0x0d, 0x00, 0x00, 0xf8, 0xff, 0x48, 0x8b,
        0x7c, 0x05, 0x00, 0x48, 0x89, 0xde, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74,
        0x1a, 0x48, 0x83, 0xc5, 0xf8, 0x48, 0x8b, 0x03,
        0x85, 0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8, 0x48,
        0x89, 0x03, 0x74, 0x75, 0x58, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x4c, 0x8b, 0x35, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x8b, 0x36, 0x4c, 0x89, 0xe7,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0,
        0x74, 0x41, 0x48, 0x8b, 0x43, 0x08, 0x48, 0x83,
        0xb8, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x75, 0x33,
        0x48, 0x89, 0xdf, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x85, 0xc0, 0x75, 0x26, 0x4c, 0x89, 0xe7,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b,
        0x36, 0x48, 0x8b, 0x43, 0x08, 0x48, 0x8b, 0x48,
        0x18, 0x48, 0x8d, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x4c, 0x89, 0xe7, 0x31, 0xc0, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x03, 0x85, 0xc0,
        0x78, 0x08, 0x48, 0xff, 0xc8, 0x48, 0x89, 0x03,
        0x74, 0x17, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xdf, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xdf, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: 'Value after * must be an iterable, not %.200s\x00'
    // 2e: 00 00
    // 30: OPARG
    // 38: &_PyList_Extend+0x0
    // 40: CONTINUE
    // 48: &PyExc_TypeError+0x0
    // 50: &_PyErr_ExceptionMatches+0x0
    // 58: &PySequence_Check+0x0
    // 60: &_PyErr_Clear+0x0
    // 68: &_PyErr_Format+0x0
    // 70: ERROR_TARGET
    // 78: &_Py_Dealloc+0x0
    const unsigned char data_body[128] = {
        0x56, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x61, 0x66,
        0x74, 0x65, 0x72, 0x20, 0x2a, 0x20, 0x6d, 0x75,
        0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x6e,
        0x20, 0x69, 0x74, 0x65, 0x72, 0x61, 0x62, 0x6c,
        0x65, 0x2c, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x25,
        0x2e, 0x32, 0x30, 0x30, 0x73, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x30, instruction->oparg);
    patch_64(data + 0x38, (uintptr_t)&_PyList_Extend);
    patch_64(data + 0x40, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x48, (uintptr_t)&PyExc_TypeError);
    patch_64(data + 0x50, (uintptr_t)&_PyErr_ExceptionMatches);
    patch_64(data + 0x58, (uintptr_t)&PySequence_Check);
    patch_64(data + 0x60, (uintptr_t)&_PyErr_Clear);
    patch_64(data + 0x68, (uintptr_t)&_PyErr_Format);
    patch_64(data + 0x70, instruction_starts[instruction->error_target]);
    patch_64(data + 0x78, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0x20, (uintptr_t)data + 0x34);
    patch_x86_64_32rx(code + 0x3f, (uintptr_t)data + 0x3c);
    patch_x86_64_32rx(code + 0x46, (uintptr_t)data + 0x44);
    patch_x86_64_32rx(code + 0x52, (uintptr_t)data + 0x4c);
    patch_x86_64_32rx(code + 0x6d, (uintptr_t)data + 0x54);
    patch_x86_64_32rx(code + 0x7a, (uintptr_t)data + 0x5c);
    patch_32r(code + 0x8c, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x97, (uintptr_t)data + 0x64);
    patch_x86_64_32rx(code + 0xad, (uintptr_t)data + 0x6c);
    patch_x86_64_32rx(code + 0xb6, (uintptr_t)data + 0x74);
    patch_x86_64_32rx(code + 0xbd, (uintptr_t)data + 0x3c);
    patch_x86_64_32rx(code + 0xc6, (uintptr_t)data + 0x74);
    patch_x86_64_32rx(code + 0xcd, (uintptr_t)data + 0x6c);
}

void
emit__LOAD_ASSERTION_ERROR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_ASSERTION_ERROR.o:       file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  R_X86_64_REX_GOTPCRELX       PyExc_AssertionError-0x4
    // 7: 48 8b 00                      movq    (%rax), %rax
    // a: 8b 08                         movl    (%rax), %ecx
    // c: ff c1                         incl    %ecx
    // e: 74 02                         je      0x12 <_JIT_ENTRY+0x12>
    // 10: 89 08                         movl    %ecx, (%rax)
    // 12: 48 89 45 00                   movq    %rax, (%rbp)
    // 16: 48 83 c5 08                   addq    $0x8, %rbp
    // 1a: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x20 <_JIT_ENTRY+0x20>
    // 000000000000001c:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 1a: 
    const unsigned char code_body[26] = {
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x00, 0x8b, 0x08, 0xff, 0xc1, 0x74, 0x02,
        0x89, 0x08, 0x48, 0x89, 0x45, 0x00, 0x48, 0x83,
        0xc5, 0x08,
    };
    // 0: 
    // 0: &PyExc_AssertionError+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyExc_AssertionError);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
}

void
emit__LOAD_ATTR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_ATTR.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 44 8b 35 00 00 00 00          movl    (%rip), %r14d           # 0x8 <_JIT_ENTRY+0x8>
    // 0000000000000004:  R_X86_64_REX_GOTPCRELX       _JIT_OPARG-0x4
    // 8: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // c: 49 8b 45 00                   movq    (%r13), %rax
    // 10: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 14: 44 89 f1                      movl    %r14d, %ecx
    // 17: 81 e1 fe ff 00 00             andl    $0xfffe, %ecx           # imm = 0xFFFE
    // 1d: 48 8b 74 88 18                movq    0x18(%rax,%rcx,4), %rsi
    // 22: 41 83 e6 01                   andl    $0x1, %r14d
    // 26: 75 30                         jne     0x58 <_JIT_ENTRY+0x58>
    // 28: 48 89 df                      movq    %rbx, %rdi
    // 2b: ff 15 00 00 00 00             callq   *(%rip)                 # 0x31 <_JIT_ENTRY+0x31>
    // 000000000000002d:  R_X86_64_GOTPCRELX   PyObject_GetAttr-0x4
    // 31: 48 8b 0b                      movq    (%rbx), %rcx
    // 34: 85 c9                         testl   %ecx, %ecx
    // 36: 78 08                         js      0x40 <_JIT_ENTRY+0x40>
    // 38: 48 ff c9                      decq    %rcx
    // 3b: 48 89 0b                      movq    %rcx, (%rbx)
    // 3e: 74 70                         je      0xb0 <_JIT_ENTRY+0xb0>
    // 40: 48 85 c0                      testq   %rax, %rax
    // 43: 74 7f                         je      0xc4 <_JIT_ENTRY+0xc4>
    // 45: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // 49: 44 89 f0                      movl    %r14d, %eax
    // 4c: 48 8d 6c c5 00                leaq    (%rbp,%rax,8), %rbp
    // 51: 58                            popq    %rax
    // 52: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x58 <_JIT_ENTRY+0x58>
    // 0000000000000054:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 58: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
    // 60: 48 89 e2                      movq    %rsp, %rdx
    // 63: 48 89 df                      movq    %rbx, %rdi
    // 66: ff 15 00 00 00 00             callq   *(%rip)                 # 0x6c <_JIT_ENTRY+0x6c>
    // 0000000000000068:  R_X86_64_GOTPCRELX   _PyObject_GetMethod-0x4
    // 6c: 85 c0                         testl   %eax, %eax
    // 6e: 74 06                         je      0x76 <_JIT_ENTRY+0x76>
    // 70: 48 8b 04 24                   movq    (%rsp), %rax
    // 74: eb 23                         jmp     0x99 <_JIT_ENTRY+0x99>
    // 76: 48 8b 03                      movq    (%rbx), %rax
    // 79: 85 c0                         testl   %eax, %eax
    // 7b: 78 11                         js      0x8e <_JIT_ENTRY+0x8e>
    // 7d: 48 ff c8                      decq    %rax
    // 80: 48 89 03                      movq    %rax, (%rbx)
    // 83: 75 09                         jne     0x8e <_JIT_ENTRY+0x8e>
    // 85: 48 89 df                      movq    %rbx, %rdi
    // 88: ff 15 00 00 00 00             callq   *(%rip)                 # 0x8e <_JIT_ENTRY+0x8e>
    // 000000000000008a:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 8e: 48 8b 04 24                   movq    (%rsp), %rax
    // 92: 48 85 c0                      testq   %rax, %rax
    // 95: 74 2d                         je      0xc4 <_JIT_ENTRY+0xc4>
    // 97: 31 db                         xorl    %ebx, %ebx
    // 99: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // 9d: 48 89 5d 00                   movq    %rbx, (%rbp)
    // a1: 44 89 f0                      movl    %r14d, %eax
    // a4: 48 8d 6c c5 00                leaq    (%rbp,%rax,8), %rbp
    // a9: 58                            popq    %rax
    // aa: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xb0 <_JIT_ENTRY+0xb0>
    // 00000000000000ac:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // b0: 48 89 df                      movq    %rbx, %rdi
    // b3: 48 89 c3                      movq    %rax, %rbx
    // b6: ff 15 00 00 00 00             callq   *(%rip)                 # 0xbc <_JIT_ENTRY+0xbc>
    // 00000000000000b8:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // bc: 48 89 d8                      movq    %rbx, %rax
    // bf: 48 85 c0                      testq   %rax, %rax
    // c2: 75 81                         jne     0x45 <_JIT_ENTRY+0x45>
    // c4: 58                            popq    %rax
    // c5: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xcb <_JIT_ENTRY+0xcb>
    // 00000000000000c7:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // cb: 
    const unsigned char code_body[203] = {
        0x50, 0x44, 0x8b, 0x35, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x5d, 0xf8, 0x49, 0x8b, 0x45, 0x00,
        0x48, 0x8b, 0x40, 0x20, 0x44, 0x89, 0xf1, 0x81,
        0xe1, 0xfe, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x74,
        0x88, 0x18, 0x41, 0x83, 0xe6, 0x01, 0x75, 0x30,
        0x48, 0x89, 0xdf, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x0b, 0x85, 0xc9, 0x78, 0x08,
        0x48, 0xff, 0xc9, 0x48, 0x89, 0x0b, 0x74, 0x70,
        0x48, 0x85, 0xc0, 0x74, 0x7f, 0x48, 0x89, 0x45,
        0xf8, 0x44, 0x89, 0xf0, 0x48, 0x8d, 0x6c, 0xc5,
        0x00, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0xc7, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xe2, 0x48, 0x89, 0xdf, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74, 0x06,
        0x48, 0x8b, 0x04, 0x24, 0xeb, 0x23, 0x48, 0x8b,
        0x03, 0x85, 0xc0, 0x78, 0x11, 0x48, 0xff, 0xc8,
        0x48, 0x89, 0x03, 0x75, 0x09, 0x48, 0x89, 0xdf,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x2d, 0x31,
        0xdb, 0x48, 0x89, 0x45, 0xf8, 0x48, 0x89, 0x5d,
        0x00, 0x44, 0x89, 0xf0, 0x48, 0x8d, 0x6c, 0xc5,
        0x00, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xdf, 0x48, 0x89, 0xc3, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xd8, 0x48,
        0x85, 0xc0, 0x75, 0x81, 0x58, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: &PyObject_GetAttr+0x0
    // 10: CONTINUE
    // 18: &_PyObject_GetMethod+0x0
    // 20: &_Py_Dealloc+0x0
    // 28: ERROR_TARGET
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyObject_GetAttr);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&_PyObject_GetMethod);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x28, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x4, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2d, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x54, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x68, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x8a, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xac, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xb8, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xc7, (uintptr_t)data + 0x24);
}

void
emit__LOAD_ATTR_CLASS_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_ATTR_CLASS_0.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 7d f8                   movq    -0x8(%rbp), %rdi
    // 5: 48 8b 1d 00 00 00 00          movq    (%rip), %rbx            # 0xc <_JIT_ENTRY+0xc>
    // 0000000000000008:  R_X86_64_REX_GOTPCRELX       _JIT_OPERAND-0x4
    // c: 8b 03                         movl    (%rbx), %eax
    // e: ff c0                         incl    %eax
    // 10: 74 02                         je      0x14 <_JIT_ENTRY+0x14>
    // 12: 89 03                         movl    %eax, (%rbx)
    // 14: 48 8b 07                      movq    (%rdi), %rax
    // 17: 85 c0                         testl   %eax, %eax
    // 19: 78 08                         js      0x23 <_JIT_ENTRY+0x23>
    // 1b: 48 ff c8                      decq    %rax
    // 1e: 48 89 07                      movq    %rax, (%rdi)
    // 21: 74 0b                         je      0x2e <_JIT_ENTRY+0x2e>
    // 23: 48 89 5d f8                   movq    %rbx, -0x8(%rbp)
    // 27: 58                            popq    %rax
    // 28: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x2e <_JIT_ENTRY+0x2e>
    // 000000000000002a:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 2e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x34 <_JIT_ENTRY+0x34>
    // 0000000000000030:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 34: 48 89 5d f8                   movq    %rbx, -0x8(%rbp)
    // 38: 58                            popq    %rax
    // 39: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x3f <_JIT_ENTRY+0x3f>
    // 000000000000003b:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 39: 
    const unsigned char code_body[57] = {
        0x50, 0x48, 0x8b, 0x7d, 0xf8, 0x48, 0x8b, 0x1d,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x03, 0xff, 0xc0,
        0x74, 0x02, 0x89, 0x03, 0x48, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8, 0x48, 0x89,
        0x07, 0x74, 0x0b, 0x48, 0x89, 0x5d, 0xf8, 0x58,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x5d, 0xf8,
        0x58,
    };
    // 0: 
    // 0: OPERAND
    // 8: CONTINUE
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x8, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2a, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x30, (uintptr_t)data + 0xc);
}

void
emit__LOAD_ATTR_CLASS_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_ATTR_CLASS_1.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 7d f8                   movq    -0x8(%rbp), %rdi
    // 5: 48 8b 1d 00 00 00 00          movq    (%rip), %rbx            # 0xc <_JIT_ENTRY+0xc>
    // 0000000000000008:  R_X86_64_REX_GOTPCRELX       _JIT_OPERAND-0x4
    // c: 8b 03                         movl    (%rbx), %eax
    // e: ff c0                         incl    %eax
    // 10: 74 02                         je      0x14 <_JIT_ENTRY+0x14>
    // 12: 89 03                         movl    %eax, (%rbx)
    // 14: 48 8b 07                      movq    (%rdi), %rax
    // 17: 85 c0                         testl   %eax, %eax
    // 19: 78 0e                         js      0x29 <_JIT_ENTRY+0x29>
    // 1b: 48 ff c8                      decq    %rax
    // 1e: 48 89 07                      movq    %rax, (%rdi)
    // 21: 75 06                         jne     0x29 <_JIT_ENTRY+0x29>
    // 23: ff 15 00 00 00 00             callq   *(%rip)                 # 0x29 <_JIT_ENTRY+0x29>
    // 0000000000000025:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 29: 48 89 5d f8                   movq    %rbx, -0x8(%rbp)
    // 2d: 48 c7 45 00 00 00 00 00       movq    $0x0, (%rbp)
    // 35: 48 83 c5 08                   addq    $0x8, %rbp
    // 39: 58                            popq    %rax
    // 3a: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x40 <_JIT_ENTRY+0x40>
    // 000000000000003c:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 3a: 
    const unsigned char code_body[58] = {
        0x50, 0x48, 0x8b, 0x7d, 0xf8, 0x48, 0x8b, 0x1d,
        0x00, 0x00, 0x00, 0x00, 0x8b, 0x03, 0xff, 0xc0,
        0x74, 0x02, 0x89, 0x03, 0x48, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x0e, 0x48, 0xff, 0xc8, 0x48, 0x89,
        0x07, 0x75, 0x06, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0x5d, 0xf8, 0x48, 0xc7, 0x45,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc5,
        0x08, 0x58,
    };
    // 0: 
    // 0: OPERAND
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x8, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x25, (uintptr_t)data + 0x4);
}

void
emit__LOAD_ATTR_INSTANCE_VALUE_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_ATTR_INSTANCE_VALUE_0.o: file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 7d f8                   movq    -0x8(%rbp), %rdi
    // 5: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0xc <_JIT_ENTRY+0xc>
    // 0000000000000008:  R_X86_64_GOTPCREL    _JIT_OPERAND-0x4
    // c: 48 8b 5c c7 18                movq    0x18(%rdi,%rax,8), %rbx
    // 11: 48 85 db                      testq   %rbx, %rbx
    // 14: 74 22                         je      0x38 <_JIT_ENTRY+0x38>
    // 16: 8b 03                         movl    (%rbx), %eax
    // 18: ff c0                         incl    %eax
    // 1a: 74 02                         je      0x1e <_JIT_ENTRY+0x1e>
    // 1c: 89 03                         movl    %eax, (%rbx)
    // 1e: 48 8b 07                      movq    (%rdi), %rax
    // 21: 85 c0                         testl   %eax, %eax
    // 23: 78 08                         js      0x2d <_JIT_ENTRY+0x2d>
    // 25: 48 ff c8                      decq    %rax
    // 28: 48 89 07                      movq    %rax, (%rdi)
    // 2b: 74 12                         je      0x3f <_JIT_ENTRY+0x3f>
    // 2d: 48 89 5d f8                   movq    %rbx, -0x8(%rbp)
    // 31: 58                            popq    %rax
    // 32: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x38 <_JIT_ENTRY+0x38>
    // 0000000000000034:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 38: 58                            popq    %rax
    // 39: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x3f <_JIT_ENTRY+0x3f>
    // 000000000000003b:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 3f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x45 <_JIT_ENTRY+0x45>
    // 0000000000000041:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 45: 48 89 5d f8                   movq    %rbx, -0x8(%rbp)
    // 49: 58                            popq    %rax
    // 4a: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x50 <_JIT_ENTRY+0x50>
    // 000000000000004c:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 4a: 
    const unsigned char code_body[74] = {
        0x50, 0x48, 0x8b, 0x7d, 0xf8, 0x0f, 0xb7, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x5c, 0xc7,
        0x18, 0x48, 0x85, 0xdb, 0x74, 0x22, 0x8b, 0x03,
        0xff, 0xc0, 0x74, 0x02, 0x89, 0x03, 0x48, 0x8b,
        0x07, 0x85, 0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8,
        0x48, 0x89, 0x07, 0x74, 0x12, 0x48, 0x89, 0x5d,
        0xf8, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x5d,
        0xf8, 0x58,
    };
    // 0: 
    // 0: OPERAND
    // 8: CONTINUE
    // 10: JUMP_TARGET
    // 18: &_Py_Dealloc+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x8, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x34, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3b, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x41, (uintptr_t)data + 0x14);
}

void
emit__LOAD_ATTR_INSTANCE_VALUE_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_ATTR_INSTANCE_VALUE_1.o: file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 7d f8                   movq    -0x8(%rbp), %rdi
    // 5: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0xc <_JIT_ENTRY+0xc>
    // 0000000000000008:  R_X86_64_GOTPCREL    _JIT_OPERAND-0x4
    // c: 48 8b 5c c7 18                movq    0x18(%rdi,%rax,8), %rbx
    // 11: 48 85 db                      testq   %rbx, %rbx
    // 14: 74 34                         je      0x4a <_JIT_ENTRY+0x4a>
    // 16: 8b 03                         movl    (%rbx), %eax
    // 18: ff c0                         incl    %eax
    // 1a: 74 02                         je      0x1e <_JIT_ENTRY+0x1e>
    // 1c: 89 03                         movl    %eax, (%rbx)
    // 1e: 48 8b 07                      movq    (%rdi), %rax
    // 21: 85 c0                         testl   %eax, %eax
    // 23: 78 0e                         js      0x33 <_JIT_ENTRY+0x33>
    // 25: 48 ff c8                      decq    %rax
    // 28: 48 89 07                      movq    %rax, (%rdi)
    // 2b: 75 06                         jne     0x33 <_JIT_ENTRY+0x33>
    // 2d: ff 15 00 00 00 00             callq   *(%rip)                 # 0x33 <_JIT_ENTRY+0x33>
    // 000000000000002f:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 33: 48 89 5d f8                   movq    %rbx, -0x8(%rbp)
    // 37: 48 c7 45 00 00 00 00 00       movq    $0x0, (%rbp)
    // 3f: 48 83 c5 08                   addq    $0x8, %rbp
    // 43: 58                            popq    %rax
    // 44: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x4a <_JIT_ENTRY+0x4a>
    // 0000000000000046:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 4a: 58                            popq    %rax
    // 4b: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x51 <_JIT_ENTRY+0x51>
    // 000000000000004d:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 51: 
    const unsigned char code_body[81] = {
        0x50, 0x48, 0x8b, 0x7d, 0xf8, 0x0f, 0xb7, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x5c, 0xc7,
        0x18, 0x48, 0x85, 0xdb, 0x74, 0x34, 0x8b, 0x03,
        0xff, 0xc0, 0x74, 0x02, 0x89, 0x03, 0x48, 0x8b,
        0x07, 0x85, 0xc0, 0x78, 0x0e, 0x48, 0xff, 0xc8,
        0x48, 0x89, 0x07, 0x75, 0x06, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0x5d, 0xf8, 0x48,
        0xc7, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x83, 0xc5, 0x08, 0x58, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00,
    };
    // 0: 
    // 0: OPERAND
    // 8: &_Py_Dealloc+0x0
    // 10: CONTINUE
    // 18: JUMP_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x8, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2f, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x46, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x4d, (uintptr_t)data + 0x14);
}

void
emit__LOAD_ATTR_METHOD_LAZY_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_ATTR_METHOD_LAZY_DICT.o: file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 4: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  R_X86_64_REX_GOTPCRELX       _JIT_OPERAND-0x4
    // b: 8b 11                         movl    (%rcx), %edx
    // d: ff c2                         incl    %edx
    // f: 74 02                         je      0x13 <_JIT_ENTRY+0x13>
    // 11: 89 11                         movl    %edx, (%rcx)
    // 13: 48 89 4d f8                   movq    %rcx, -0x8(%rbp)
    // 17: 48 89 45 00                   movq    %rax, (%rbp)
    // 1b: 48 83 c5 08                   addq    $0x8, %rbp
    // 1f: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x25 <_JIT_ENTRY+0x25>
    // 0000000000000021:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 1f: 
    const unsigned char code_body[31] = {
        0x48, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x11, 0xff, 0xc2, 0x74,
        0x02, 0x89, 0x11, 0x48, 0x89, 0x4d, 0xf8, 0x48,
        0x89, 0x45, 0x00, 0x48, 0x83, 0xc5, 0x08,
    };
    // 0: 
    // 0: OPERAND
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
}

void
emit__LOAD_ATTR_METHOD_NO_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_ATTR_METHOD_NO_DICT.o:   file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 4: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  R_X86_64_REX_GOTPCRELX       _JIT_OPERAND-0x4
    // b: 8b 11                         movl    (%rcx), %edx
    // d: ff c2                         incl    %edx
    // f: 74 02                         je      0x13 <_JIT_ENTRY+0x13>
    // 11: 89 11                         movl    %edx, (%rcx)
    // 13: 48 89 4d f8                   movq    %rcx, -0x8(%rbp)
    // 17: 48 89 45 00                   movq    %rax, (%rbp)
    // 1b: 48 83 c5 08                   addq    $0x8, %rbp
    // 1f: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x25 <_JIT_ENTRY+0x25>
    // 0000000000000021:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 1f: 
    const unsigned char code_body[31] = {
        0x48, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x11, 0xff, 0xc2, 0x74,
        0x02, 0x89, 0x11, 0x48, 0x89, 0x4d, 0xf8, 0x48,
        0x89, 0x45, 0x00, 0x48, 0x83, 0xc5, 0x08,
    };
    // 0: 
    // 0: OPERAND
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
}

void
emit__LOAD_ATTR_METHOD_WITH_VALUES(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_ATTR_METHOD_WITH_VALUES.o:       file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 4: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  R_X86_64_REX_GOTPCRELX       _JIT_OPERAND-0x4
    // b: 8b 11                         movl    (%rcx), %edx
    // d: ff c2                         incl    %edx
    // f: 74 02                         je      0x13 <_JIT_ENTRY+0x13>
    // 11: 89 11                         movl    %edx, (%rcx)
    // 13: 48 89 4d f8                   movq    %rcx, -0x8(%rbp)
    // 17: 48 89 45 00                   movq    %rax, (%rbp)
    // 1b: 48 83 c5 08                   addq    $0x8, %rbp
    // 1f: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x25 <_JIT_ENTRY+0x25>
    // 0000000000000021:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 1f: 
    const unsigned char code_body[31] = {
        0x48, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x0d, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x11, 0xff, 0xc2, 0x74,
        0x02, 0x89, 0x11, 0x48, 0x89, 0x4d, 0xf8, 0x48,
        0x89, 0x45, 0x00, 0x48, 0x83, 0xc5, 0x08,
    };
    // 0: 
    // 0: OPERAND
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
}

void
emit__LOAD_ATTR_MODULE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_ATTR_MODULE.o:   file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 7d f8                   movq    -0x8(%rbp), %rdi
    // 5: 48 8b 47 10                   movq    0x10(%rdi), %rax
    // 9: 48 8b 40 20                   movq    0x20(%rax), %rax
    // d: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
    // 11: ba 01 00 00 00                movl    $0x1, %edx
    // 16: 48 d3 e2                      shlq    %cl, %rdx
    // 19: 48 01 c2                      addq    %rax, %rdx
    // 1c: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x23 <_JIT_ENTRY+0x23>
    // 000000000000001f:  R_X86_64_GOTPCREL    _JIT_OPERAND-0x4
    // 23: c1 e0 04                      shll    $0x4, %eax
    // 26: 48 8b 5c 10 28                movq    0x28(%rax,%rdx), %rbx
    // 2b: 48 85 db                      testq   %rbx, %rbx
    // 2e: 74 45                         je      0x75 <_JIT_ENTRY+0x75>
    // 30: 8b 03                         movl    (%rbx), %eax
    // 32: ff c0                         incl    %eax
    // 34: 74 02                         je      0x38 <_JIT_ENTRY+0x38>
    // 36: 89 03                         movl    %eax, (%rbx)
    // 38: 48 8b 07                      movq    (%rdi), %rax
    // 3b: 85 c0                         testl   %eax, %eax
    // 3d: 78 0e                         js      0x4d <_JIT_ENTRY+0x4d>
    // 3f: 48 ff c8                      decq    %rax
    // 42: 48 89 07                      movq    %rax, (%rdi)
    // 45: 75 06                         jne     0x4d <_JIT_ENTRY+0x4d>
    // 47: ff 15 00 00 00 00             callq   *(%rip)                 # 0x4d <_JIT_ENTRY+0x4d>
    // 0000000000000049:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 4d: 48 89 5d f8                   movq    %rbx, -0x8(%rbp)
    // 51: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x58 <_JIT_ENTRY+0x58>
    // 0000000000000054:  R_X86_64_REX_GOTPCRELX       _JIT_OPARG-0x4
    // 58: 66 83 e0 01                   andw    $0x1, %ax
    // 5c: 74 08                         je      0x66 <_JIT_ENTRY+0x66>
    // 5e: 48 c7 45 00 00 00 00 00       movq    $0x0, (%rbp)
    // 66: 0f b7 c0                      movzwl  %ax, %eax
    // 69: 48 8d 6c c5 00                leaq    (%rbp,%rax,8), %rbp
    // 6e: 58                            popq    %rax
    // 6f: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x75 <_JIT_ENTRY+0x75>
    // 0000000000000071:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 75: 58                            popq    %rax
    // 76: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x7c <_JIT_ENTRY+0x7c>
    // 0000000000000078:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 7c: 
    const unsigned char code_body[124] = {
        0x50, 0x48, 0x8b, 0x7d, 0xf8, 0x48, 0x8b, 0x47,
        0x10, 0x48, 0x8b, 0x40, 0x20, 0x0f, 0xb6, 0x48,
        0x09, 0xba, 0x01, 0x00, 0x00, 0x00, 0x48, 0xd3,
        0xe2, 0x48, 0x01, 0xc2, 0x0f, 0xb7, 0x05, 0x00,
        0x00, 0x00, 0x00, 0xc1, 0xe0, 0x04, 0x48, 0x8b,
        0x5c, 0x10, 0x28, 0x48, 0x85, 0xdb, 0x74, 0x45,
        0x8b, 0x03, 0xff, 0xc0, 0x74, 0x02, 0x89, 0x03,
        0x48, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x0e, 0x48,
        0xff, 0xc8, 0x48, 0x89, 0x07, 0x75, 0x06, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x5d,
        0xf8, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x66, 0x83, 0xe0, 0x01, 0x74, 0x08, 0x48, 0xc7,
        0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7,
        0xc0, 0x48, 0x8d, 0x6c, 0xc5, 0x00, 0x58, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPERAND
    // 8: &_Py_Dealloc+0x0
    // 10: OPARG
    // 18: CONTINUE
    // 20: JUMP_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x10, instruction->oparg);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x1f, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x49, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x54, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x71, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x78, (uintptr_t)data + 0x1c);
}

void
emit__LOAD_ATTR_NONDESCRIPTOR_NO_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_ATTR_NONDESCRIPTOR_NO_DICT.o:    file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 7d f8                   movq    -0x8(%rbp), %rdi
    // 5: 48 8b 07                      movq    (%rdi), %rax
    // 8: 85 c0                         testl   %eax, %eax
    // a: 78 08                         js      0x14 <_JIT_ENTRY+0x14>
    // c: 48 ff c8                      decq    %rax
    // f: 48 89 07                      movq    %rax, (%rdi)
    // 12: 74 1a                         je      0x2e <_JIT_ENTRY+0x2e>
    // 14: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x1b <_JIT_ENTRY+0x1b>
    // 0000000000000017:  R_X86_64_REX_GOTPCRELX       _JIT_OPERAND-0x4
    // 1b: 8b 08                         movl    (%rax), %ecx
    // 1d: ff c1                         incl    %ecx
    // 1f: 74 02                         je      0x23 <_JIT_ENTRY+0x23>
    // 21: 89 08                         movl    %ecx, (%rax)
    // 23: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // 27: 58                            popq    %rax
    // 28: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x2e <_JIT_ENTRY+0x2e>
    // 000000000000002a:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 2e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x34 <_JIT_ENTRY+0x34>
    // 0000000000000030:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 34: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x3b <_JIT_ENTRY+0x3b>
    // 0000000000000037:  R_X86_64_REX_GOTPCRELX       _JIT_OPERAND-0x4
    // 3b: 8b 08                         movl    (%rax), %ecx
    // 3d: ff c1                         incl    %ecx
    // 3f: 75 e0                         jne     0x21 <_JIT_ENTRY+0x21>
    // 41: eb e0                         jmp     0x23 <_JIT_ENTRY+0x23>
    // 43: 
    const unsigned char code_body[67] = {
        0x50, 0x48, 0x8b, 0x7d, 0xf8, 0x48, 0x8b, 0x07,
        0x85, 0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8, 0x48,
        0x89, 0x07, 0x74, 0x1a, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x08, 0xff, 0xc1, 0x74,
        0x02, 0x89, 0x08, 0x48, 0x89, 0x45, 0xf8, 0x58,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x08, 0xff, 0xc1, 0x75,
        0xe0, 0xeb, 0xe0,
    };
    // 0: 
    // 0: OPERAND
    // 8: CONTINUE
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x17, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2a, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x30, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x37, (uintptr_t)data + -0x4);
}

void
emit__LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 7d f8                   movq    -0x8(%rbp), %rdi
    // 5: 48 8b 07                      movq    (%rdi), %rax
    // 8: 85 c0                         testl   %eax, %eax
    // a: 78 08                         js      0x14 <_JIT_ENTRY+0x14>
    // c: 48 ff c8                      decq    %rax
    // f: 48 89 07                      movq    %rax, (%rdi)
    // 12: 74 1a                         je      0x2e <_JIT_ENTRY+0x2e>
    // 14: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x1b <_JIT_ENTRY+0x1b>
    // 0000000000000017:  R_X86_64_REX_GOTPCRELX       _JIT_OPERAND-0x4
    // 1b: 8b 08                         movl    (%rax), %ecx
    // 1d: ff c1                         incl    %ecx
    // 1f: 74 02                         je      0x23 <_JIT_ENTRY+0x23>
    // 21: 89 08                         movl    %ecx, (%rax)
    // 23: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // 27: 58                            popq    %rax
    // 28: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x2e <_JIT_ENTRY+0x2e>
    // 000000000000002a:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 2e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x34 <_JIT_ENTRY+0x34>
    // 0000000000000030:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 34: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x3b <_JIT_ENTRY+0x3b>
    // 0000000000000037:  R_X86_64_REX_GOTPCRELX       _JIT_OPERAND-0x4
    // 3b: 8b 08                         movl    (%rax), %ecx
    // 3d: ff c1                         incl    %ecx
    // 3f: 75 e0                         jne     0x21 <_JIT_ENTRY+0x21>
    // 41: eb e0                         jmp     0x23 <_JIT_ENTRY+0x23>
    // 43: 
    const unsigned char code_body[67] = {
        0x50, 0x48, 0x8b, 0x7d, 0xf8, 0x48, 0x8b, 0x07,
        0x85, 0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8, 0x48,
        0x89, 0x07, 0x74, 0x1a, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x08, 0xff, 0xc1, 0x74,
        0x02, 0x89, 0x08, 0x48, 0x89, 0x45, 0xf8, 0x58,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x8b, 0x08, 0xff, 0xc1, 0x75,
        0xe0, 0xeb, 0xe0,
    };
    // 0: 
    // 0: OPERAND
    // 8: CONTINUE
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x17, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2a, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x30, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x37, (uintptr_t)data + -0x4);
}

void
emit__LOAD_ATTR_SLOT_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_ATTR_SLOT_0.o:   file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 7d f8                   movq    -0x8(%rbp), %rdi
    // 5: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0xc <_JIT_ENTRY+0xc>
    // 0000000000000008:  R_X86_64_GOTPCREL    _JIT_OPERAND-0x4
    // c: 48 8b 1c 07                   movq    (%rdi,%rax), %rbx
    // 10: 48 85 db                      testq   %rbx, %rbx
    // 13: 74 22                         je      0x37 <_JIT_ENTRY+0x37>
    // 15: 8b 03                         movl    (%rbx), %eax
    // 17: ff c0                         incl    %eax
    // 19: 74 02                         je      0x1d <_JIT_ENTRY+0x1d>
    // 1b: 89 03                         movl    %eax, (%rbx)
    // 1d: 48 8b 07                      movq    (%rdi), %rax
    // 20: 85 c0                         testl   %eax, %eax
    // 22: 78 08                         js      0x2c <_JIT_ENTRY+0x2c>
    // 24: 48 ff c8                      decq    %rax
    // 27: 48 89 07                      movq    %rax, (%rdi)
    // 2a: 74 12                         je      0x3e <_JIT_ENTRY+0x3e>
    // 2c: 48 89 5d f8                   movq    %rbx, -0x8(%rbp)
    // 30: 58                            popq    %rax
    // 31: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x37 <_JIT_ENTRY+0x37>
    // 0000000000000033:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 37: 58                            popq    %rax
    // 38: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x3e <_JIT_ENTRY+0x3e>
    // 000000000000003a:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 3e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x44 <_JIT_ENTRY+0x44>
    // 0000000000000040:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 44: 48 89 5d f8                   movq    %rbx, -0x8(%rbp)
    // 48: 58                            popq    %rax
    // 49: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x4f <_JIT_ENTRY+0x4f>
    // 000000000000004b:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 49: 
    const unsigned char code_body[73] = {
        0x50, 0x48, 0x8b, 0x7d, 0xf8, 0x0f, 0xb7, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x1c, 0x07,
        0x48, 0x85, 0xdb, 0x74, 0x22, 0x8b, 0x03, 0xff,
        0xc0, 0x74, 0x02, 0x89, 0x03, 0x48, 0x8b, 0x07,
        0x85, 0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8, 0x48,
        0x89, 0x07, 0x74, 0x12, 0x48, 0x89, 0x5d, 0xf8,
        0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x58,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x5d, 0xf8,
        0x58,
    };
    // 0: 
    // 0: OPERAND
    // 8: CONTINUE
    // 10: JUMP_TARGET
    // 18: &_Py_Dealloc+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x8, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x33, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3a, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x40, (uintptr_t)data + 0x14);
}

void
emit__LOAD_ATTR_SLOT_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_ATTR_SLOT_1.o:   file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 7d f8                   movq    -0x8(%rbp), %rdi
    // 5: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0xc <_JIT_ENTRY+0xc>
    // 0000000000000008:  R_X86_64_GOTPCREL    _JIT_OPERAND-0x4
    // c: 48 8b 1c 07                   movq    (%rdi,%rax), %rbx
    // 10: 48 85 db                      testq   %rbx, %rbx
    // 13: 74 34                         je      0x49 <_JIT_ENTRY+0x49>
    // 15: 8b 03                         movl    (%rbx), %eax
    // 17: ff c0                         incl    %eax
    // 19: 74 02                         je      0x1d <_JIT_ENTRY+0x1d>
    // 1b: 89 03                         movl    %eax, (%rbx)
    // 1d: 48 8b 07                      movq    (%rdi), %rax
    // 20: 85 c0                         testl   %eax, %eax
    // 22: 78 0e                         js      0x32 <_JIT_ENTRY+0x32>
    // 24: 48 ff c8                      decq    %rax
    // 27: 48 89 07                      movq    %rax, (%rdi)
    // 2a: 75 06                         jne     0x32 <_JIT_ENTRY+0x32>
    // 2c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x32 <_JIT_ENTRY+0x32>
    // 000000000000002e:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 32: 48 89 5d f8                   movq    %rbx, -0x8(%rbp)
    // 36: 48 c7 45 00 00 00 00 00       movq    $0x0, (%rbp)
    // 3e: 48 83 c5 08                   addq    $0x8, %rbp
    // 42: 58                            popq    %rax
    // 43: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x49 <_JIT_ENTRY+0x49>
    // 0000000000000045:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 49: 58                            popq    %rax
    // 4a: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x50 <_JIT_ENTRY+0x50>
    // 000000000000004c:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 50: 
    const unsigned char code_body[80] = {
        0x50, 0x48, 0x8b, 0x7d, 0xf8, 0x0f, 0xb7, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x1c, 0x07,
        0x48, 0x85, 0xdb, 0x74, 0x34, 0x8b, 0x03, 0xff,
        0xc0, 0x74, 0x02, 0x89, 0x03, 0x48, 0x8b, 0x07,
        0x85, 0xc0, 0x78, 0x0e, 0x48, 0xff, 0xc8, 0x48,
        0x89, 0x07, 0x75, 0x06, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x89, 0x5d, 0xf8, 0x48, 0xc7,
        0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83,
        0xc5, 0x08, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPERAND
    // 8: &_Py_Dealloc+0x0
    // 10: CONTINUE
    // 18: JUMP_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x8, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x45, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x4c, (uintptr_t)data + 0x14);
}

void
emit__LOAD_ATTR_WITH_HINT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_ATTR_WITH_HINT.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 7d f8                   movq    -0x8(%rbp), %rdi
    // 5: 48 8b 4f e8                   movq    -0x18(%rdi), %rcx
    // 9: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x10 <_JIT_ENTRY+0x10>
    // 000000000000000c:  R_X86_64_GOTPCREL    _JIT_OPERAND-0x4
    // 10: 48 8b 51 20                   movq    0x20(%rcx), %rdx
    // 14: 48 39 42 18                   cmpq    %rax, 0x18(%rdx)
    // 18: 76 5d                         jbe     0x77 <_JIT_ENTRY+0x77>
    // 1a: 0f b7 1d 00 00 00 00          movzwl  (%rip), %ebx            # 0x21 <_JIT_ENTRY+0x21>
    // 000000000000001d:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 21: 49 8b 4d 00                   movq    (%r13), %rcx
    // 25: 48 8b 71 20                   movq    0x20(%rcx), %rsi
    // 29: 41 89 d8                      movl    %ebx, %r8d
    // 2c: 41 83 e0 fe                   andl    $-0x2, %r8d
    // 30: 0f b6 4a 09                   movzbl  0x9(%rdx), %ecx
    // 34: 41 b9 01 00 00 00             movl    $0x1, %r9d
    // 3a: 49 d3 e1                      shlq    %cl, %r9
    // 3d: 4a 8b 74 86 18                movq    0x18(%rsi,%r8,4), %rsi
    // 42: 80 7a 0a 00                   cmpb    $0x0, 0xa(%rdx)
    // 46: 4a 8d 4c 0a 20                leaq    0x20(%rdx,%r9), %rcx
    // 4b: 74 1f                         je      0x6c <_JIT_ENTRY+0x6c>
    // 4d: 89 c2                         movl    %eax, %edx
    // 4f: c1 e2 04                      shll    $0x4, %edx
    // 52: 48 39 34 11                   cmpq    %rsi, (%rcx,%rdx)
    // 56: 75 1f                         jne     0x77 <_JIT_ENTRY+0x77>
    // 58: c1 e0 04                      shll    $0x4, %eax
    // 5b: 48 01 c8                      addq    %rcx, %rax
    // 5e: 48 83 c0 08                   addq    $0x8, %rax
    // 62: 4c 8b 30                      movq    (%rax), %r14
    // 65: 4d 85 f6                      testq   %r14, %r14
    // 68: 75 24                         jne     0x8e <_JIT_ENTRY+0x8e>
    // 6a: eb 0b                         jmp     0x77 <_JIT_ENTRY+0x77>
    // 6c: 48 8d 04 40                   leaq    (%rax,%rax,2), %rax
    // 70: 48 39 74 c1 08                cmpq    %rsi, 0x8(%rcx,%rax,8)
    // 75: 74 07                         je      0x7e <_JIT_ENTRY+0x7e>
    // 77: 58                            popq    %rax
    // 78: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x7e <_JIT_ENTRY+0x7e>
    // 000000000000007a:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 7e: 48 8d 04 c1                   leaq    (%rcx,%rax,8), %rax
    // 82: 48 83 c0 10                   addq    $0x10, %rax
    // 86: 4c 8b 30                      movq    (%rax), %r14
    // 89: 4d 85 f6                      testq   %r14, %r14
    // 8c: 74 e9                         je      0x77 <_JIT_ENTRY+0x77>
    // 8e: 41 8b 06                      movl    (%r14), %eax
    // 91: ff c0                         incl    %eax
    // 93: 74 03                         je      0x98 <_JIT_ENTRY+0x98>
    // 95: 41 89 06                      movl    %eax, (%r14)
    // 98: 48 8b 07                      movq    (%rdi), %rax
    // 9b: 85 c0                         testl   %eax, %eax
    // 9d: 78 0e                         js      0xad <_JIT_ENTRY+0xad>
    // 9f: 48 ff c8                      decq    %rax
    // a2: 48 89 07                      movq    %rax, (%rdi)
    // a5: 75 06                         jne     0xad <_JIT_ENTRY+0xad>
    // a7: ff 15 00 00 00 00             callq   *(%rip)                 # 0xad <_JIT_ENTRY+0xad>
    // 00000000000000a9:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // ad: 4c 89 75 f8                   movq    %r14, -0x8(%rbp)
    // b1: 83 e3 01                      andl    $0x1, %ebx
    // b4: 74 08                         je      0xbe <_JIT_ENTRY+0xbe>
    // b6: 48 c7 45 00 00 00 00 00       movq    $0x0, (%rbp)
    // be: 89 d8                         movl    %ebx, %eax
    // c0: 48 8d 6c c5 00                leaq    (%rbp,%rax,8), %rbp
    // c5: 58                            popq    %rax
    // c6: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xcc <_JIT_ENTRY+0xcc>
    // 00000000000000c8:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // c6: 
    const unsigned char code_body[198] = {
        0x50, 0x48, 0x8b, 0x7d, 0xf8, 0x48, 0x8b, 0x4f,
        0xe8, 0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x51, 0x20, 0x48, 0x39, 0x42, 0x18,
        0x76, 0x5d, 0x0f, 0xb7, 0x1d, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x8b, 0x4d, 0x00, 0x48, 0x8b, 0x71,
        0x20, 0x41, 0x89, 0xd8, 0x41, 0x83, 0xe0, 0xfe,
        0x0f, 0xb6, 0x4a, 0x09, 0x41, 0xb9, 0x01, 0x00,
        0x00, 0x00, 0x49, 0xd3, 0xe1, 0x4a, 0x8b, 0x74,
        0x86, 0x18, 0x80, 0x7a, 0x0a, 0x00, 0x4a, 0x8d,
        0x4c, 0x0a, 0x20, 0x74, 0x1f, 0x89, 0xc2, 0xc1,
        0xe2, 0x04, 0x48, 0x39, 0x34, 0x11, 0x75, 0x1f,
        0xc1, 0xe0, 0x04, 0x48, 0x01, 0xc8, 0x48, 0x83,
        0xc0, 0x08, 0x4c, 0x8b, 0x30, 0x4d, 0x85, 0xf6,
        0x75, 0x24, 0xeb, 0x0b, 0x48, 0x8d, 0x04, 0x40,
        0x48, 0x39, 0x74, 0xc1, 0x08, 0x74, 0x07, 0x58,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d,
        0x04, 0xc1, 0x48, 0x83, 0xc0, 0x10, 0x4c, 0x8b,
        0x30, 0x4d, 0x85, 0xf6, 0x74, 0xe9, 0x41, 0x8b,
        0x06, 0xff, 0xc0, 0x74, 0x03, 0x41, 0x89, 0x06,
        0x48, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x0e, 0x48,
        0xff, 0xc8, 0x48, 0x89, 0x07, 0x75, 0x06, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x75,
        0xf8, 0x83, 0xe3, 0x01, 0x74, 0x08, 0x48, 0xc7,
        0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0xd8,
        0x48, 0x8d, 0x6c, 0xc5, 0x00, 0x58,
    };
    // 0: 
    // 0: OPERAND
    // 8: OPARG
    // 10: JUMP_TARGET
    // 18: &_Py_Dealloc+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0xc, (uintptr_t)data + -0x4);
    patch_32r(code + 0x1d, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x7a, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xa9, (uintptr_t)data + 0x14);
}

void
emit__LOAD_BUILD_CLASS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_BUILD_CLASS.o:   file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 49 8b 7d 20                   movq    0x20(%r13), %rdi
    // 5: be 50 91 00 00                movl    $0x9150, %esi           # imm = 0x9150
    // a: 48 03 35 00 00 00 00          addq    (%rip), %rsi            # 0x11 <_JIT_ENTRY+0x11>
    // 000000000000000d:  R_X86_64_REX_GOTPCRELX       _PyRuntime-0x4
    // 11: 48 89 e2                      movq    %rsp, %rdx
    // 14: ff 15 00 00 00 00             callq   *(%rip)                 # 0x1a <_JIT_ENTRY+0x1a>
    // 0000000000000016:  R_X86_64_GOTPCRELX   PyMapping_GetOptionalItem-0x4
    // 1a: 85 c0                         testl   %eax, %eax
    // 1c: 78 18                         js      0x36 <_JIT_ENTRY+0x36>
    // 1e: 48 8b 04 24                   movq    (%rsp), %rax
    // 22: 48 85 c0                      testq   %rax, %rax
    // 25: 74 16                         je      0x3d <_JIT_ENTRY+0x3d>
    // 27: 48 89 45 00                   movq    %rax, (%rbp)
    // 2b: 48 83 c5 08                   addq    $0x8, %rbp
    // 2f: 58                            popq    %rax
    // 30: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x36 <_JIT_ENTRY+0x36>
    // 0000000000000032:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 36: 58                            popq    %rax
    // 37: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x3d <_JIT_ENTRY+0x3d>
    // 0000000000000039:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 3d: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x44 <_JIT_ENTRY+0x44>
    // 0000000000000040:  R_X86_64_REX_GOTPCRELX       PyExc_NameError-0x4
    // 44: 48 8b 30                      movq    (%rax), %rsi
    // 47: 48 8d 15 00 00 00 00          leaq    (%rip), %rdx            # 0x4e <_JIT_ENTRY+0x4e>
    // 000000000000004a:  R_X86_64_PC32        .L.str.6-0x4
    // 4e: 4c 89 e7                      movq    %r12, %rdi
    // 51: ff 15 00 00 00 00             callq   *(%rip)                 # 0x57 <_JIT_ENTRY+0x57>
    // 0000000000000053:  R_X86_64_GOTPCRELX   _PyErr_SetString-0x4
    // 57: 58                            popq    %rax
    // 58: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x5e <_JIT_ENTRY+0x5e>
    // 000000000000005a:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 5e: 
    const unsigned char code_body[94] = {
        0x50, 0x49, 0x8b, 0x7d, 0x20, 0xbe, 0x50, 0x91,
        0x00, 0x00, 0x48, 0x03, 0x35, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xe2, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x85, 0xc0, 0x78, 0x18, 0x48, 0x8b,
        0x04, 0x24, 0x48, 0x85, 0xc0, 0x74, 0x16, 0x48,
        0x89, 0x45, 0x00, 0x48, 0x83, 0xc5, 0x08, 0x58,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x58, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48,
        0x8d, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0xe7, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x58,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: '__build_class__ not found\x00'
    // 1a: 00 00 00 00 00 00
    // 20: &_PyRuntime+0x0
    // 28: &PyMapping_GetOptionalItem+0x0
    // 30: CONTINUE
    // 38: ERROR_TARGET
    // 40: &PyExc_NameError+0x0
    // 48: &_PyErr_SetString+0x0
    const unsigned char data_body[80] = {
        0x5f, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
        0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x5f, 0x20,
        0x6e, 0x6f, 0x74, 0x20, 0x66, 0x6f, 0x75, 0x6e,
        0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x20, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x28, (uintptr_t)&PyMapping_GetOptionalItem);
    patch_64(data + 0x30, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x38, instruction_starts[instruction->error_target]);
    patch_64(data + 0x40, (uintptr_t)&PyExc_NameError);
    patch_64(data + 0x48, (uintptr_t)&_PyErr_SetString);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xd, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x16, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x32, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0x39, (uintptr_t)data + 0x34);
    patch_x86_64_32rx(code + 0x40, (uintptr_t)data + 0x3c);
    patch_32r(code + 0x4a, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x53, (uintptr_t)data + 0x44);
    patch_x86_64_32rx(code + 0x5a, (uintptr_t)data + 0x34);
}

void
emit__LOAD_CONST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_CONST.o: file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 00                   movq    (%r13), %rax
    // 4: 48 8b 40 18                   movq    0x18(%rax), %rax
    // 8: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // f: 48 8b 44 c8 18                movq    0x18(%rax,%rcx,8), %rax
    // 14: 8b 08                         movl    (%rax), %ecx
    // 16: ff c1                         incl    %ecx
    // 18: 74 02                         je      0x1c <_JIT_ENTRY+0x1c>
    // 1a: 89 08                         movl    %ecx, (%rax)
    // 1c: 48 89 45 00                   movq    %rax, (%rbp)
    // 20: 48 83 c5 08                   addq    $0x8, %rbp
    // 24: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x2a <_JIT_ENTRY+0x2a>
    // 0000000000000026:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 24: 
    const unsigned char code_body[36] = {
        0x49, 0x8b, 0x45, 0x00, 0x48, 0x8b, 0x40, 0x18,
        0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x44, 0xc8, 0x18, 0x8b, 0x08, 0xff, 0xc1,
        0x74, 0x02, 0x89, 0x08, 0x48, 0x89, 0x45, 0x00,
        0x48, 0x83, 0xc5, 0x08,
    };
    // 0: 
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0xb, (uintptr_t)data + -0x4);
}

void
emit__LOAD_CONST_INLINE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_CONST_INLINE.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  R_X86_64_REX_GOTPCRELX       _JIT_OPERAND-0x4
    // 7: 8b 08                         movl    (%rax), %ecx
    // 9: ff c1                         incl    %ecx
    // b: 74 02                         je      0xf <_JIT_ENTRY+0xf>
    // d: 89 08                         movl    %ecx, (%rax)
    // f: 48 89 45 00                   movq    %rax, (%rbp)
    // 13: 48 83 c5 08                   addq    $0x8, %rbp
    // 17: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 17: 
    const unsigned char code_body[23] = {
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x08, 0xff, 0xc1, 0x74, 0x02, 0x89, 0x08, 0x48,
        0x89, 0x45, 0x00, 0x48, 0x83, 0xc5, 0x08,
    };
    // 0: 
    // 0: OPERAND
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
}

void
emit__LOAD_CONST_INLINE_BORROW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_CONST_INLINE_BORROW.o:   file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  R_X86_64_REX_GOTPCRELX       _JIT_OPERAND-0x4
    // 7: 48 89 45 00                   movq    %rax, (%rbp)
    // b: 48 83 c5 08                   addq    $0x8, %rbp
    // f: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x15 <_JIT_ENTRY+0x15>
    // 0000000000000011:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // f: 
    const unsigned char code_body[15] = {
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0x45, 0x00, 0x48, 0x83, 0xc5, 0x08,
    };
    // 0: 
    // 0: OPERAND
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
}

void
emit__LOAD_CONST_INLINE_BORROW_WITH_NULL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_CONST_INLINE_BORROW_WITH_NULL.o: file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  R_X86_64_REX_GOTPCRELX       _JIT_OPERAND-0x4
    // 7: 48 89 45 00                   movq    %rax, (%rbp)
    // b: 48 c7 45 08 00 00 00 00       movq    $0x0, 0x8(%rbp)
    // 13: 48 83 c5 10                   addq    $0x10, %rbp
    // 17: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 17: 
    const unsigned char code_body[23] = {
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0x45, 0x00, 0x48, 0xc7, 0x45, 0x08, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x83, 0xc5, 0x10,
    };
    // 0: 
    // 0: OPERAND
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
}

void
emit__LOAD_CONST_INLINE_WITH_NULL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_CONST_INLINE_WITH_NULL.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  R_X86_64_REX_GOTPCRELX       _JIT_OPERAND-0x4
    // 7: 8b 08                         movl    (%rax), %ecx
    // 9: ff c1                         incl    %ecx
    // b: 74 02                         je      0xf <_JIT_ENTRY+0xf>
    // d: 89 08                         movl    %ecx, (%rax)
    // f: 48 89 45 00                   movq    %rax, (%rbp)
    // 13: 48 c7 45 08 00 00 00 00       movq    $0x0, 0x8(%rbp)
    // 1b: 48 83 c5 10                   addq    $0x10, %rbp
    // 1f: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x25 <_JIT_ENTRY+0x25>
    // 0000000000000021:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 1f: 
    const unsigned char code_body[31] = {
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x8b,
        0x08, 0xff, 0xc1, 0x74, 0x02, 0x89, 0x08, 0x48,
        0x89, 0x45, 0x00, 0x48, 0xc7, 0x45, 0x08, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x83, 0xc5, 0x10,
    };
    // 0: 
    // 0: OPERAND
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
}

void
emit__LOAD_DEREF(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_DEREF.o: file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x8 <_JIT_ENTRY+0x8>
    // 0000000000000004:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 8: 49 8b 44 c5 48                movq    0x48(%r13,%rax,8), %rax
    // d: 48 8b 40 10                   movq    0x10(%rax), %rax
    // 11: 48 85 c0                      testq   %rax, %rax
    // 14: 74 17                         je      0x2d <_JIT_ENTRY+0x2d>
    // 16: 8b 08                         movl    (%rax), %ecx
    // 18: ff c1                         incl    %ecx
    // 1a: 74 02                         je      0x1e <_JIT_ENTRY+0x1e>
    // 1c: 89 08                         movl    %ecx, (%rax)
    // 1e: 48 89 45 00                   movq    %rax, (%rbp)
    // 22: 48 83 c5 08                   addq    $0x8, %rbp
    // 26: 58                            popq    %rax
    // 27: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x2d <_JIT_ENTRY+0x2d>
    // 0000000000000029:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 2d: 0f b7 15 00 00 00 00          movzwl  (%rip), %edx            # 0x34 <_JIT_ENTRY+0x34>
    // 0000000000000030:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 34: 49 8b 75 00                   movq    (%r13), %rsi
    // 38: 4c 89 e7                      movq    %r12, %rdi
    // 3b: ff 15 00 00 00 00             callq   *(%rip)                 # 0x41 <_JIT_ENTRY+0x41>
    // 000000000000003d:  R_X86_64_GOTPCRELX   _PyEval_FormatExcUnbound-0x4
    // 41: 58                            popq    %rax
    // 42: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x48 <_JIT_ENTRY+0x48>
    // 0000000000000044:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 48: 
    const unsigned char code_body[72] = {
        0x50, 0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x8b, 0x44, 0xc5, 0x48, 0x48, 0x8b, 0x40,
        0x10, 0x48, 0x85, 0xc0, 0x74, 0x17, 0x8b, 0x08,
        0xff, 0xc1, 0x74, 0x02, 0x89, 0x08, 0x48, 0x89,
        0x45, 0x00, 0x48, 0x83, 0xc5, 0x08, 0x58, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x75, 0x00,
        0x4c, 0x89, 0xe7, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: CONTINUE
    // 10: &_PyEval_FormatExcUnbound+0x0
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_PyEval_FormatExcUnbound);
    patch_64(data + 0x18, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x4, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x29, (uintptr_t)data + 0x4);
    patch_32r(code + 0x30, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x3d, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x44, (uintptr_t)data + 0x14);
}

void
emit__LOAD_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_FAST.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 7: 49 8b 44 c5 48                movq    0x48(%r13,%rax,8), %rax
    // c: 8b 08                         movl    (%rax), %ecx
    // e: ff c1                         incl    %ecx
    // 10: 74 02                         je      0x14 <_JIT_ENTRY+0x14>
    // 12: 89 08                         movl    %ecx, (%rax)
    // 14: 48 89 45 00                   movq    %rax, (%rbp)
    // 18: 48 83 c5 08                   addq    $0x8, %rbp
    // 1c: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x22 <_JIT_ENTRY+0x22>
    // 000000000000001e:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 1c: 
    const unsigned char code_body[28] = {
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x8b, 0x44, 0xc5, 0x48, 0x8b, 0x08, 0xff, 0xc1,
        0x74, 0x02, 0x89, 0x08, 0x48, 0x89, 0x45, 0x00,
        0x48, 0x83, 0xc5, 0x08,
    };
    // 0: 
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x3, (uintptr_t)data + -0x4);
}

void
emit__LOAD_FAST_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_FAST_0.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 48                   movq    0x48(%r13), %rax
    // 4: 8b 08                         movl    (%rax), %ecx
    // 6: ff c1                         incl    %ecx
    // 8: 74 02                         je      0xc <_JIT_ENTRY+0xc>
    // a: 89 08                         movl    %ecx, (%rax)
    // c: 48 89 45 00                   movq    %rax, (%rbp)
    // 10: 48 83 c5 08                   addq    $0x8, %rbp
    // 14: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1a <_JIT_ENTRY+0x1a>
    // 0000000000000016:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 14: 
    const unsigned char code_body[20] = {
        0x49, 0x8b, 0x45, 0x48, 0x8b, 0x08, 0xff, 0xc1,
        0x74, 0x02, 0x89, 0x08, 0x48, 0x89, 0x45, 0x00,
        0x48, 0x83, 0xc5, 0x08,
    };
    // 0: 
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_FAST_1.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 50                   movq    0x50(%r13), %rax
    // 4: 8b 08                         movl    (%rax), %ecx
    // 6: ff c1                         incl    %ecx
    // 8: 74 02                         je      0xc <_JIT_ENTRY+0xc>
    // a: 89 08                         movl    %ecx, (%rax)
    // c: 48 89 45 00                   movq    %rax, (%rbp)
    // 10: 48 83 c5 08                   addq    $0x8, %rbp
    // 14: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1a <_JIT_ENTRY+0x1a>
    // 0000000000000016:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 14: 
    const unsigned char code_body[20] = {
        0x49, 0x8b, 0x45, 0x50, 0x8b, 0x08, 0xff, 0xc1,
        0x74, 0x02, 0x89, 0x08, 0x48, 0x89, 0x45, 0x00,
        0x48, 0x83, 0xc5, 0x08,
    };
    // 0: 
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_FAST_2.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 58                   movq    0x58(%r13), %rax
    // 4: 8b 08                         movl    (%rax), %ecx
    // 6: ff c1                         incl    %ecx
    // 8: 74 02                         je      0xc <_JIT_ENTRY+0xc>
    // a: 89 08                         movl    %ecx, (%rax)
    // c: 48 89 45 00                   movq    %rax, (%rbp)
    // 10: 48 83 c5 08                   addq    $0x8, %rbp
    // 14: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1a <_JIT_ENTRY+0x1a>
    // 0000000000000016:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 14: 
    const unsigned char code_body[20] = {
        0x49, 0x8b, 0x45, 0x58, 0x8b, 0x08, 0xff, 0xc1,
        0x74, 0x02, 0x89, 0x08, 0x48, 0x89, 0x45, 0x00,
        0x48, 0x83, 0xc5, 0x08,
    };
    // 0: 
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_3(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_FAST_3.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 60                   movq    0x60(%r13), %rax
    // 4: 8b 08                         movl    (%rax), %ecx
    // 6: ff c1                         incl    %ecx
    // 8: 74 02                         je      0xc <_JIT_ENTRY+0xc>
    // a: 89 08                         movl    %ecx, (%rax)
    // c: 48 89 45 00                   movq    %rax, (%rbp)
    // 10: 48 83 c5 08                   addq    $0x8, %rbp
    // 14: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1a <_JIT_ENTRY+0x1a>
    // 0000000000000016:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 14: 
    const unsigned char code_body[20] = {
        0x49, 0x8b, 0x45, 0x60, 0x8b, 0x08, 0xff, 0xc1,
        0x74, 0x02, 0x89, 0x08, 0x48, 0x89, 0x45, 0x00,
        0x48, 0x83, 0xc5, 0x08,
    };
    // 0: 
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_4(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_FAST_4.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 68                   movq    0x68(%r13), %rax
    // 4: 8b 08                         movl    (%rax), %ecx
    // 6: ff c1                         incl    %ecx
    // 8: 74 02                         je      0xc <_JIT_ENTRY+0xc>
    // a: 89 08                         movl    %ecx, (%rax)
    // c: 48 89 45 00                   movq    %rax, (%rbp)
    // 10: 48 83 c5 08                   addq    $0x8, %rbp
    // 14: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1a <_JIT_ENTRY+0x1a>
    // 0000000000000016:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 14: 
    const unsigned char code_body[20] = {
        0x49, 0x8b, 0x45, 0x68, 0x8b, 0x08, 0xff, 0xc1,
        0x74, 0x02, 0x89, 0x08, 0x48, 0x89, 0x45, 0x00,
        0x48, 0x83, 0xc5, 0x08,
    };
    // 0: 
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_5(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_FAST_5.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 70                   movq    0x70(%r13), %rax
    // 4: 8b 08                         movl    (%rax), %ecx
    // 6: ff c1                         incl    %ecx
    // 8: 74 02                         je      0xc <_JIT_ENTRY+0xc>
    // a: 89 08                         movl    %ecx, (%rax)
    // c: 48 89 45 00                   movq    %rax, (%rbp)
    // 10: 48 83 c5 08                   addq    $0x8, %rbp
    // 14: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1a <_JIT_ENTRY+0x1a>
    // 0000000000000016:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 14: 
    const unsigned char code_body[20] = {
        0x49, 0x8b, 0x45, 0x70, 0x8b, 0x08, 0xff, 0xc1,
        0x74, 0x02, 0x89, 0x08, 0x48, 0x89, 0x45, 0x00,
        0x48, 0x83, 0xc5, 0x08,
    };
    // 0: 
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_6(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_FAST_6.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 78                   movq    0x78(%r13), %rax
    // 4: 8b 08                         movl    (%rax), %ecx
    // 6: ff c1                         incl    %ecx
    // 8: 74 02                         je      0xc <_JIT_ENTRY+0xc>
    // a: 89 08                         movl    %ecx, (%rax)
    // c: 48 89 45 00                   movq    %rax, (%rbp)
    // 10: 48 83 c5 08                   addq    $0x8, %rbp
    // 14: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1a <_JIT_ENTRY+0x1a>
    // 0000000000000016:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 14: 
    const unsigned char code_body[20] = {
        0x49, 0x8b, 0x45, 0x78, 0x8b, 0x08, 0xff, 0xc1,
        0x74, 0x02, 0x89, 0x08, 0x48, 0x89, 0x45, 0x00,
        0x48, 0x83, 0xc5, 0x08,
    };
    // 0: 
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_7(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_FAST_7.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 85 80 00 00 00          movq    0x80(%r13), %rax
    // 7: 8b 08                         movl    (%rax), %ecx
    // 9: ff c1                         incl    %ecx
    // b: 74 02                         je      0xf <_JIT_ENTRY+0xf>
    // d: 89 08                         movl    %ecx, (%rax)
    // f: 48 89 45 00                   movq    %rax, (%rbp)
    // 13: 48 83 c5 08                   addq    $0x8, %rbp
    // 17: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 17: 
    const unsigned char code_body[23] = {
        0x49, 0x8b, 0x85, 0x80, 0x00, 0x00, 0x00, 0x8b,
        0x08, 0xff, 0xc1, 0x74, 0x02, 0x89, 0x08, 0x48,
        0x89, 0x45, 0x00, 0x48, 0x83, 0xc5, 0x08,
    };
    // 0: 
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__LOAD_FAST_AND_CLEAR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_FAST_AND_CLEAR.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 7: 49 8b 4c c5 48                movq    0x48(%r13,%rax,8), %rcx
    // c: 49 c7 44 c5 48 00 00 00 00    movq    $0x0, 0x48(%r13,%rax,8)
    // 15: 48 89 4d 00                   movq    %rcx, (%rbp)
    // 19: 48 83 c5 08                   addq    $0x8, %rbp
    // 1d: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x23 <_JIT_ENTRY+0x23>
    // 000000000000001f:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 1d: 
    const unsigned char code_body[29] = {
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x8b, 0x4c, 0xc5, 0x48, 0x49, 0xc7, 0x44, 0xc5,
        0x48, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x4d,
        0x00, 0x48, 0x83, 0xc5, 0x08,
    };
    // 0: 
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x3, (uintptr_t)data + -0x4);
}

void
emit__LOAD_FAST_CHECK(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_FAST_CHECK.o:    file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x8 <_JIT_ENTRY+0x8>
    // 0000000000000004:  R_X86_64_REX_GOTPCRELX       _JIT_OPARG-0x4
    // 8: 0f b7 c1                      movzwl  %cx, %eax
    // b: 49 8b 44 c5 48                movq    0x48(%r13,%rax,8), %rax
    // 10: 48 85 c0                      testq   %rax, %rax
    // 13: 74 17                         je      0x2c <_JIT_ENTRY+0x2c>
    // 15: 8b 08                         movl    (%rax), %ecx
    // 17: ff c1                         incl    %ecx
    // 19: 74 02                         je      0x1d <_JIT_ENTRY+0x1d>
    // 1b: 89 08                         movl    %ecx, (%rax)
    // 1d: 48 89 45 00                   movq    %rax, (%rbp)
    // 21: 48 83 c5 08                   addq    $0x8, %rbp
    // 25: 58                            popq    %rax
    // 26: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x2c <_JIT_ENTRY+0x2c>
    // 0000000000000028:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 2c: 0f b7 f1                      movzwl  %cx, %esi
    // 2f: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x36 <_JIT_ENTRY+0x36>
    // 0000000000000032:  R_X86_64_REX_GOTPCRELX       PyExc_UnboundLocalError-0x4
    // 36: 48 8b 18                      movq    (%rax), %rbx
    // 39: 49 8b 45 00                   movq    (%r13), %rax
    // 3d: 48 8b 78 60                   movq    0x60(%rax), %rdi
    // 41: ff 15 00 00 00 00             callq   *(%rip)                 # 0x47 <_JIT_ENTRY+0x47>
    // 0000000000000043:  R_X86_64_GOTPCRELX   PyTuple_GetItem-0x4
    // 47: 48 8d 15 00 00 00 00          leaq    (%rip), %rdx            # 0x4e <_JIT_ENTRY+0x4e>
    // 000000000000004a:  R_X86_64_PC32        .L.str-0x4
    // 4e: 4c 89 e7                      movq    %r12, %rdi
    // 51: 48 89 de                      movq    %rbx, %rsi
    // 54: 48 89 c1                      movq    %rax, %rcx
    // 57: ff 15 00 00 00 00             callq   *(%rip)                 # 0x5d <_JIT_ENTRY+0x5d>
    // 0000000000000059:  R_X86_64_GOTPCRELX   _PyEval_FormatExcCheckArg-0x4
    // 5d: 58                            popq    %rax
    // 5e: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x64 <_JIT_ENTRY+0x64>
    // 0000000000000060:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 64: 
    const unsigned char code_body[100] = {
        0x50, 0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xb7, 0xc1, 0x49, 0x8b, 0x44, 0xc5, 0x48,
        0x48, 0x85, 0xc0, 0x74, 0x17, 0x8b, 0x08, 0xff,
        0xc1, 0x74, 0x02, 0x89, 0x08, 0x48, 0x89, 0x45,
        0x00, 0x48, 0x83, 0xc5, 0x08, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0xf1, 0x48,
        0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x18, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8b, 0x78,
        0x60, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8d, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89,
        0xe7, 0x48, 0x89, 0xde, 0x48, 0x89, 0xc1, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: "cannot access local variable '%s' where it is not associated with a value\x00"
    // 4a: 00 00 00 00 00 00
    // 50: OPARG
    // 58: CONTINUE
    // 60: &PyExc_UnboundLocalError+0x0
    // 68: &PyTuple_GetItem+0x0
    // 70: &_PyEval_FormatExcCheckArg+0x0
    // 78: ERROR_TARGET
    const unsigned char data_body[128] = {
        0x63, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x20, 0x61,
        0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6c, 0x6f,
        0x63, 0x61, 0x6c, 0x20, 0x76, 0x61, 0x72, 0x69,
        0x61, 0x62, 0x6c, 0x65, 0x20, 0x27, 0x25, 0x73,
        0x27, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20,
        0x69, 0x74, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f,
        0x74, 0x20, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69,
        0x61, 0x74, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74,
        0x68, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x75,
        0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x50, instruction->oparg);
    patch_64(data + 0x58, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x60, (uintptr_t)&PyExc_UnboundLocalError);
    patch_64(data + 0x68, (uintptr_t)&PyTuple_GetItem);
    patch_64(data + 0x70, (uintptr_t)&_PyEval_FormatExcCheckArg);
    patch_64(data + 0x78, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x4, (uintptr_t)data + 0x4c);
    patch_x86_64_32rx(code + 0x28, (uintptr_t)data + 0x54);
    patch_x86_64_32rx(code + 0x32, (uintptr_t)data + 0x5c);
    patch_x86_64_32rx(code + 0x43, (uintptr_t)data + 0x64);
    patch_32r(code + 0x4a, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x59, (uintptr_t)data + 0x6c);
    patch_x86_64_32rx(code + 0x60, (uintptr_t)data + 0x74);
}

void
emit__LOAD_FROM_DICT_OR_DEREF(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_FROM_DICT_OR_DEREF.o:    file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 5: 49 8b 45 00                   movq    (%r13), %rax
    // 9: 48 8b 40 60                   movq    0x60(%rax), %rax
    // d: 4c 8b 35 00 00 00 00          movq    (%rip), %r14            # 0x14 <_JIT_ENTRY+0x14>
    // 0000000000000010:  R_X86_64_REX_GOTPCRELX       _JIT_OPARG-0x4
    // 14: 41 0f b7 ce                   movzwl  %r14w, %ecx
    // 18: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
    // 1d: 48 89 e2                      movq    %rsp, %rdx
    // 20: 48 89 df                      movq    %rbx, %rdi
    // 23: ff 15 00 00 00 00             callq   *(%rip)                 # 0x29 <_JIT_ENTRY+0x29>
    // 0000000000000025:  R_X86_64_GOTPCRELX   PyMapping_GetOptionalItem-0x4
    // 29: 85 c0                         testl   %eax, %eax
    // 2b: 78 1b                         js      0x48 <_JIT_ENTRY+0x48>
    // 2d: 48 8b 04 24                   movq    (%rsp), %rax
    // 31: 48 85 c0                      testq   %rax, %rax
    // 34: 74 19                         je      0x4f <_JIT_ENTRY+0x4f>
    // 36: 48 8b 0b                      movq    (%rbx), %rcx
    // 39: 85 c9                         testl   %ecx, %ecx
    // 3b: 79 37                         jns     0x74 <_JIT_ENTRY+0x74>
    // 3d: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // 41: 58                            popq    %rax
    // 42: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x48 <_JIT_ENTRY+0x48>
    // 0000000000000044:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 48: 58                            popq    %rax
    // 49: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x4f <_JIT_ENTRY+0x4f>
    // 000000000000004b:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 4f: 41 0f b7 c6                   movzwl  %r14w, %eax
    // 53: 49 8b 44 c5 48                movq    0x48(%r13,%rax,8), %rax
    // 58: 48 8b 40 10                   movq    0x10(%rax), %rax
    // 5c: 48 85 c0                      testq   %rax, %rax
    // 5f: 74 33                         je      0x94 <_JIT_ENTRY+0x94>
    // 61: 8b 08                         movl    (%rax), %ecx
    // 63: ff c1                         incl    %ecx
    // 65: 74 02                         je      0x69 <_JIT_ENTRY+0x69>
    // 67: 89 08                         movl    %ecx, (%rax)
    // 69: 48 89 04 24                   movq    %rax, (%rsp)
    // 6d: 48 8b 0b                      movq    (%rbx), %rcx
    // 70: 85 c9                         testl   %ecx, %ecx
    // 72: 78 c9                         js      0x3d <_JIT_ENTRY+0x3d>
    // 74: 48 ff c9                      decq    %rcx
    // 77: 48 89 0b                      movq    %rcx, (%rbx)
    // 7a: 75 c1                         jne     0x3d <_JIT_ENTRY+0x3d>
    // 7c: 48 89 df                      movq    %rbx, %rdi
    // 7f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x85 <_JIT_ENTRY+0x85>
    // 0000000000000081:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 85: 48 8b 04 24                   movq    (%rsp), %rax
    // 89: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // 8d: 58                            popq    %rax
    // 8e: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x94 <_JIT_ENTRY+0x94>
    // 0000000000000090:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 94: 48 c7 04 24 00 00 00 00       movq    $0x0, (%rsp)
    // 9c: 0f b7 15 00 00 00 00          movzwl  (%rip), %edx            # 0xa3 <_JIT_ENTRY+0xa3>
    // 000000000000009f:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // a3: 49 8b 75 00                   movq    (%r13), %rsi
    // a7: 4c 89 e7                      movq    %r12, %rdi
    // aa: ff 15 00 00 00 00             callq   *(%rip)                 # 0xb0 <_JIT_ENTRY+0xb0>
    // 00000000000000ac:  R_X86_64_GOTPCRELX   _PyEval_FormatExcUnbound-0x4
    // b0: 58                            popq    %rax
    // b1: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xb7 <_JIT_ENTRY+0xb7>
    // 00000000000000b3:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // b7: 
    const unsigned char code_body[183] = {
        0x50, 0x48, 0x8b, 0x5d, 0xf8, 0x49, 0x8b, 0x45,
        0x00, 0x48, 0x8b, 0x40, 0x60, 0x4c, 0x8b, 0x35,
        0x00, 0x00, 0x00, 0x00, 0x41, 0x0f, 0xb7, 0xce,
        0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0x89, 0xe2,
        0x48, 0x89, 0xdf, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x85, 0xc0, 0x78, 0x1b, 0x48, 0x8b, 0x04,
        0x24, 0x48, 0x85, 0xc0, 0x74, 0x19, 0x48, 0x8b,
        0x0b, 0x85, 0xc9, 0x79, 0x37, 0x48, 0x89, 0x45,
        0xf8, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x41,
        0x0f, 0xb7, 0xc6, 0x49, 0x8b, 0x44, 0xc5, 0x48,
        0x48, 0x8b, 0x40, 0x10, 0x48, 0x85, 0xc0, 0x74,
        0x33, 0x8b, 0x08, 0xff, 0xc1, 0x74, 0x02, 0x89,
        0x08, 0x48, 0x89, 0x04, 0x24, 0x48, 0x8b, 0x0b,
        0x85, 0xc9, 0x78, 0xc9, 0x48, 0xff, 0xc9, 0x48,
        0x89, 0x0b, 0x75, 0xc1, 0x48, 0x89, 0xdf, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x04,
        0x24, 0x48, 0x89, 0x45, 0xf8, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x48, 0xc7, 0x04, 0x24,
        0x00, 0x00, 0x00, 0x00, 0x0f, 0xb7, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x8b, 0x75, 0x00, 0x4c,
        0x89, 0xe7, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: &PyMapping_GetOptionalItem+0x0
    // 10: CONTINUE
    // 18: ERROR_TARGET
    // 20: &_Py_Dealloc+0x0
    // 28: &_PyEval_FormatExcUnbound+0x0
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyMapping_GetOptionalItem);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, instruction_starts[instruction->error_target]);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x28, (uintptr_t)&_PyEval_FormatExcUnbound);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x10, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x25, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x44, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x4b, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x81, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x90, (uintptr_t)data + 0xc);
    patch_32r(code + 0x9f, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xac, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0xb3, (uintptr_t)data + 0x14);
}

void
emit__LOAD_GLOBAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_GLOBAL.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 44 8b 35 00 00 00 00          movl    (%rip), %r14d           # 0x8 <_JIT_ENTRY+0x8>
    // 0000000000000004:  R_X86_64_REX_GOTPCRELX       _JIT_OPARG-0x4
    // 8: 49 8b 45 00                   movq    (%r13), %rax
    // c: 49 8b 7d 18                   movq    0x18(%r13), %rdi
    // 10: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 14: 44 89 f1                      movl    %r14d, %ecx
    // 17: 81 e1 fe ff 00 00             andl    $0xfffe, %ecx           # imm = 0xFFFE
    // 1d: 48 8b 5c 88 18                movq    0x18(%rax,%rcx,4), %rbx
    // 22: 48 8b 47 08                   movq    0x8(%rdi), %rax
    // 26: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x2d <_JIT_ENTRY+0x2d>
    // 0000000000000029:  R_X86_64_REX_GOTPCRELX       PyDict_Type-0x4
    // 2d: 75 11                         jne     0x40 <_JIT_ENTRY+0x40>
    // 2f: 49 8b 75 20                   movq    0x20(%r13), %rsi
    // 33: 48 8b 46 08                   movq    0x8(%rsi), %rax
    // 37: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x3e <_JIT_ENTRY+0x3e>
    // 000000000000003a:  R_X86_64_REX_GOTPCRELX       PyDict_Type-0x4
    // 3e: 74 5a                         je      0x9a <_JIT_ENTRY+0x9a>
    // 40: 48 89 e2                      movq    %rsp, %rdx
    // 43: 48 89 de                      movq    %rbx, %rsi
    // 46: ff 15 00 00 00 00             callq   *(%rip)                 # 0x4c <_JIT_ENTRY+0x4c>
    // 0000000000000048:  R_X86_64_GOTPCRELX   PyMapping_GetOptionalItem-0x4
    // 4c: 85 c0                         testl   %eax, %eax
    // 4e: 78 43                         js      0x93 <_JIT_ENTRY+0x93>
    // 50: 48 8b 04 24                   movq    (%rsp), %rax
    // 54: 48 85 c0                      testq   %rax, %rax
    // 57: 75 4f                         jne     0xa8 <_JIT_ENTRY+0xa8>
    // 59: 49 8b 7d 20                   movq    0x20(%r13), %rdi
    // 5d: 48 89 e2                      movq    %rsp, %rdx
    // 60: 48 89 de                      movq    %rbx, %rsi
    // 63: ff 15 00 00 00 00             callq   *(%rip)                 # 0x69 <_JIT_ENTRY+0x69>
    // 0000000000000065:  R_X86_64_GOTPCRELX   PyMapping_GetOptionalItem-0x4
    // 69: 85 c0                         testl   %eax, %eax
    // 6b: 78 26                         js      0x93 <_JIT_ENTRY+0x93>
    // 6d: 48 8b 04 24                   movq    (%rsp), %rax
    // 71: 48 85 c0                      testq   %rax, %rax
    // 74: 75 32                         jne     0xa8 <_JIT_ENTRY+0xa8>
    // 76: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x7d <_JIT_ENTRY+0x7d>
    // 0000000000000079:  R_X86_64_REX_GOTPCRELX       PyExc_NameError-0x4
    // 7d: 48 8b 30                      movq    (%rax), %rsi
    // 80: 48 8d 15 00 00 00 00          leaq    (%rip), %rdx            # 0x87 <_JIT_ENTRY+0x87>
    // 0000000000000083:  R_X86_64_PC32        .L.str.9-0x4
    // 87: 4c 89 e7                      movq    %r12, %rdi
    // 8a: 48 89 d9                      movq    %rbx, %rcx
    // 8d: ff 15 00 00 00 00             callq   *(%rip)                 # 0x93 <_JIT_ENTRY+0x93>
    // 000000000000008f:  R_X86_64_GOTPCRELX   _PyEval_FormatExcCheckArg-0x4
    // 93: 58                            popq    %rax
    // 94: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x9a <_JIT_ENTRY+0x9a>
    // 0000000000000096:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 9a: 48 89 da                      movq    %rbx, %rdx
    // 9d: ff 15 00 00 00 00             callq   *(%rip)                 # 0xa3 <_JIT_ENTRY+0xa3>
    // 000000000000009f:  R_X86_64_GOTPCRELX   _PyDict_LoadGlobal-0x4
    // a3: 48 85 c0                      testq   %rax, %rax
    // a6: 74 23                         je      0xcb <_JIT_ENTRY+0xcb>
    // a8: 41 0f b7 ce                   movzwl  %r14w, %ecx
    // ac: 48 89 45 00                   movq    %rax, (%rbp)
    // b0: 83 e1 01                      andl    $0x1, %ecx
    // b3: 74 08                         je      0xbd <_JIT_ENTRY+0xbd>
    // b5: 48 c7 45 08 00 00 00 00       movq    $0x0, 0x8(%rbp)
    // bd: 89 c8                         movl    %ecx, %eax
    // bf: 48 8d 6c c5 08                leaq    0x8(%rbp,%rax,8), %rbp
    // c4: 58                            popq    %rax
    // c5: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xcb <_JIT_ENTRY+0xcb>
    // 00000000000000c7:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // cb: 49 8b 44 24 70                movq    0x70(%r12), %rax
    // d0: 48 85 c0                      testq   %rax, %rax
    // d3: 74 07                         je      0xdc <_JIT_ENTRY+0xdc>
    // d5: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
    // da: 75 1d                         jne     0xf9 <_JIT_ENTRY+0xf9>
    // dc: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0xe3 <_JIT_ENTRY+0xe3>
    // 00000000000000df:  R_X86_64_REX_GOTPCRELX       PyExc_NameError-0x4
    // e3: 48 8b 30                      movq    (%rax), %rsi
    // e6: 48 8d 15 00 00 00 00          leaq    (%rip), %rdx            # 0xed <_JIT_ENTRY+0xed>
    // 00000000000000e9:  R_X86_64_PC32        .L.str.9-0x4
    // ed: 4c 89 e7                      movq    %r12, %rdi
    // f0: 48 89 d9                      movq    %rbx, %rcx
    // f3: ff 15 00 00 00 00             callq   *(%rip)                 # 0xf9 <_JIT_ENTRY+0xf9>
    // 00000000000000f5:  R_X86_64_GOTPCRELX   _PyEval_FormatExcCheckArg-0x4
    // f9: 58                            popq    %rax
    // fa: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x100 <_JIT_ENTRY+0x100>
    // 00000000000000fc:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 100: 
    const unsigned char code_body[256] = {
        0x50, 0x44, 0x8b, 0x35, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x8b, 0x45, 0x00, 0x49, 0x8b, 0x7d, 0x18,
        0x48, 0x8b, 0x40, 0x20, 0x44, 0x89, 0xf1, 0x81,
        0xe1, 0xfe, 0xff, 0x00, 0x00, 0x48, 0x8b, 0x5c,
        0x88, 0x18, 0x48, 0x8b, 0x47, 0x08, 0x48, 0x3b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x75, 0x11, 0x49,
        0x8b, 0x75, 0x20, 0x48, 0x8b, 0x46, 0x08, 0x48,
        0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x74, 0x5a,
        0x48, 0x89, 0xe2, 0x48, 0x89, 0xde, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x43,
        0x48, 0x8b, 0x04, 0x24, 0x48, 0x85, 0xc0, 0x75,
        0x4f, 0x49, 0x8b, 0x7d, 0x20, 0x48, 0x89, 0xe2,
        0x48, 0x89, 0xde, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x85, 0xc0, 0x78, 0x26, 0x48, 0x8b, 0x04,
        0x24, 0x48, 0x85, 0xc0, 0x75, 0x32, 0x48, 0x8b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x30,
        0x48, 0x8d, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4c,
        0x89, 0xe7, 0x48, 0x89, 0xd9, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x58, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x89, 0xda, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x23,
        0x41, 0x0f, 0xb7, 0xce, 0x48, 0x89, 0x45, 0x00,
        0x83, 0xe1, 0x01, 0x74, 0x08, 0x48, 0xc7, 0x45,
        0x08, 0x00, 0x00, 0x00, 0x00, 0x89, 0xc8, 0x48,
        0x8d, 0x6c, 0xc5, 0x08, 0x58, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x8b, 0x44, 0x24, 0x70,
        0x48, 0x85, 0xc0, 0x74, 0x07, 0x48, 0x83, 0x78,
        0x08, 0x00, 0x75, 0x1d, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8d,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7,
        0x48, 0x89, 0xd9, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: "name '%.200s' is not defined\x00"
    // 1d: 00 00 00
    // 20: OPARG
    // 28: &PyDict_Type+0x0
    // 30: &PyMapping_GetOptionalItem+0x0
    // 38: &PyExc_NameError+0x0
    // 40: &_PyEval_FormatExcCheckArg+0x0
    // 48: ERROR_TARGET
    // 50: &_PyDict_LoadGlobal+0x0
    // 58: CONTINUE
    const unsigned char data_body[96] = {
        0x6e, 0x61, 0x6d, 0x65, 0x20, 0x27, 0x25, 0x2e,
        0x32, 0x30, 0x30, 0x73, 0x27, 0x20, 0x69, 0x73,
        0x20, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x66,
        0x69, 0x6e, 0x65, 0x64, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x20, instruction->oparg);
    patch_64(data + 0x28, (uintptr_t)&PyDict_Type);
    patch_64(data + 0x30, (uintptr_t)&PyMapping_GetOptionalItem);
    patch_64(data + 0x38, (uintptr_t)&PyExc_NameError);
    patch_64(data + 0x40, (uintptr_t)&_PyEval_FormatExcCheckArg);
    patch_64(data + 0x48, instruction_starts[instruction->error_target]);
    patch_64(data + 0x50, (uintptr_t)&_PyDict_LoadGlobal);
    patch_64(data + 0x58, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x4, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x29, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x3a, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x48, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0x65, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0x79, (uintptr_t)data + 0x34);
    patch_32r(code + 0x83, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x8f, (uintptr_t)data + 0x3c);
    patch_x86_64_32rx(code + 0x96, (uintptr_t)data + 0x44);
    patch_x86_64_32rx(code + 0x9f, (uintptr_t)data + 0x4c);
    patch_x86_64_32rx(code + 0xc7, (uintptr_t)data + 0x54);
    patch_x86_64_32rx(code + 0xdf, (uintptr_t)data + 0x34);
    patch_32r(code + 0xe9, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xf5, (uintptr_t)data + 0x3c);
    patch_x86_64_32rx(code + 0xfc, (uintptr_t)data + 0x44);
}

void
emit__LOAD_GLOBAL_BUILTINS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_GLOBAL_BUILTINS.o:       file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 20                   movq    0x20(%r13), %rax
    // 4: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 8: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
    // c: ba 01 00 00 00                movl    $0x1, %edx
    // 11: 48 d3 e2                      shlq    %cl, %rdx
    // 14: 48 01 c2                      addq    %rax, %rdx
    // 17: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x1e <_JIT_ENTRY+0x1e>
    // 000000000000001a:  R_X86_64_GOTPCREL    _JIT_OPERAND-0x4
    // 1e: c1 e0 04                      shll    $0x4, %eax
    // 21: 48 8b 44 10 28                movq    0x28(%rax,%rdx), %rax
    // 26: 48 85 c0                      testq   %rax, %rax
    // 29: 74 25                         je      0x50 <_JIT_ENTRY+0x50>
    // 2b: 8b 08                         movl    (%rax), %ecx
    // 2d: ff c1                         incl    %ecx
    // 2f: 75 25                         jne     0x56 <_JIT_ENTRY+0x56>
    // 31: 48 89 45 00                   movq    %rax, (%rbp)
    // 35: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x3c <_JIT_ENTRY+0x3c>
    // 0000000000000038:  R_X86_64_REX_GOTPCRELX       _JIT_OPARG-0x4
    // 3c: 66 83 e0 01                   andw    $0x1, %ax
    // 40: 75 27                         jne     0x69 <_JIT_ENTRY+0x69>
    // 42: 0f b7 c0                      movzwl  %ax, %eax
    // 45: 48 8d 6c c5 08                leaq    0x8(%rbp,%rax,8), %rbp
    // 4a: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x50 <_JIT_ENTRY+0x50>
    // 000000000000004c:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 50: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x56 <_JIT_ENTRY+0x56>
    // 0000000000000052:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 56: 89 08                         movl    %ecx, (%rax)
    // 58: 48 89 45 00                   movq    %rax, (%rbp)
    // 5c: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x63 <_JIT_ENTRY+0x63>
    // 000000000000005f:  R_X86_64_REX_GOTPCRELX       _JIT_OPARG-0x4
    // 63: 66 83 e0 01                   andw    $0x1, %ax
    // 67: 74 d9                         je      0x42 <_JIT_ENTRY+0x42>
    // 69: 48 c7 45 08 00 00 00 00       movq    $0x0, 0x8(%rbp)
    // 71: 0f b7 c0                      movzwl  %ax, %eax
    // 74: 48 8d 6c c5 08                leaq    0x8(%rbp,%rax,8), %rbp
    // 79: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x7f <_JIT_ENTRY+0x7f>
    // 000000000000007b:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 79: 
    const unsigned char code_body[121] = {
        0x49, 0x8b, 0x45, 0x20, 0x48, 0x8b, 0x40, 0x20,
        0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00,
        0x00, 0x48, 0xd3, 0xe2, 0x48, 0x01, 0xc2, 0x0f,
        0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0xc1, 0xe0,
        0x04, 0x48, 0x8b, 0x44, 0x10, 0x28, 0x48, 0x85,
        0xc0, 0x74, 0x25, 0x8b, 0x08, 0xff, 0xc1, 0x75,
        0x25, 0x48, 0x89, 0x45, 0x00, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x66, 0x83, 0xe0, 0x01,
        0x75, 0x27, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x6c,
        0xc5, 0x08, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x89, 0x08,
        0x48, 0x89, 0x45, 0x00, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x66, 0x83, 0xe0, 0x01, 0x74,
        0xd9, 0x48, 0xc7, 0x45, 0x08, 0x00, 0x00, 0x00,
        0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x6c, 0xc5,
        0x08,
    };
    // 0: 
    // 0: OPERAND
    // 8: OPARG
    // 10: CONTINUE
    // 18: JUMP_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x1a, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x38, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x4c, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x52, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x5f, (uintptr_t)data + 0x4);
}

void
emit__LOAD_GLOBAL_MODULE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_GLOBAL_MODULE.o: file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 45 18                   movq    0x18(%r13), %rax
    // 4: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 8: 0f b6 48 09                   movzbl  0x9(%rax), %ecx
    // c: ba 01 00 00 00                movl    $0x1, %edx
    // 11: 48 d3 e2                      shlq    %cl, %rdx
    // 14: 48 01 c2                      addq    %rax, %rdx
    // 17: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x1e <_JIT_ENTRY+0x1e>
    // 000000000000001a:  R_X86_64_GOTPCREL    _JIT_OPERAND-0x4
    // 1e: c1 e0 04                      shll    $0x4, %eax
    // 21: 48 8b 44 10 28                movq    0x28(%rax,%rdx), %rax
    // 26: 48 85 c0                      testq   %rax, %rax
    // 29: 74 25                         je      0x50 <_JIT_ENTRY+0x50>
    // 2b: 8b 08                         movl    (%rax), %ecx
    // 2d: ff c1                         incl    %ecx
    // 2f: 75 25                         jne     0x56 <_JIT_ENTRY+0x56>
    // 31: 48 89 45 00                   movq    %rax, (%rbp)
    // 35: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x3c <_JIT_ENTRY+0x3c>
    // 0000000000000038:  R_X86_64_REX_GOTPCRELX       _JIT_OPARG-0x4
    // 3c: 66 83 e0 01                   andw    $0x1, %ax
    // 40: 75 27                         jne     0x69 <_JIT_ENTRY+0x69>
    // 42: 0f b7 c0                      movzwl  %ax, %eax
    // 45: 48 8d 6c c5 08                leaq    0x8(%rbp,%rax,8), %rbp
    // 4a: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x50 <_JIT_ENTRY+0x50>
    // 000000000000004c:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 50: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x56 <_JIT_ENTRY+0x56>
    // 0000000000000052:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 56: 89 08                         movl    %ecx, (%rax)
    // 58: 48 89 45 00                   movq    %rax, (%rbp)
    // 5c: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x63 <_JIT_ENTRY+0x63>
    // 000000000000005f:  R_X86_64_REX_GOTPCRELX       _JIT_OPARG-0x4
    // 63: 66 83 e0 01                   andw    $0x1, %ax
    // 67: 74 d9                         je      0x42 <_JIT_ENTRY+0x42>
    // 69: 48 c7 45 08 00 00 00 00       movq    $0x0, 0x8(%rbp)
    // 71: 0f b7 c0                      movzwl  %ax, %eax
    // 74: 48 8d 6c c5 08                leaq    0x8(%rbp,%rax,8), %rbp
    // 79: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x7f <_JIT_ENTRY+0x7f>
    // 000000000000007b:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 79: 
    const unsigned char code_body[121] = {
        0x49, 0x8b, 0x45, 0x18, 0x48, 0x8b, 0x40, 0x20,
        0x0f, 0xb6, 0x48, 0x09, 0xba, 0x01, 0x00, 0x00,
        0x00, 0x48, 0xd3, 0xe2, 0x48, 0x01, 0xc2, 0x0f,
        0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0xc1, 0xe0,
        0x04, 0x48, 0x8b, 0x44, 0x10, 0x28, 0x48, 0x85,
        0xc0, 0x74, 0x25, 0x8b, 0x08, 0xff, 0xc1, 0x75,
        0x25, 0x48, 0x89, 0x45, 0x00, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x66, 0x83, 0xe0, 0x01,
        0x75, 0x27, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x6c,
        0xc5, 0x08, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x89, 0x08,
        0x48, 0x89, 0x45, 0x00, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x66, 0x83, 0xe0, 0x01, 0x74,
        0xd9, 0x48, 0xc7, 0x45, 0x08, 0x00, 0x00, 0x00,
        0x00, 0x0f, 0xb7, 0xc0, 0x48, 0x8d, 0x6c, 0xc5,
        0x08,
    };
    // 0: 
    // 0: OPERAND
    // 8: OPARG
    // 10: CONTINUE
    // 18: JUMP_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x1a, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x38, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x4c, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x52, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x5f, (uintptr_t)data + 0x4);
}

void
emit__LOAD_LOCALS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_LOCALS.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 49 8b 45 28                   movq    0x28(%r13), %rax
    // 5: 48 85 c0                      testq   %rax, %rax
    // 8: 74 17                         je      0x21 <_JIT_ENTRY+0x21>
    // a: 8b 08                         movl    (%rax), %ecx
    // c: ff c1                         incl    %ecx
    // e: 74 02                         je      0x12 <_JIT_ENTRY+0x12>
    // 10: 89 08                         movl    %ecx, (%rax)
    // 12: 48 89 45 00                   movq    %rax, (%rbp)
    // 16: 48 83 c5 08                   addq    $0x8, %rbp
    // 1a: 58                            popq    %rax
    // 1b: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x21 <_JIT_ENTRY+0x21>
    // 000000000000001d:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 21: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x28 <_JIT_ENTRY+0x28>
    // 0000000000000024:  R_X86_64_REX_GOTPCRELX       PyExc_SystemError-0x4
    // 28: 48 8b 30                      movq    (%rax), %rsi
    // 2b: 48 8d 15 00 00 00 00          leaq    (%rip), %rdx            # 0x32 <_JIT_ENTRY+0x32>
    // 000000000000002e:  R_X86_64_PC32        .L.str.10-0x4
    // 32: 4c 89 e7                      movq    %r12, %rdi
    // 35: ff 15 00 00 00 00             callq   *(%rip)                 # 0x3b <_JIT_ENTRY+0x3b>
    // 0000000000000037:  R_X86_64_GOTPCRELX   _PyErr_SetString-0x4
    // 3b: 58                            popq    %rax
    // 3c: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x42 <_JIT_ENTRY+0x42>
    // 000000000000003e:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 42: 
    const unsigned char code_body[66] = {
        0x50, 0x49, 0x8b, 0x45, 0x28, 0x48, 0x85, 0xc0,
        0x74, 0x17, 0x8b, 0x08, 0xff, 0xc1, 0x74, 0x02,
        0x89, 0x08, 0x48, 0x89, 0x45, 0x00, 0x48, 0x83,
        0xc5, 0x08, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x30, 0x48, 0x8d, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x4c, 0x89, 0xe7, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x58, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: 'no locals found\x00'
    // 10: 
    // 10: CONTINUE
    // 18: &PyExc_SystemError+0x0
    // 20: &_PyErr_SetString+0x0
    // 28: ERROR_TARGET
    const unsigned char data_body[48] = {
        0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
        0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&PyExc_SystemError);
    patch_64(data + 0x20, (uintptr_t)&_PyErr_SetString);
    patch_64(data + 0x28, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1d, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x24, (uintptr_t)data + 0x14);
    patch_32r(code + 0x2e, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x37, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x3e, (uintptr_t)data + 0x24);
}

void
emit__LOAD_SUPER_ATTR_ATTR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_SUPER_ATTR_ATTR.o:       file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 45 e8                   movq    -0x18(%rbp), %rax
    // 5: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xc <_JIT_ENTRY+0xc>
    // 0000000000000008:  R_X86_64_REX_GOTPCRELX       PySuper_Type-0x4
    // c: 75 11                         jne     0x1f <_JIT_ENTRY+0x1f>
    // e: 4c 8b 7d f0                   movq    -0x10(%rbp), %r15
    // 12: 49 8b 47 08                   movq    0x8(%r15), %rax
    // 16: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
    // 1d: 75 07                         jne     0x26 <_JIT_ENTRY+0x26>
    // 1f: 58                            popq    %rax
    // 20: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x26 <_JIT_ENTRY+0x26>
    // 0000000000000022:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 26: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 2a: 49 8b 45 00                   movq    (%r13), %rax
    // 2e: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 32: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x39 <_JIT_ENTRY+0x39>
    // 0000000000000035:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 39: 83 e1 fc                      andl    $-0x4, %ecx
    // 3c: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
    // 41: 4c 89 ff                      movq    %r15, %rdi
    // 44: 48 89 de                      movq    %rbx, %rsi
    // 47: 31 c9                         xorl    %ecx, %ecx
    // 49: ff 15 00 00 00 00             callq   *(%rip)                 # 0x4f <_JIT_ENTRY+0x4f>
    // 000000000000004b:  R_X86_64_GOTPCRELX   _PySuper_Lookup-0x4
    // 4f: 49 89 c6                      movq    %rax, %r14
    // 52: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x59 <_JIT_ENTRY+0x59>
    // 0000000000000055:  R_X86_64_REX_GOTPCRELX       PySuper_Type-0x4
    // 59: 48 8b 08                      movq    (%rax), %rcx
    // 5c: 85 c9                         testl   %ecx, %ecx
    // 5e: 78 15                         js      0x75 <_JIT_ENTRY+0x75>
    // 60: 48 ff c9                      decq    %rcx
    // 63: 48 89 08                      movq    %rcx, (%rax)
    // 66: 75 0d                         jne     0x75 <_JIT_ENTRY+0x75>
    // 68: 48 8b 3d 00 00 00 00          movq    (%rip), %rdi            # 0x6f <_JIT_ENTRY+0x6f>
    // 000000000000006b:  R_X86_64_REX_GOTPCRELX       PySuper_Type-0x4
    // 6f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x75 <_JIT_ENTRY+0x75>
    // 0000000000000071:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 75: 49 8b 07                      movq    (%r15), %rax
    // 78: 85 c0                         testl   %eax, %eax
    // 7a: 78 11                         js      0x8d <_JIT_ENTRY+0x8d>
    // 7c: 48 ff c8                      decq    %rax
    // 7f: 49 89 07                      movq    %rax, (%r15)
    // 82: 75 09                         jne     0x8d <_JIT_ENTRY+0x8d>
    // 84: 4c 89 ff                      movq    %r15, %rdi
    // 87: ff 15 00 00 00 00             callq   *(%rip)                 # 0x8d <_JIT_ENTRY+0x8d>
    // 0000000000000089:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 8d: 48 8b 03                      movq    (%rbx), %rax
    // 90: 85 c0                         testl   %eax, %eax
    // 92: 78 11                         js      0xa5 <_JIT_ENTRY+0xa5>
    // 94: 48 ff c8                      decq    %rax
    // 97: 48 89 03                      movq    %rax, (%rbx)
    // 9a: 75 09                         jne     0xa5 <_JIT_ENTRY+0xa5>
    // 9c: 48 89 df                      movq    %rbx, %rdi
    // 9f: ff 15 00 00 00 00             callq   *(%rip)                 # 0xa5 <_JIT_ENTRY+0xa5>
    // 00000000000000a1:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // a5: 4d 85 f6                      testq   %r14, %r14
    // a8: 74 0f                         je      0xb9 <_JIT_ENTRY+0xb9>
    // aa: 4c 89 75 e8                   movq    %r14, -0x18(%rbp)
    // ae: 48 83 c5 f0                   addq    $-0x10, %rbp
    // b2: 58                            popq    %rax
    // b3: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xb9 <_JIT_ENTRY+0xb9>
    // 00000000000000b5:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // b9: 58                            popq    %rax
    // ba: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xc0 <_JIT_ENTRY+0xc0>
    // 00000000000000bc:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // c0: 
    const unsigned char code_body[192] = {
        0x50, 0x48, 0x8b, 0x45, 0xe8, 0x48, 0x3b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x75, 0x11, 0x4c, 0x8b,
        0x7d, 0xf0, 0x49, 0x8b, 0x47, 0x08, 0xf6, 0x80,
        0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x07, 0x58,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x5d, 0xf8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8b,
        0x40, 0x20, 0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00,
        0x00, 0x83, 0xe1, 0xfc, 0x48, 0x8b, 0x54, 0x48,
        0x18, 0x4c, 0x89, 0xff, 0x48, 0x89, 0xde, 0x31,
        0xc9, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x89, 0xc6, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x08, 0x85, 0xc9, 0x78, 0x15,
        0x48, 0xff, 0xc9, 0x48, 0x89, 0x08, 0x75, 0x0d,
        0x48, 0x8b, 0x3d, 0x00, 0x00, 0x00, 0x00, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x07,
        0x85, 0xc0, 0x78, 0x11, 0x48, 0xff, 0xc8, 0x49,
        0x89, 0x07, 0x75, 0x09, 0x4c, 0x89, 0xff, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x03,
        0x85, 0xc0, 0x78, 0x11, 0x48, 0xff, 0xc8, 0x48,
        0x89, 0x03, 0x75, 0x09, 0x48, 0x89, 0xdf, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x85, 0xf6,
        0x74, 0x0f, 0x4c, 0x89, 0x75, 0xe8, 0x48, 0x83,
        0xc5, 0xf0, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &PySuper_Type+0x0
    // 8: JUMP_TARGET
    // 10: OPARG
    // 18: &_PySuper_Lookup+0x0
    // 20: &_Py_Dealloc+0x0
    // 28: CONTINUE
    // 30: ERROR_TARGET
    const unsigned char data_body[56] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PySuper_Type);
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, instruction->oparg);
    patch_64(data + 0x18, (uintptr_t)&_PySuper_Lookup);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x28, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x30, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x8, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x22, (uintptr_t)data + 0x4);
    patch_32r(code + 0x35, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x4b, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x55, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x6b, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x71, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x89, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xa1, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xb5, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0xbc, (uintptr_t)data + 0x2c);
}

void
emit__LOAD_SUPER_ATTR_METHOD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_LOAD_SUPER_ATTR_METHOD.o:     file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 45 e8                   movq    -0x18(%rbp), %rax
    // 5: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xc <_JIT_ENTRY+0xc>
    // 0000000000000008:  R_X86_64_REX_GOTPCRELX       PySuper_Type-0x4
    // c: 75 11                         jne     0x1f <_JIT_ENTRY+0x1f>
    // e: 4c 8b 7d f0                   movq    -0x10(%rbp), %r15
    // 12: 49 8b 47 08                   movq    0x8(%r15), %rax
    // 16: f6 80 ab 00 00 00 80          testb   $-0x80, 0xab(%rax)
    // 1d: 75 07                         jne     0x26 <_JIT_ENTRY+0x26>
    // 1f: 58                            popq    %rax
    // 20: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x26 <_JIT_ENTRY+0x26>
    // 0000000000000022:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 26: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 2a: 49 8b 45 00                   movq    (%r13), %rax
    // 2e: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 32: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x39 <_JIT_ENTRY+0x39>
    // 0000000000000035:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 39: 83 e1 fc                      andl    $-0x4, %ecx
    // 3c: 48 8b 54 48 18                movq    0x18(%rax,%rcx,2), %rdx
    // 41: c7 44 24 04 00 00 00 00       movl    $0x0, 0x4(%rsp)
    // 49: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // 4d: 48 8b 80 90 00 00 00          movq    0x90(%rax), %rax
    // 54: 31 f6                         xorl    %esi, %esi
    // 56: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x5d <_JIT_ENTRY+0x5d>
    // 0000000000000059:  R_X86_64_REX_GOTPCRELX       PyObject_GenericGetAttr-0x4
    // 5d: 48 8d 4c 24 04                leaq    0x4(%rsp), %rcx
    // 62: 48 0f 45 ce                   cmovneq %rsi, %rcx
    // 66: 4c 89 ff                      movq    %r15, %rdi
    // 69: 48 89 de                      movq    %rbx, %rsi
    // 6c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x72 <_JIT_ENTRY+0x72>
    // 000000000000006e:  R_X86_64_GOTPCRELX   _PySuper_Lookup-0x4
    // 72: 49 89 c6                      movq    %rax, %r14
    // 75: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x7c <_JIT_ENTRY+0x7c>
    // 0000000000000078:  R_X86_64_REX_GOTPCRELX       PySuper_Type-0x4
    // 7c: 48 8b 08                      movq    (%rax), %rcx
    // 7f: 85 c9                         testl   %ecx, %ecx
    // 81: 78 15                         js      0x98 <_JIT_ENTRY+0x98>
    // 83: 48 ff c9                      decq    %rcx
    // 86: 48 89 08                      movq    %rcx, (%rax)
    // 89: 75 0d                         jne     0x98 <_JIT_ENTRY+0x98>
    // 8b: 48 8b 3d 00 00 00 00          movq    (%rip), %rdi            # 0x92 <_JIT_ENTRY+0x92>
    // 000000000000008e:  R_X86_64_REX_GOTPCRELX       PySuper_Type-0x4
    // 92: ff 15 00 00 00 00             callq   *(%rip)                 # 0x98 <_JIT_ENTRY+0x98>
    // 0000000000000094:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 98: 49 8b 07                      movq    (%r15), %rax
    // 9b: 85 c0                         testl   %eax, %eax
    // 9d: 78 11                         js      0xb0 <_JIT_ENTRY+0xb0>
    // 9f: 48 ff c8                      decq    %rax
    // a2: 49 89 07                      movq    %rax, (%r15)
    // a5: 75 09                         jne     0xb0 <_JIT_ENTRY+0xb0>
    // a7: 4c 89 ff                      movq    %r15, %rdi
    // aa: ff 15 00 00 00 00             callq   *(%rip)                 # 0xb0 <_JIT_ENTRY+0xb0>
    // 00000000000000ac:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // b0: 4d 85 f6                      testq   %r14, %r14
    // b3: 74 37                         je      0xec <_JIT_ENTRY+0xec>
    // b5: 4c 8d 7d f8                   leaq    -0x8(%rbp), %r15
    // b9: 83 7c 24 04 00                cmpl    $0x0, 0x4(%rsp)
    // be: 75 1a                         jne     0xda <_JIT_ENTRY+0xda>
    // c0: 48 8b 03                      movq    (%rbx), %rax
    // c3: 85 c0                         testl   %eax, %eax
    // c5: 78 11                         js      0xd8 <_JIT_ENTRY+0xd8>
    // c7: 48 ff c8                      decq    %rax
    // ca: 48 89 03                      movq    %rax, (%rbx)
    // cd: 75 09                         jne     0xd8 <_JIT_ENTRY+0xd8>
    // cf: 48 89 df                      movq    %rbx, %rdi
    // d2: ff 15 00 00 00 00             callq   *(%rip)                 # 0xd8 <_JIT_ENTRY+0xd8>
    // 00000000000000d4:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // d8: 31 db                         xorl    %ebx, %ebx
    // da: 4c 89 75 e8                   movq    %r14, -0x18(%rbp)
    // de: 48 89 5d f0                   movq    %rbx, -0x10(%rbp)
    // e2: 4c 89 fd                      movq    %r15, %rbp
    // e5: 58                            popq    %rax
    // e6: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xec <_JIT_ENTRY+0xec>
    // 00000000000000e8:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // ec: 48 8b 03                      movq    (%rbx), %rax
    // ef: 85 c0                         testl   %eax, %eax
    // f1: 78 11                         js      0x104 <_JIT_ENTRY+0x104>
    // f3: 48 ff c8                      decq    %rax
    // f6: 48 89 03                      movq    %rax, (%rbx)
    // f9: 75 09                         jne     0x104 <_JIT_ENTRY+0x104>
    // fb: 48 89 df                      movq    %rbx, %rdi
    // fe: ff 15 00 00 00 00             callq   *(%rip)                 # 0x104 <_JIT_ENTRY+0x104>
    // 0000000000000100:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 104: 58                            popq    %rax
    // 105: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x10b <_JIT_ENTRY+0x10b>
    // 0000000000000107:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 10b: 
    const unsigned char code_body[267] = {
        0x50, 0x48, 0x8b, 0x45, 0xe8, 0x48, 0x3b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x75, 0x11, 0x4c, 0x8b,
        0x7d, 0xf0, 0x49, 0x8b, 0x47, 0x08, 0xf6, 0x80,
        0xab, 0x00, 0x00, 0x00, 0x80, 0x75, 0x07, 0x58,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x5d, 0xf8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8b,
        0x40, 0x20, 0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00,
        0x00, 0x83, 0xe1, 0xfc, 0x48, 0x8b, 0x54, 0x48,
        0x18, 0xc7, 0x44, 0x24, 0x04, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x43, 0x08, 0x48, 0x8b, 0x80,
        0x90, 0x00, 0x00, 0x00, 0x31, 0xf6, 0x48, 0x3b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x4c,
        0x24, 0x04, 0x48, 0x0f, 0x45, 0xce, 0x4c, 0x89,
        0xff, 0x48, 0x89, 0xde, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x08, 0x85,
        0xc9, 0x78, 0x15, 0x48, 0xff, 0xc9, 0x48, 0x89,
        0x08, 0x75, 0x0d, 0x48, 0x8b, 0x3d, 0x00, 0x00,
        0x00, 0x00, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48,
        0xff, 0xc8, 0x49, 0x89, 0x07, 0x75, 0x09, 0x4c,
        0x89, 0xff, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x4d, 0x85, 0xf6, 0x74, 0x37, 0x4c, 0x8d, 0x7d,
        0xf8, 0x83, 0x7c, 0x24, 0x04, 0x00, 0x75, 0x1a,
        0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11, 0x48,
        0xff, 0xc8, 0x48, 0x89, 0x03, 0x75, 0x09, 0x48,
        0x89, 0xdf, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x31, 0xdb, 0x4c, 0x89, 0x75, 0xe8, 0x48, 0x89,
        0x5d, 0xf0, 0x4c, 0x89, 0xfd, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x03, 0x85,
        0xc0, 0x78, 0x11, 0x48, 0xff, 0xc8, 0x48, 0x89,
        0x03, 0x75, 0x09, 0x48, 0x89, 0xdf, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x58, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &PySuper_Type+0x0
    // 8: JUMP_TARGET
    // 10: OPARG
    // 18: &PyObject_GenericGetAttr+0x0
    // 20: &_PySuper_Lookup+0x0
    // 28: &_Py_Dealloc+0x0
    // 30: CONTINUE
    // 38: ERROR_TARGET
    const unsigned char data_body[64] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PySuper_Type);
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, instruction->oparg);
    patch_64(data + 0x18, (uintptr_t)&PyObject_GenericGetAttr);
    patch_64(data + 0x20, (uintptr_t)&_PySuper_Lookup);
    patch_64(data + 0x28, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x30, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x38, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x8, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x22, (uintptr_t)data + 0x4);
    patch_32r(code + 0x35, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x59, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x6e, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x78, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x8e, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x94, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0xac, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0xd4, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0xe8, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0x100, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x107, (uintptr_t)data + 0x34);
}

void
emit__MAKE_CELL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_MAKE_CELL.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 1d 00 00 00 00          movq    (%rip), %rbx            # 0x8 <_JIT_ENTRY+0x8>
    // 0000000000000004:  R_X86_64_REX_GOTPCRELX       _JIT_OPARG-0x4
    // 8: 0f b7 c3                      movzwl  %bx, %eax
    // b: 49 8b 7c c5 48                movq    0x48(%r13,%rax,8), %rdi
    // 10: ff 15 00 00 00 00             callq   *(%rip)                 # 0x16 <_JIT_ENTRY+0x16>
    // 0000000000000012:  R_X86_64_GOTPCRELX   PyCell_New-0x4
    // 16: 48 85 c0                      testq   %rax, %rax
    // 19: 74 28                         je      0x43 <_JIT_ENTRY+0x43>
    // 1b: 0f b7 cb                      movzwl  %bx, %ecx
    // 1e: 49 8b 7c cd 48                movq    0x48(%r13,%rcx,8), %rdi
    // 23: 49 89 44 cd 48                movq    %rax, 0x48(%r13,%rcx,8)
    // 28: 48 85 ff                      testq   %rdi, %rdi
    // 2b: 74 0f                         je      0x3c <_JIT_ENTRY+0x3c>
    // 2d: 48 8b 07                      movq    (%rdi), %rax
    // 30: 85 c0                         testl   %eax, %eax
    // 32: 78 08                         js      0x3c <_JIT_ENTRY+0x3c>
    // 34: 48 ff c8                      decq    %rax
    // 37: 48 89 07                      movq    %rax, (%rdi)
    // 3a: 74 0e                         je      0x4a <_JIT_ENTRY+0x4a>
    // 3c: 58                            popq    %rax
    // 3d: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x43 <_JIT_ENTRY+0x43>
    // 000000000000003f:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 43: 58                            popq    %rax
    // 44: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x4a <_JIT_ENTRY+0x4a>
    // 0000000000000046:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 4a: ff 15 00 00 00 00             callq   *(%rip)                 # 0x50 <_JIT_ENTRY+0x50>
    // 000000000000004c:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 50: 58                            popq    %rax
    // 51: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x57 <_JIT_ENTRY+0x57>
    // 0000000000000053:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 51: 
    const unsigned char code_body[81] = {
        0x50, 0x48, 0x8b, 0x1d, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0xb7, 0xc3, 0x49, 0x8b, 0x7c, 0xc5, 0x48,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x85,
        0xc0, 0x74, 0x28, 0x0f, 0xb7, 0xcb, 0x49, 0x8b,
        0x7c, 0xcd, 0x48, 0x49, 0x89, 0x44, 0xcd, 0x48,
        0x48, 0x85, 0xff, 0x74, 0x0f, 0x48, 0x8b, 0x07,
        0x85, 0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8, 0x48,
        0x89, 0x07, 0x74, 0x0e, 0x58, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x58, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x58,
    };
    // 0: 
    // 0: OPARG
    // 8: &PyCell_New+0x0
    // 10: CONTINUE
    // 18: ERROR_TARGET
    // 20: &_Py_Dealloc+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyCell_New);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, instruction_starts[instruction->error_target]);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x4, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x12, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3f, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x46, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x4c, (uintptr_t)data + 0x1c);
}

void
emit__MAKE_FUNCTION(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_MAKE_FUNCTION.o:      file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 5: 49 8b 75 18                   movq    0x18(%r13), %rsi
    // 9: 48 89 df                      movq    %rbx, %rdi
    // c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x12 <_JIT_ENTRY+0x12>
    // 000000000000000e:  R_X86_64_GOTPCRELX   PyFunction_New-0x4
    // 12: 49 89 c6                      movq    %rax, %r14
    // 15: 48 8b 03                      movq    (%rbx), %rax
    // 18: 85 c0                         testl   %eax, %eax
    // 1a: 78 08                         js      0x24 <_JIT_ENTRY+0x24>
    // 1c: 48 ff c8                      decq    %rax
    // 1f: 48 89 03                      movq    %rax, (%rbx)
    // 22: 74 1c                         je      0x40 <_JIT_ENTRY+0x40>
    // 24: 4d 85 f6                      testq   %r14, %r14
    // 27: 74 25                         je      0x4e <_JIT_ENTRY+0x4e>
    // 29: 8b 73 5c                      movl    0x5c(%rbx), %esi
    // 2c: 4c 89 f7                      movq    %r14, %rdi
    // 2f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x35 <_JIT_ENTRY+0x35>
    // 0000000000000031:  R_X86_64_GOTPCRELX   _PyFunction_SetVersion-0x4
    // 35: 4c 89 75 f8                   movq    %r14, -0x8(%rbp)
    // 39: 58                            popq    %rax
    // 3a: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x40 <_JIT_ENTRY+0x40>
    // 000000000000003c:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 40: 48 89 df                      movq    %rbx, %rdi
    // 43: ff 15 00 00 00 00             callq   *(%rip)                 # 0x49 <_JIT_ENTRY+0x49>
    // 0000000000000045:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 49: 4d 85 f6                      testq   %r14, %r14
    // 4c: 75 db                         jne     0x29 <_JIT_ENTRY+0x29>
    // 4e: 58                            popq    %rax
    // 4f: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x55 <_JIT_ENTRY+0x55>
    // 0000000000000051:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 55: 
    const unsigned char code_body[85] = {
        0x50, 0x48, 0x8b, 0x5d, 0xf8, 0x49, 0x8b, 0x75,
        0x18, 0x48, 0x89, 0xdf, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x89, 0xc6, 0x48, 0x8b, 0x03,
        0x85, 0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8, 0x48,
        0x89, 0x03, 0x74, 0x1c, 0x4d, 0x85, 0xf6, 0x74,
        0x25, 0x8b, 0x73, 0x5c, 0x4c, 0x89, 0xf7, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0x75,
        0xf8, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xdf, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x4d, 0x85, 0xf6, 0x75, 0xdb, 0x58, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &PyFunction_New+0x0
    // 8: &_PyFunction_SetVersion+0x0
    // 10: CONTINUE
    // 18: &_Py_Dealloc+0x0
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyFunction_New);
    patch_64(data + 0x8, (uintptr_t)&_PyFunction_SetVersion);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xe, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x31, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3c, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x45, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x51, (uintptr_t)data + 0x1c);
}

void
emit__MAP_ADD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_MAP_ADD.o:    file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x8 <_JIT_ENTRY+0x8>
    // 0000000000000004:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 8: 48 8b 75 f0                   movq    -0x10(%rbp), %rsi
    // c: 48 8b 55 f8                   movq    -0x8(%rbp), %rdx
    // 10: 48 c7 c1 fe ff ff ff          movq    $-0x2, %rcx
    // 17: 48 29 c1                      subq    %rax, %rcx
    // 1a: 48 8b 7c cd 00                movq    (%rbp,%rcx,8), %rdi
    // 1f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x25 <_JIT_ENTRY+0x25>
    // 0000000000000021:  R_X86_64_GOTPCRELX   _PyDict_SetItem_Take2-0x4
    // 25: 85 c0                         testl   %eax, %eax
    // 27: 74 07                         je      0x30 <_JIT_ENTRY+0x30>
    // 29: 58                            popq    %rax
    // 2a: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x30 <_JIT_ENTRY+0x30>
    // 000000000000002c:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 30: 48 83 c5 f0                   addq    $-0x10, %rbp
    // 34: 58                            popq    %rax
    // 35: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x3b <_JIT_ENTRY+0x3b>
    // 0000000000000037:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 35: 
    const unsigned char code_body[53] = {
        0x50, 0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x75, 0xf0, 0x48, 0x8b, 0x55, 0xf8,
        0x48, 0xc7, 0xc1, 0xfe, 0xff, 0xff, 0xff, 0x48,
        0x29, 0xc1, 0x48, 0x8b, 0x7c, 0xcd, 0x00, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x74,
        0x07, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x83, 0xc5, 0xf0, 0x58,
    };
    // 0: 
    // 0: OPARG
    // 8: &_PyDict_SetItem_Take2+0x0
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyDict_SetItem_Take2);
    patch_64(data + 0x10, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x4, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x21, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x2c, (uintptr_t)data + 0xc);
}

void
emit__MATCH_CLASS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_MATCH_CLASS.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 4c 89 2c 24                   movq    %r13, (%rsp)
    // 5: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 9: 48 8b 5d e8                   movq    -0x18(%rbp), %rbx
    // d: 4c 8b 7d f0                   movq    -0x10(%rbp), %r15
    // 11: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 18: 4c 89 e7                      movq    %r12, %rdi
    // 1b: 48 89 de                      movq    %rbx, %rsi
    // 1e: 4c 89 fa                      movq    %r15, %rdx
    // 21: 4d 89 f0                      movq    %r14, %r8
    // 24: ff 15 00 00 00 00             callq   *(%rip)                 # 0x2a <_JIT_ENTRY+0x2a>
    // 0000000000000026:  R_X86_64_GOTPCRELX   _PyEval_MatchClass-0x4
    // 2a: 49 89 c5                      movq    %rax, %r13
    // 2d: 48 8b 03                      movq    (%rbx), %rax
    // 30: 85 c0                         testl   %eax, %eax
    // 32: 78 08                         js      0x3c <_JIT_ENTRY+0x3c>
    // 34: 48 ff c8                      decq    %rax
    // 37: 48 89 03                      movq    %rax, (%rbx)
    // 3a: 74 1a                         je      0x56 <_JIT_ENTRY+0x56>
    // 3c: 49 8b 07                      movq    (%r15), %rax
    // 3f: 85 c0                         testl   %eax, %eax
    // 41: 78 23                         js      0x66 <_JIT_ENTRY+0x66>
    // 43: 48 ff c8                      decq    %rax
    // 46: 49 89 07                      movq    %rax, (%r15)
    // 49: 75 1b                         jne     0x66 <_JIT_ENTRY+0x66>
    // 4b: 4c 89 ff                      movq    %r15, %rdi
    // 4e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x54 <_JIT_ENTRY+0x54>
    // 0000000000000050:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 54: eb 10                         jmp     0x66 <_JIT_ENTRY+0x66>
    // 56: 48 89 df                      movq    %rbx, %rdi
    // 59: ff 15 00 00 00 00             callq   *(%rip)                 # 0x5f <_JIT_ENTRY+0x5f>
    // 000000000000005b:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 5f: 49 8b 07                      movq    (%r15), %rax
    // 62: 85 c0                         testl   %eax, %eax
    // 64: 79 dd                         jns     0x43 <_JIT_ENTRY+0x43>
    // 66: 49 8b 06                      movq    (%r14), %rax
    // 69: 85 c0                         testl   %eax, %eax
    // 6b: 78 08                         js      0x75 <_JIT_ENTRY+0x75>
    // 6d: 48 ff c8                      decq    %rax
    // 70: 49 89 06                      movq    %rax, (%r14)
    // 73: 74 18                         je      0x8d <_JIT_ENTRY+0x8d>
    // 75: 4d 85 ed                      testq   %r13, %r13
    // 78: 74 21                         je      0x9b <_JIT_ENTRY+0x9b>
    // 7a: 4c 89 6d e8                   movq    %r13, -0x18(%rbp)
    // 7e: 48 83 c5 f0                   addq    $-0x10, %rbp
    // 82: 4c 8b 2c 24                   movq    (%rsp), %r13
    // 86: 58                            popq    %rax
    // 87: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x8d <_JIT_ENTRY+0x8d>
    // 0000000000000089:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 8d: 4c 89 f7                      movq    %r14, %rdi
    // 90: ff 15 00 00 00 00             callq   *(%rip)                 # 0x96 <_JIT_ENTRY+0x96>
    // 0000000000000092:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 96: 4d 85 ed                      testq   %r13, %r13
    // 99: 75 df                         jne     0x7a <_JIT_ENTRY+0x7a>
    // 9b: 49 8b 44 24 70                movq    0x70(%r12), %rax
    // a0: 4c 8b 2d 00 00 00 00          movq    (%rip), %r13            # 0xa7 <_JIT_ENTRY+0xa7>
    // 00000000000000a3:  R_X86_64_REX_GOTPCRELX       _Py_NoneStruct-0x4
    // a7: 48 85 c0                      testq   %rax, %rax
    // aa: 74 ce                         je      0x7a <_JIT_ENTRY+0x7a>
    // ac: 48 83 78 08 00                cmpq    $0x0, 0x8(%rax)
    // b1: 74 c7                         je      0x7a <_JIT_ENTRY+0x7a>
    // b3: 4c 8b 2c 24                   movq    (%rsp), %r13
    // b7: 58                            popq    %rax
    // b8: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xbe <_JIT_ENTRY+0xbe>
    // 00000000000000ba:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // be: 
    const unsigned char code_body[190] = {
        0x50, 0x4c, 0x89, 0x2c, 0x24, 0x4c, 0x8b, 0x75,
        0xf8, 0x48, 0x8b, 0x5d, 0xe8, 0x4c, 0x8b, 0x7d,
        0xf0, 0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00, 0x00,
        0x4c, 0x89, 0xe7, 0x48, 0x89, 0xde, 0x4c, 0x89,
        0xfa, 0x4d, 0x89, 0xf0, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x89, 0xc5, 0x48, 0x8b, 0x03,
        0x85, 0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8, 0x48,
        0x89, 0x03, 0x74, 0x1a, 0x49, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x23, 0x48, 0xff, 0xc8, 0x49, 0x89,
        0x07, 0x75, 0x1b, 0x4c, 0x89, 0xff, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0xeb, 0x10, 0x48, 0x89,
        0xdf, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x8b, 0x07, 0x85, 0xc0, 0x79, 0xdd, 0x49, 0x8b,
        0x06, 0x85, 0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8,
        0x49, 0x89, 0x06, 0x74, 0x18, 0x4d, 0x85, 0xed,
        0x74, 0x21, 0x4c, 0x89, 0x6d, 0xe8, 0x48, 0x83,
        0xc5, 0xf0, 0x4c, 0x8b, 0x2c, 0x24, 0x58, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xf7,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x85,
        0xed, 0x75, 0xdf, 0x49, 0x8b, 0x44, 0x24, 0x70,
        0x4c, 0x8b, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x85, 0xc0, 0x74, 0xce, 0x48, 0x83, 0x78, 0x08,
        0x00, 0x74, 0xc7, 0x4c, 0x8b, 0x2c, 0x24, 0x58,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: &_PyEval_MatchClass+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: CONTINUE
    // 20: &_Py_NoneStruct+0x0
    // 28: ERROR_TARGET
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_MatchClass);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x28, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x14, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x26, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x50, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x5b, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x89, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x92, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xa3, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xba, (uintptr_t)data + 0x24);
}

void
emit__MATCH_KEYS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_MATCH_KEYS.o: file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 75 f0                   movq    -0x10(%rbp), %rsi
    // 5: 48 8b 55 f8                   movq    -0x8(%rbp), %rdx
    // 9: 4c 89 e7                      movq    %r12, %rdi
    // c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x12 <_JIT_ENTRY+0x12>
    // 000000000000000e:  R_X86_64_GOTPCRELX   _PyEval_MatchKeys-0x4
    // 12: 48 85 c0                      testq   %rax, %rax
    // 15: 74 0f                         je      0x26 <_JIT_ENTRY+0x26>
    // 17: 48 89 45 00                   movq    %rax, (%rbp)
    // 1b: 48 83 c5 08                   addq    $0x8, %rbp
    // 1f: 58                            popq    %rax
    // 20: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x26 <_JIT_ENTRY+0x26>
    // 0000000000000022:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 26: 58                            popq    %rax
    // 27: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x2d <_JIT_ENTRY+0x2d>
    // 0000000000000029:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 2d: 
    const unsigned char code_body[45] = {
        0x50, 0x48, 0x8b, 0x75, 0xf0, 0x48, 0x8b, 0x55,
        0xf8, 0x4c, 0x89, 0xe7, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x0f, 0x48,
        0x89, 0x45, 0x00, 0x48, 0x83, 0xc5, 0x08, 0x58,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x58, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &_PyEval_MatchKeys+0x0
    // 8: CONTINUE
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyEval_MatchKeys);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xe, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x22, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x29, (uintptr_t)data + 0xc);
}

void
emit__MATCH_MAPPING(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_MATCH_MAPPING.o:      file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 4: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 8: f6 80 a8 00 00 00 40          testb   $0x40, 0xa8(%rax)
    // f: 75 15                         jne     0x26 <_JIT_ENTRY+0x26>
    // 11: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  R_X86_64_REX_GOTPCRELX       _Py_FalseStruct-0x4
    // 18: 48 89 45 00                   movq    %rax, (%rbp)
    // 1c: 48 83 c5 08                   addq    $0x8, %rbp
    // 20: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x26 <_JIT_ENTRY+0x26>
    // 0000000000000022:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 26: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x2d <_JIT_ENTRY+0x2d>
    // 0000000000000029:  R_X86_64_REX_GOTPCRELX       _Py_TrueStruct-0x4
    // 2d: 48 89 45 00                   movq    %rax, (%rbp)
    // 31: 48 83 c5 08                   addq    $0x8, %rbp
    // 35: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x3b <_JIT_ENTRY+0x3b>
    // 0000000000000037:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 35: 
    const unsigned char code_body[53] = {
        0x48, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x40, 0x08,
        0xf6, 0x80, 0xa8, 0x00, 0x00, 0x00, 0x40, 0x75,
        0x15, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0x45, 0x00, 0x48, 0x83, 0xc5, 0x08,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x45,
        0x00, 0x48, 0x83, 0xc5, 0x08,
    };
    // 0: 
    // 0: &_Py_FalseStruct+0x0
    // 8: CONTINUE
    // 10: &_Py_TrueStruct+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_Py_TrueStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x22, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x29, (uintptr_t)data + 0xc);
}

void
emit__MATCH_SEQUENCE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_MATCH_SEQUENCE.o:     file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 4: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 8: f6 80 a8 00 00 00 20          testb   $0x20, 0xa8(%rax)
    // f: 75 15                         jne     0x26 <_JIT_ENTRY+0x26>
    // 11: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  R_X86_64_REX_GOTPCRELX       _Py_FalseStruct-0x4
    // 18: 48 89 45 00                   movq    %rax, (%rbp)
    // 1c: 48 83 c5 08                   addq    $0x8, %rbp
    // 20: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x26 <_JIT_ENTRY+0x26>
    // 0000000000000022:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 26: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x2d <_JIT_ENTRY+0x2d>
    // 0000000000000029:  R_X86_64_REX_GOTPCRELX       _Py_TrueStruct-0x4
    // 2d: 48 89 45 00                   movq    %rax, (%rbp)
    // 31: 48 83 c5 08                   addq    $0x8, %rbp
    // 35: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x3b <_JIT_ENTRY+0x3b>
    // 0000000000000037:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 35: 
    const unsigned char code_body[53] = {
        0x48, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x40, 0x08,
        0xf6, 0x80, 0xa8, 0x00, 0x00, 0x00, 0x20, 0x75,
        0x15, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0x45, 0x00, 0x48, 0x83, 0xc5, 0x08,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x45,
        0x00, 0x48, 0x83, 0xc5, 0x08,
    };
    // 0: 
    // 0: &_Py_FalseStruct+0x0
    // 8: CONTINUE
    // 10: &_Py_TrueStruct+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_Py_TrueStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x22, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x29, (uintptr_t)data + 0xc);
}

void
emit__NOP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_NOP.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x6 <_JIT_ENTRY+0x6>
    // 0000000000000002:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 0: 
    // 0: 
}

void
emit__POP_EXCEPT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_POP_EXCEPT.o: file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 5: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 9: 49 8b 4c 24 78                movq    0x78(%r12), %rcx
    // e: 48 8b 39                      movq    (%rcx), %rdi
    // 11: 31 d2                         xorl    %edx, %edx
    // 13: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x1a <_JIT_ENTRY+0x1a>
    // 0000000000000016:  R_X86_64_REX_GOTPCRELX       _Py_NoneStruct-0x4
    // 1a: 48 0f 45 d0                   cmovneq %rax, %rdx
    // 1e: 48 89 11                      movq    %rdx, (%rcx)
    // 21: 48 85 ff                      testq   %rdi, %rdi
    // 24: 74 0f                         je      0x35 <_JIT_ENTRY+0x35>
    // 26: 48 8b 07                      movq    (%rdi), %rax
    // 29: 85 c0                         testl   %eax, %eax
    // 2b: 78 08                         js      0x35 <_JIT_ENTRY+0x35>
    // 2d: 48 ff c8                      decq    %rax
    // 30: 48 89 07                      movq    %rax, (%rdi)
    // 33: 74 07                         je      0x3c <_JIT_ENTRY+0x3c>
    // 35: 58                            popq    %rax
    // 36: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x3c <_JIT_ENTRY+0x3c>
    // 0000000000000038:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 3c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x42 <_JIT_ENTRY+0x42>
    // 000000000000003e:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 42: 58                            popq    %rax
    // 43: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x49 <_JIT_ENTRY+0x49>
    // 0000000000000045:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 43: 
    const unsigned char code_body[67] = {
        0x50, 0x48, 0x8b, 0x45, 0xf8, 0x48, 0x83, 0xc5,
        0xf8, 0x49, 0x8b, 0x4c, 0x24, 0x78, 0x48, 0x8b,
        0x39, 0x31, 0xd2, 0x48, 0x3b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x0f, 0x45, 0xd0, 0x48, 0x89,
        0x11, 0x48, 0x85, 0xff, 0x74, 0x0f, 0x48, 0x8b,
        0x07, 0x85, 0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8,
        0x48, 0x89, 0x07, 0x74, 0x07, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x58,
    };
    // 0: 
    // 0: &_Py_NoneStruct+0x0
    // 8: CONTINUE
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x16, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x38, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3e, (uintptr_t)data + 0xc);
}

void
emit__POP_FRAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_POP_FRAME.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 4c 89 ee                      movq    %r13, %rsi
    // 4: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 8: 48 83 c5 f8                   addq    $-0x8, %rbp
    // c: 4c 29 ed                      subq    %r13, %rbp
    // f: 48 83 c5 b8                   addq    $-0x48, %rbp
    // 13: 48 c1 ed 03                   shrq    $0x3, %rbp
    // 17: 41 89 6d 40                   movl    %ebp, 0x40(%r13)
    // 1b: 41 ff 44 24 2c                incl    0x2c(%r12)
    // 20: 4d 8b 6d 08                   movq    0x8(%r13), %r13
    // 24: 4d 89 6c 24 48                movq    %r13, 0x48(%r12)
    // 29: 4c 89 e7                      movq    %r12, %rdi
    // 2c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x32 <_JIT_ENTRY+0x32>
    // 000000000000002e:  R_X86_64_GOTPCRELX   _PyEval_FrameClearAndPop-0x4
    // 32: 49 63 45 40                   movslq  0x40(%r13), %rax
    // 36: 49 89 5c c5 48                movq    %rbx, 0x48(%r13,%rax,8)
    // 3b: 48 8d 2c c5 50 00 00 00       leaq    0x50(,%rax,8), %rbp
    // 43: 4c 01 ed                      addq    %r13, %rbp
    // 46: 41 c7 45 40 ff ff ff ff       movl    $0xffffffff, 0x40(%r13) # imm = 0xFFFFFFFF
    // 4e: 58                            popq    %rax
    // 4f: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x55 <_JIT_ENTRY+0x55>
    // 0000000000000051:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 4f: 
    const unsigned char code_body[79] = {
        0x50, 0x4c, 0x89, 0xee, 0x48, 0x8b, 0x5d, 0xf8,
        0x48, 0x83, 0xc5, 0xf8, 0x4c, 0x29, 0xed, 0x48,
        0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x41,
        0x89, 0x6d, 0x40, 0x41, 0xff, 0x44, 0x24, 0x2c,
        0x4d, 0x8b, 0x6d, 0x08, 0x4d, 0x89, 0x6c, 0x24,
        0x48, 0x4c, 0x89, 0xe7, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x63, 0x45, 0x40, 0x49, 0x89,
        0x5c, 0xc5, 0x48, 0x48, 0x8d, 0x2c, 0xc5, 0x50,
        0x00, 0x00, 0x00, 0x4c, 0x01, 0xed, 0x41, 0xc7,
        0x45, 0x40, 0xff, 0xff, 0xff, 0xff, 0x58,
    };
    // 0: 
    // 0: &_PyEval_FrameClearAndPop+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyEval_FrameClearAndPop);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)data + -0x4);
}

void
emit__POP_TOP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_POP_TOP.o:    file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 7d f8                   movq    -0x8(%rbp), %rdi
    // 5: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 9: 48 8b 07                      movq    (%rdi), %rax
    // c: 85 c0                         testl   %eax, %eax
    // e: 78 08                         js      0x18 <_JIT_ENTRY+0x18>
    // 10: 48 ff c8                      decq    %rax
    // 13: 48 89 07                      movq    %rax, (%rdi)
    // 16: 74 07                         je      0x1f <_JIT_ENTRY+0x1f>
    // 18: 58                            popq    %rax
    // 19: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1f <_JIT_ENTRY+0x1f>
    // 000000000000001b:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 1f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x25 <_JIT_ENTRY+0x25>
    // 0000000000000021:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 25: 58                            popq    %rax
    // 26: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x2c <_JIT_ENTRY+0x2c>
    // 0000000000000028:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 26: 
    const unsigned char code_body[38] = {
        0x50, 0x48, 0x8b, 0x7d, 0xf8, 0x48, 0x83, 0xc5,
        0xf8, 0x48, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x08,
        0x48, 0xff, 0xc8, 0x48, 0x89, 0x07, 0x74, 0x07,
        0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x58,
    };
    // 0: 
    // 0: CONTINUE
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1b, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x21, (uintptr_t)data + 0x4);
}

void
emit__POP_TOP_LOAD_CONST_INLINE_BORROW(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_POP_TOP_LOAD_CONST_INLINE_BORROW.o:   file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 7d f8                   movq    -0x8(%rbp), %rdi
    // 5: 48 8b 07                      movq    (%rdi), %rax
    // 8: 85 c0                         testl   %eax, %eax
    // a: 78 08                         js      0x14 <_JIT_ENTRY+0x14>
    // c: 48 ff c8                      decq    %rax
    // f: 48 89 07                      movq    %rax, (%rdi)
    // 12: 74 12                         je      0x26 <_JIT_ENTRY+0x26>
    // 14: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x1b <_JIT_ENTRY+0x1b>
    // 0000000000000017:  R_X86_64_REX_GOTPCRELX       _JIT_OPERAND-0x4
    // 1b: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // 1f: 58                            popq    %rax
    // 20: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x26 <_JIT_ENTRY+0x26>
    // 0000000000000022:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 26: ff 15 00 00 00 00             callq   *(%rip)                 # 0x2c <_JIT_ENTRY+0x2c>
    // 0000000000000028:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 2c: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x33 <_JIT_ENTRY+0x33>
    // 000000000000002f:  R_X86_64_REX_GOTPCRELX       _JIT_OPERAND-0x4
    // 33: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // 37: 58                            popq    %rax
    // 38: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x3e <_JIT_ENTRY+0x3e>
    // 000000000000003a:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 38: 
    const unsigned char code_body[56] = {
        0x50, 0x48, 0x8b, 0x7d, 0xf8, 0x48, 0x8b, 0x07,
        0x85, 0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8, 0x48,
        0x89, 0x07, 0x74, 0x12, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0x45, 0xf8, 0x58,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0x45, 0xf8, 0x58,
    };
    // 0: 
    // 0: OPERAND
    // 8: CONTINUE
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x17, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x22, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x28, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x2f, (uintptr_t)data + -0x4);
}

void
emit__PUSH_EXC_INFO(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_PUSH_EXC_INFO.o:      file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 4: 49 8b 4c 24 78                movq    0x78(%r12), %rcx
    // 9: 48 8b 11                      movq    (%rcx), %rdx
    // c: 8b 30                         movl    (%rax), %esi
    // e: ff c6                         incl    %esi
    // 10: 74 02                         je      0x14 <_JIT_ENTRY+0x14>
    // 12: 89 30                         movl    %esi, (%rax)
    // 14: 48 85 d2                      testq   %rdx, %rdx
    // 17: 75 07                         jne     0x20 <_JIT_ENTRY+0x20>
    // 19: 48 8b 15 00 00 00 00          movq    (%rip), %rdx            # 0x20 <_JIT_ENTRY+0x20>
    // 000000000000001c:  R_X86_64_REX_GOTPCRELX       _Py_NoneStruct-0x4
    // 20: 48 89 01                      movq    %rax, (%rcx)
    // 23: 48 89 55 f8                   movq    %rdx, -0x8(%rbp)
    // 27: 48 89 45 00                   movq    %rax, (%rbp)
    // 2b: 48 83 c5 08                   addq    $0x8, %rbp
    // 2f: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x35 <_JIT_ENTRY+0x35>
    // 0000000000000031:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 2f: 
    const unsigned char code_body[47] = {
        0x48, 0x8b, 0x45, 0xf8, 0x49, 0x8b, 0x4c, 0x24,
        0x78, 0x48, 0x8b, 0x11, 0x8b, 0x30, 0xff, 0xc6,
        0x74, 0x02, 0x89, 0x30, 0x48, 0x85, 0xd2, 0x75,
        0x07, 0x48, 0x8b, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0x01, 0x48, 0x89, 0x55, 0xf8, 0x48,
        0x89, 0x45, 0x00, 0x48, 0x83, 0xc5, 0x08,
    };
    // 0: 
    // 0: &_Py_NoneStruct+0x0
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1c, (uintptr_t)data + -0x4);
}

void
emit__PUSH_FRAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_PUSH_FRAME.o: file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 4: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 8: 4c 29 ed                      subq    %r13, %rbp
    // b: 48 83 c5 b8                   addq    $-0x48, %rbp
    // f: 48 c1 ed 03                   shrq    $0x3, %rbp
    // 13: 41 89 6d 40                   movl    %ebp, 0x40(%r13)
    // 17: 4c 89 68 08                   movq    %r13, 0x8(%rax)
    // 1b: 49 89 44 24 48                movq    %rax, 0x48(%r12)
    // 20: 41 ff 4c 24 2c                decl    0x2c(%r12)
    // 25: 48 63 48 40                   movslq  0x40(%rax), %rcx
    // 29: 48 8d 2c c8                   leaq    (%rax,%rcx,8), %rbp
    // 2d: 48 83 c5 48                   addq    $0x48, %rbp
    // 31: c7 40 40 ff ff ff ff          movl    $0xffffffff, 0x40(%rax) # imm = 0xFFFFFFFF
    // 38: 49 89 c5                      movq    %rax, %r13
    // 3b: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x41 <_JIT_ENTRY+0x41>
    // 000000000000003d:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 3b: 
    const unsigned char code_body[59] = {
        0x48, 0x8b, 0x45, 0xf8, 0x48, 0x83, 0xc5, 0xf8,
        0x4c, 0x29, 0xed, 0x48, 0x83, 0xc5, 0xb8, 0x48,
        0xc1, 0xed, 0x03, 0x41, 0x89, 0x6d, 0x40, 0x4c,
        0x89, 0x68, 0x08, 0x49, 0x89, 0x44, 0x24, 0x48,
        0x41, 0xff, 0x4c, 0x24, 0x2c, 0x48, 0x63, 0x48,
        0x40, 0x48, 0x8d, 0x2c, 0xc8, 0x48, 0x83, 0xc5,
        0x48, 0xc7, 0x40, 0x40, 0xff, 0xff, 0xff, 0xff,
        0x49, 0x89, 0xc5,
    };
    // 0: 
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__PUSH_NULL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_PUSH_NULL.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 c7 45 00 00 00 00 00       movq    $0x0, (%rbp)
    // 8: 48 83 c5 08                   addq    $0x8, %rbp
    // c: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x12 <_JIT_ENTRY+0x12>
    // 000000000000000e:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // c: 
    const unsigned char code_body[12] = {
        0x48, 0xc7, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x83, 0xc5, 0x08,
    };
    // 0: 
    memcpy(code, code_body, sizeof(code_body));
}

void
emit__PY_FRAME_GENERAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_PY_FRAME_GENERAL.o:   file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x8 <_JIT_ENTRY+0x8>
    // 0000000000000004:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 8: 8d 14 c5 00 00 00 00          leal    (,%rax,8), %edx
    // f: 48 89 e9                      movq    %rbp, %rcx
    // 12: 48 29 d1                      subq    %rdx, %rcx
    // 15: 89 c2                         movl    %eax, %edx
    // 17: f7 d2                         notl    %edx
    // 19: 48 63 d2                      movslq  %edx, %rdx
    // 1c: be fe ff ff ff                movl    $0xfffffffe, %esi       # imm = 0xFFFFFFFE
    // 21: 29 c6                         subl    %eax, %esi
    // 23: 48 63 fe                      movslq  %esi, %rdi
    // 26: 45 31 c0                      xorl    %r8d, %r8d
    // 29: 48 83 7c d5 00 00             cmpq    $0x0, (%rbp,%rdx,8)
    // 2f: 48 8b 74 fd 00                movq    (%rbp,%rdi,8), %rsi
    // 34: 41 0f 95 c0                   setne   %r8b
    // 38: 44 01 c0                      addl    %r8d, %eax
    // 3b: 41 c1 e0 03                   shll    $0x3, %r8d
    // 3f: 4c 29 c1                      subq    %r8, %rcx
    // 42: 48 8b 56 30                   movq    0x30(%rsi), %rdx
    // 46: f6 42 30 01                   testb   $0x1, 0x30(%rdx)
    // 4a: 75 0e                         jne     0x5a <_JIT_ENTRY+0x5a>
    // 4c: 48 8b 56 10                   movq    0x10(%rsi), %rdx
    // 50: 8b 1a                         movl    (%rdx), %ebx
    // 52: ff c3                         incl    %ebx
    // 54: 74 06                         je      0x5c <_JIT_ENTRY+0x5c>
    // 56: 89 1a                         movl    %ebx, (%rdx)
    // 58: eb 02                         jmp     0x5c <_JIT_ENTRY+0x5c>
    // 5a: 31 d2                         xorl    %edx, %edx
    // 5c: 48 8d 6c fd 00                leaq    (%rbp,%rdi,8), %rbp
    // 61: 41 89 c0                      movl    %eax, %r8d
    // 64: 4c 89 e7                      movq    %r12, %rdi
    // 67: 45 31 c9                      xorl    %r9d, %r9d
    // 6a: ff 15 00 00 00 00             callq   *(%rip)                 # 0x70 <_JIT_ENTRY+0x70>
    // 000000000000006c:  R_X86_64_GOTPCRELX   _PyEvalFramePushAndInit-0x4
    // 70: 48 85 c0                      testq   %rax, %rax
    // 73: 74 0f                         je      0x84 <_JIT_ENTRY+0x84>
    // 75: 48 89 45 00                   movq    %rax, (%rbp)
    // 79: 48 83 c5 08                   addq    $0x8, %rbp
    // 7d: 58                            popq    %rax
    // 7e: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x84 <_JIT_ENTRY+0x84>
    // 0000000000000080:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 84: 58                            popq    %rax
    // 85: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x8b <_JIT_ENTRY+0x8b>
    // 0000000000000087:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 8b: 
    const unsigned char code_body[139] = {
        0x50, 0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x8d, 0x14, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0xe9, 0x48, 0x29, 0xd1, 0x89, 0xc2, 0xf7,
        0xd2, 0x48, 0x63, 0xd2, 0xbe, 0xfe, 0xff, 0xff,
        0xff, 0x29, 0xc6, 0x48, 0x63, 0xfe, 0x45, 0x31,
        0xc0, 0x48, 0x83, 0x7c, 0xd5, 0x00, 0x00, 0x48,
        0x8b, 0x74, 0xfd, 0x00, 0x41, 0x0f, 0x95, 0xc0,
        0x44, 0x01, 0xc0, 0x41, 0xc1, 0xe0, 0x03, 0x4c,
        0x29, 0xc1, 0x48, 0x8b, 0x56, 0x30, 0xf6, 0x42,
        0x30, 0x01, 0x75, 0x0e, 0x48, 0x8b, 0x56, 0x10,
        0x8b, 0x1a, 0xff, 0xc3, 0x74, 0x06, 0x89, 0x1a,
        0xeb, 0x02, 0x31, 0xd2, 0x48, 0x8d, 0x6c, 0xfd,
        0x00, 0x41, 0x89, 0xc0, 0x4c, 0x89, 0xe7, 0x45,
        0x31, 0xc9, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x85, 0xc0, 0x74, 0x0f, 0x48, 0x89, 0x45,
        0x00, 0x48, 0x83, 0xc5, 0x08, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x58, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: &_PyEvalFramePushAndInit+0x0
    // 10: CONTINUE
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEvalFramePushAndInit);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x4, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x6c, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x80, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x87, (uintptr_t)data + 0x14);
}

void
emit__REPLACE_WITH_TRUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_REPLACE_WITH_TRUE.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 7d f8                   movq    -0x8(%rbp), %rdi
    // 5: 48 8b 07                      movq    (%rdi), %rax
    // 8: 85 c0                         testl   %eax, %eax
    // a: 78 08                         js      0x14 <_JIT_ENTRY+0x14>
    // c: 48 ff c8                      decq    %rax
    // f: 48 89 07                      movq    %rax, (%rdi)
    // 12: 74 12                         je      0x26 <_JIT_ENTRY+0x26>
    // 14: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x1b <_JIT_ENTRY+0x1b>
    // 0000000000000017:  R_X86_64_REX_GOTPCRELX       _Py_TrueStruct-0x4
    // 1b: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // 1f: 58                            popq    %rax
    // 20: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x26 <_JIT_ENTRY+0x26>
    // 0000000000000022:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 26: ff 15 00 00 00 00             callq   *(%rip)                 # 0x2c <_JIT_ENTRY+0x2c>
    // 0000000000000028:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 2c: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x33 <_JIT_ENTRY+0x33>
    // 000000000000002f:  R_X86_64_REX_GOTPCRELX       _Py_TrueStruct-0x4
    // 33: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // 37: 58                            popq    %rax
    // 38: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x3e <_JIT_ENTRY+0x3e>
    // 000000000000003a:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 38: 
    const unsigned char code_body[56] = {
        0x50, 0x48, 0x8b, 0x7d, 0xf8, 0x48, 0x8b, 0x07,
        0x85, 0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8, 0x48,
        0x89, 0x07, 0x74, 0x12, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0x45, 0xf8, 0x58,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0x45, 0xf8, 0x58,
    };
    // 0: 
    // 0: &_Py_TrueStruct+0x0
    // 8: CONTINUE
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x17, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x22, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x28, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x2f, (uintptr_t)data + -0x4);
}

void
emit__RESUME_CHECK(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_RESUME_CHECK.o:       file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 44 24 18                movq    0x18(%r12), %rax
    // 5: 49 8b 4d 00                   movq    (%r13), %rcx
    // 9: 48 3b 81 a8 00 00 00          cmpq    0xa8(%rcx), %rax
    // 10: 75 06                         jne     0x18 <_JIT_ENTRY+0x18>
    // 12: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 18: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1e <_JIT_ENTRY+0x1e>
    // 000000000000001a:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 1e: 
    const unsigned char code_body[30] = {
        0x49, 0x8b, 0x44, 0x24, 0x18, 0x49, 0x8b, 0x4d,
        0x00, 0x48, 0x3b, 0x81, 0xa8, 0x00, 0x00, 0x00,
        0x75, 0x06, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: CONTINUE
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x14, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x1a, (uintptr_t)data + 0x4);
}

void
emit__RETURN_GENERATOR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_RETURN_GENERATOR.o:   file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 49 8b 7d 10                   movq    0x10(%r13), %rdi
    // 5: ff 15 00 00 00 00             callq   *(%rip)                 # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  R_X86_64_GOTPCRELX   _Py_MakeCoro-0x4
    // b: 48 85 c0                      testq   %rax, %rax
    // e: 0f 84 6b 01 00 00             je      0x17f <_JIT_ENTRY+0x17f>
    // 14: 4c 29 ed                      subq    %r13, %rbp
    // 17: 48 83 c5 b8                   addq    $-0x48, %rbp
    // 1b: 48 c1 ed 03                   shrq    $0x3, %rbp
    // 1f: 41 89 6d 40                   movl    %ebp, 0x40(%r13)
    // 23: 49 83 45 38 02                addq    $0x2, 0x38(%r13)
    // 28: 41 0f 10 45 30                movups  0x30(%r13), %xmm0
    // 2d: 0f 11 40 78                   movups  %xmm0, 0x78(%rax)
    // 31: 41 0f 10 45 00                movups  (%r13), %xmm0
    // 36: 41 0f 10 4d 10                movups  0x10(%r13), %xmm1
    // 3b: 41 0f 10 55 20                movups  0x20(%r13), %xmm2
    // 40: 0f 11 50 68                   movups  %xmm2, 0x68(%rax)
    // 44: 0f 11 48 58                   movups  %xmm1, 0x58(%rax)
    // 48: 0f 11 40 48                   movups  %xmm0, 0x48(%rax)
    // 4c: 41 0f 10 45 40                movups  0x40(%r13), %xmm0
    // 51: 0f 11 80 88 00 00 00          movups  %xmm0, 0x88(%rax)
    // 58: 41 8b 4d 40                   movl    0x40(%r13), %ecx
    // 5c: 83 f9 02                      cmpl    $0x2, %ecx
    // 5f: 0f 8c c8 00 00 00             jl      0x12d <_JIT_ENTRY+0x12d>
    // 65: ba 01 00 00 00                movl    $0x1, %edx
    // 6a: 83 f9 09                      cmpl    $0x9, %ecx
    // 6d: 72 4f                         jb      0xbe <_JIT_ENTRY+0xbe>
    // 6f: 48 89 c6                      movq    %rax, %rsi
    // 72: 4c 29 ee                      subq    %r13, %rsi
    // 75: 48 83 c6 48                   addq    $0x48, %rsi
    // 79: 48 83 fe 20                   cmpq    $0x20, %rsi
    // 7d: 72 3f                         jb      0xbe <_JIT_ENTRY+0xbe>
    // 7f: 48 8d 71 ff                   leaq    -0x1(%rcx), %rsi
    // 83: 48 89 f2                      movq    %rsi, %rdx
    // 86: 48 83 e2 fc                   andq    $-0x4, %rdx
    // 8a: 31 ff                         xorl    %edi, %edi
    // 8c: 0f 1f 40 00                   nopl    (%rax)
    // 90: 41 0f 10 44 fd 50             movups  0x50(%r13,%rdi,8), %xmm0
    // 96: 41 0f 10 4c fd 60             movups  0x60(%r13,%rdi,8), %xmm1
    // 9c: 0f 11 84 f8 98 00 00 00       movups  %xmm0, 0x98(%rax,%rdi,8)
    // a4: 0f 11 8c f8 a8 00 00 00       movups  %xmm1, 0xa8(%rax,%rdi,8)
    // ac: 48 83 c7 04                   addq    $0x4, %rdi
    // b0: 48 39 fa                      cmpq    %rdi, %rdx
    // b3: 75 db                         jne     0x90 <_JIT_ENTRY+0x90>
    // b5: 48 39 d6                      cmpq    %rdx, %rsi
    // b8: 74 73                         je      0x12d <_JIT_ENTRY+0x12d>
    // ba: 48 83 ca 01                   orq     $0x1, %rdx
    // be: 89 cf                         movl    %ecx, %edi
    // c0: 29 d7                         subl    %edx, %edi
    // c2: 48 89 d6                      movq    %rdx, %rsi
    // c5: 83 e7 03                      andl    $0x3, %edi
    // c8: 74 1b                         je      0xe5 <_JIT_ENTRY+0xe5>
    // ca: 48 89 d6                      movq    %rdx, %rsi
    // cd: 0f 1f 00                      nopl    (%rax)
    // d0: 4d 8b 44 f5 48                movq    0x48(%r13,%rsi,8), %r8
    // d5: 4c 89 84 f0 90 00 00 00       movq    %r8, 0x90(%rax,%rsi,8)
    // dd: 48 ff c6                      incq    %rsi
    // e0: 48 ff cf                      decq    %rdi
    // e3: 75 eb                         jne     0xd0 <_JIT_ENTRY+0xd0>
    // e5: 48 29 ca                      subq    %rcx, %rdx
    // e8: 48 83 fa fc                   cmpq    $-0x4, %rdx
    // ec: 77 3f                         ja      0x12d <_JIT_ENTRY+0x12d>
    // ee: 66 90                         nop
    // f0: 49 8b 54 f5 48                movq    0x48(%r13,%rsi,8), %rdx
    // f5: 48 89 94 f0 90 00 00 00       movq    %rdx, 0x90(%rax,%rsi,8)
    // fd: 49 8b 54 f5 50                movq    0x50(%r13,%rsi,8), %rdx
    // 102: 48 89 94 f0 98 00 00 00       movq    %rdx, 0x98(%rax,%rsi,8)
    // 10a: 49 8b 54 f5 58                movq    0x58(%r13,%rsi,8), %rdx
    // 10f: 48 89 94 f0 a0 00 00 00       movq    %rdx, 0xa0(%rax,%rsi,8)
    // 117: 49 8b 54 f5 60                movq    0x60(%r13,%rsi,8), %rdx
    // 11c: 48 89 94 f0 a8 00 00 00       movq    %rdx, 0xa8(%rax,%rsi,8)
    // 124: 48 83 c6 04                   addq    $0x4, %rsi
    // 128: 48 39 f1                      cmpq    %rsi, %rcx
    // 12b: 75 c3                         jne     0xf0 <_JIT_ENTRY+0xf0>
    // 12d: 48 c7 40 50 00 00 00 00       movq    $0x0, 0x50(%rax)
    // 135: c6 40 43 fd                   movb    $-0x3, 0x43(%rax)
    // 139: c6 80 8e 00 00 00 01          movb    $0x1, 0x8e(%rax)
    // 140: 41 ff 44 24 2c                incl    0x2c(%r12)
    // 145: 49 8b 5d 08                   movq    0x8(%r13), %rbx
    // 149: 4c 89 e7                      movq    %r12, %rdi
    // 14c: 4c 89 ee                      movq    %r13, %rsi
    // 14f: 49 89 c6                      movq    %rax, %r14
    // 152: ff 15 00 00 00 00             callq   *(%rip)                 # 0x158 <_JIT_ENTRY+0x158>
    // 0000000000000154:  R_X86_64_GOTPCRELX   _PyThreadState_PopFrame-0x4
    // 158: 49 89 5c 24 48                movq    %rbx, 0x48(%r12)
    // 15d: 48 63 43 40                   movslq  0x40(%rbx), %rax
    // 161: c7 43 40 ff ff ff ff          movl    $0xffffffff, 0x40(%rbx) # imm = 0xFFFFFFFF
    // 168: 4c 89 74 c3 48                movq    %r14, 0x48(%rbx,%rax,8)
    // 16d: 48 8d 2c c3                   leaq    (%rbx,%rax,8), %rbp
    // 171: 48 83 c5 50                   addq    $0x50, %rbp
    // 175: 49 89 dd                      movq    %rbx, %r13
    // 178: 58                            popq    %rax
    // 179: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x17f <_JIT_ENTRY+0x17f>
    // 000000000000017b:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 17f: 58                            popq    %rax
    // 180: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x186 <_JIT_ENTRY+0x186>
    // 0000000000000182:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 186: 
    const unsigned char code_body[390] = {
        0x50, 0x49, 0x8b, 0x7d, 0x10, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x0f, 0x84,
        0x6b, 0x01, 0x00, 0x00, 0x4c, 0x29, 0xed, 0x48,
        0x83, 0xc5, 0xb8, 0x48, 0xc1, 0xed, 0x03, 0x41,
        0x89, 0x6d, 0x40, 0x49, 0x83, 0x45, 0x38, 0x02,
        0x41, 0x0f, 0x10, 0x45, 0x30, 0x0f, 0x11, 0x40,
        0x78, 0x41, 0x0f, 0x10, 0x45, 0x00, 0x41, 0x0f,
        0x10, 0x4d, 0x10, 0x41, 0x0f, 0x10, 0x55, 0x20,
        0x0f, 0x11, 0x50, 0x68, 0x0f, 0x11, 0x48, 0x58,
        0x0f, 0x11, 0x40, 0x48, 0x41, 0x0f, 0x10, 0x45,
        0x40, 0x0f, 0x11, 0x80, 0x88, 0x00, 0x00, 0x00,
        0x41, 0x8b, 0x4d, 0x40, 0x83, 0xf9, 0x02, 0x0f,
        0x8c, 0xc8, 0x00, 0x00, 0x00, 0xba, 0x01, 0x00,
        0x00, 0x00, 0x83, 0xf9, 0x09, 0x72, 0x4f, 0x48,
        0x89, 0xc6, 0x4c, 0x29, 0xee, 0x48, 0x83, 0xc6,
        0x48, 0x48, 0x83, 0xfe, 0x20, 0x72, 0x3f, 0x48,
        0x8d, 0x71, 0xff, 0x48, 0x89, 0xf2, 0x48, 0x83,
        0xe2, 0xfc, 0x31, 0xff, 0x0f, 0x1f, 0x40, 0x00,
        0x41, 0x0f, 0x10, 0x44, 0xfd, 0x50, 0x41, 0x0f,
        0x10, 0x4c, 0xfd, 0x60, 0x0f, 0x11, 0x84, 0xf8,
        0x98, 0x00, 0x00, 0x00, 0x0f, 0x11, 0x8c, 0xf8,
        0xa8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc7, 0x04,
        0x48, 0x39, 0xfa, 0x75, 0xdb, 0x48, 0x39, 0xd6,
        0x74, 0x73, 0x48, 0x83, 0xca, 0x01, 0x89, 0xcf,
        0x29, 0xd7, 0x48, 0x89, 0xd6, 0x83, 0xe7, 0x03,
        0x74, 0x1b, 0x48, 0x89, 0xd6, 0x0f, 0x1f, 0x00,
        0x4d, 0x8b, 0x44, 0xf5, 0x48, 0x4c, 0x89, 0x84,
        0xf0, 0x90, 0x00, 0x00, 0x00, 0x48, 0xff, 0xc6,
        0x48, 0xff, 0xcf, 0x75, 0xeb, 0x48, 0x29, 0xca,
        0x48, 0x83, 0xfa, 0xfc, 0x77, 0x3f, 0x66, 0x90,
        0x49, 0x8b, 0x54, 0xf5, 0x48, 0x48, 0x89, 0x94,
        0xf0, 0x90, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x54,
        0xf5, 0x50, 0x48, 0x89, 0x94, 0xf0, 0x98, 0x00,
        0x00, 0x00, 0x49, 0x8b, 0x54, 0xf5, 0x58, 0x48,
        0x89, 0x94, 0xf0, 0xa0, 0x00, 0x00, 0x00, 0x49,
        0x8b, 0x54, 0xf5, 0x60, 0x48, 0x89, 0x94, 0xf0,
        0xa8, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc6, 0x04,
        0x48, 0x39, 0xf1, 0x75, 0xc3, 0x48, 0xc7, 0x40,
        0x50, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x40, 0x43,
        0xfd, 0xc6, 0x80, 0x8e, 0x00, 0x00, 0x00, 0x01,
        0x41, 0xff, 0x44, 0x24, 0x2c, 0x49, 0x8b, 0x5d,
        0x08, 0x4c, 0x89, 0xe7, 0x4c, 0x89, 0xee, 0x49,
        0x89, 0xc6, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x89, 0x5c, 0x24, 0x48, 0x48, 0x63, 0x43,
        0x40, 0xc7, 0x43, 0x40, 0xff, 0xff, 0xff, 0xff,
        0x4c, 0x89, 0x74, 0xc3, 0x48, 0x48, 0x8d, 0x2c,
        0xc3, 0x48, 0x83, 0xc5, 0x50, 0x49, 0x89, 0xdd,
        0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x58,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &_Py_MakeCoro+0x0
    // 8: &_PyThreadState_PopFrame+0x0
    // 10: CONTINUE
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_MakeCoro);
    patch_64(data + 0x8, (uintptr_t)&_PyThreadState_PopFrame);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x154, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x17b, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x182, (uintptr_t)data + 0x14);
}

void
emit__SAVE_RETURN_OFFSET(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_SAVE_RETURN_OFFSET.o: file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  R_X86_64_REX_GOTPCRELX       _JIT_OPARG-0x4
    // 7: 66 41 89 45 44                movw    %ax, 0x44(%r13)
    // c: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x12 <_JIT_ENTRY+0x12>
    // 000000000000000e:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // c: 
    const unsigned char code_body[12] = {
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x66,
        0x41, 0x89, 0x45, 0x44,
    };
    // 0: 
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
}

void
emit__SETUP_ANNOTATIONS(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_SETUP_ANNOTATIONS.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 49 8b 7d 28                   movq    0x28(%r13), %rdi
    // 5: 48 85 ff                      testq   %rdi, %rdi
    // 8: 74 38                         je      0x42 <_JIT_ENTRY+0x42>
    // a: be 00 90 00 00                movl    $0x9000, %esi           # imm = 0x9000
    // f: 48 03 35 00 00 00 00          addq    (%rip), %rsi            # 0x16 <_JIT_ENTRY+0x16>
    // 0000000000000012:  R_X86_64_REX_GOTPCRELX       _PyRuntime-0x4
    // 16: 48 89 e2                      movq    %rsp, %rdx
    // 19: ff 15 00 00 00 00             callq   *(%rip)                 # 0x1f <_JIT_ENTRY+0x1f>
    // 000000000000001b:  R_X86_64_GOTPCRELX   PyMapping_GetOptionalItem-0x4
    // 1f: 85 c0                         testl   %eax, %eax
    // 21: 78 3b                         js      0x5e <_JIT_ENTRY+0x5e>
    // 23: 48 8b 3c 24                   movq    (%rsp), %rdi
    // 27: 48 85 ff                      testq   %rdi, %rdi
    // 2a: 74 39                         je      0x65 <_JIT_ENTRY+0x65>
    // 2c: 48 8b 07                      movq    (%rdi), %rax
    // 2f: 85 c0                         testl   %eax, %eax
    // 31: 78 08                         js      0x3b <_JIT_ENTRY+0x3b>
    // 33: 48 ff c8                      decq    %rax
    // 36: 48 89 07                      movq    %rax, (%rdi)
    // 39: 74 7a                         je      0xb5 <_JIT_ENTRY+0xb5>
    // 3b: 58                            popq    %rax
    // 3c: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x42 <_JIT_ENTRY+0x42>
    // 000000000000003e:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 42: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x49 <_JIT_ENTRY+0x49>
    // 0000000000000045:  R_X86_64_REX_GOTPCRELX       PyExc_SystemError-0x4
    // 49: 48 8b 30                      movq    (%rax), %rsi
    // 4c: 48 8d 15 00 00 00 00          leaq    (%rip), %rdx            # 0x53 <_JIT_ENTRY+0x53>
    // 000000000000004f:  R_X86_64_PC32        .L.str.12-0x4
    // 53: 4c 89 e7                      movq    %r12, %rdi
    // 56: 31 c0                         xorl    %eax, %eax
    // 58: ff 15 00 00 00 00             callq   *(%rip)                 # 0x5e <_JIT_ENTRY+0x5e>
    // 000000000000005a:  R_X86_64_GOTPCRELX   _PyErr_Format-0x4
    // 5e: 58                            popq    %rax
    // 5f: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x65 <_JIT_ENTRY+0x65>
    // 0000000000000061:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 65: ff 15 00 00 00 00             callq   *(%rip)                 # 0x6b <_JIT_ENTRY+0x6b>
    // 0000000000000067:  R_X86_64_GOTPCRELX   PyDict_New-0x4
    // 6b: 48 89 04 24                   movq    %rax, (%rsp)
    // 6f: 48 85 c0                      testq   %rax, %rax
    // 72: 74 ea                         je      0x5e <_JIT_ENTRY+0x5e>
    // 74: 49 8b 7d 28                   movq    0x28(%r13), %rdi
    // 78: be 00 90 00 00                movl    $0x9000, %esi           # imm = 0x9000
    // 7d: 48 03 35 00 00 00 00          addq    (%rip), %rsi            # 0x84 <_JIT_ENTRY+0x84>
    // 0000000000000080:  R_X86_64_REX_GOTPCRELX       _PyRuntime-0x4
    // 84: 48 89 c2                      movq    %rax, %rdx
    // 87: ff 15 00 00 00 00             callq   *(%rip)                 # 0x8d <_JIT_ENTRY+0x8d>
    // 0000000000000089:  R_X86_64_GOTPCRELX   PyObject_SetItem-0x4
    // 8d: 48 8b 3c 24                   movq    (%rsp), %rdi
    // 91: 48 8b 0f                      movq    (%rdi), %rcx
    // 94: 85 c9                         testl   %ecx, %ecx
    // 96: 78 12                         js      0xaa <_JIT_ENTRY+0xaa>
    // 98: 48 ff c9                      decq    %rcx
    // 9b: 48 89 0f                      movq    %rcx, (%rdi)
    // 9e: 75 0a                         jne     0xaa <_JIT_ENTRY+0xaa>
    // a0: 89 c3                         movl    %eax, %ebx
    // a2: ff 15 00 00 00 00             callq   *(%rip)                 # 0xa8 <_JIT_ENTRY+0xa8>
    // 00000000000000a4:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // a8: 89 d8                         movl    %ebx, %eax
    // aa: 85 c0                         testl   %eax, %eax
    // ac: 74 8d                         je      0x3b <_JIT_ENTRY+0x3b>
    // ae: 58                            popq    %rax
    // af: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xb5 <_JIT_ENTRY+0xb5>
    // 00000000000000b1:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // b5: ff 15 00 00 00 00             callq   *(%rip)                 # 0xbb <_JIT_ENTRY+0xbb>
    // 00000000000000b7:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // bb: 58                            popq    %rax
    // bc: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xc2 <_JIT_ENTRY+0xc2>
    // 00000000000000be:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // bc: 
    const unsigned char code_body[188] = {
        0x50, 0x49, 0x8b, 0x7d, 0x28, 0x48, 0x85, 0xff,
        0x74, 0x38, 0xbe, 0x00, 0x90, 0x00, 0x00, 0x48,
        0x03, 0x35, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89,
        0xe2, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x85,
        0xc0, 0x78, 0x3b, 0x48, 0x8b, 0x3c, 0x24, 0x48,
        0x85, 0xff, 0x74, 0x39, 0x48, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8, 0x48, 0x89,
        0x07, 0x74, 0x7a, 0x58, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x30, 0x48, 0x8d, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7, 0x31, 0xc0,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x58, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0x04, 0x24, 0x48,
        0x85, 0xc0, 0x74, 0xea, 0x49, 0x8b, 0x7d, 0x28,
        0xbe, 0x00, 0x90, 0x00, 0x00, 0x48, 0x03, 0x35,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xc2, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x3c,
        0x24, 0x48, 0x8b, 0x0f, 0x85, 0xc9, 0x78, 0x12,
        0x48, 0xff, 0xc9, 0x48, 0x89, 0x0f, 0x75, 0x0a,
        0x89, 0xc3, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x89, 0xd8, 0x85, 0xc0, 0x74, 0x8d, 0x58, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x58,
    };
    // 0: 'no locals found when setting up annotations\x00'
    // 2c: 00 00 00 00
    // 30: &_PyRuntime+0x0
    // 38: &PyMapping_GetOptionalItem+0x0
    // 40: CONTINUE
    // 48: &PyExc_SystemError+0x0
    // 50: &_PyErr_Format+0x0
    // 58: ERROR_TARGET
    // 60: &PyDict_New+0x0
    // 68: &PyObject_SetItem+0x0
    // 70: &_Py_Dealloc+0x0
    const unsigned char data_body[120] = {
        0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
        0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20,
        0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x74,
        0x74, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x70, 0x20,
        0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
        0x6f, 0x6e, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x30, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x38, (uintptr_t)&PyMapping_GetOptionalItem);
    patch_64(data + 0x40, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x48, (uintptr_t)&PyExc_SystemError);
    patch_64(data + 0x50, (uintptr_t)&_PyErr_Format);
    patch_64(data + 0x58, instruction_starts[instruction->error_target]);
    patch_64(data + 0x60, (uintptr_t)&PyDict_New);
    patch_64(data + 0x68, (uintptr_t)&PyObject_SetItem);
    patch_64(data + 0x70, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x12, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0x1b, (uintptr_t)data + 0x34);
    patch_x86_64_32rx(code + 0x3e, (uintptr_t)data + 0x3c);
    patch_x86_64_32rx(code + 0x45, (uintptr_t)data + 0x44);
    patch_32r(code + 0x4f, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x5a, (uintptr_t)data + 0x4c);
    patch_x86_64_32rx(code + 0x61, (uintptr_t)data + 0x54);
    patch_x86_64_32rx(code + 0x67, (uintptr_t)data + 0x5c);
    patch_x86_64_32rx(code + 0x80, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0x89, (uintptr_t)data + 0x64);
    patch_x86_64_32rx(code + 0xa4, (uintptr_t)data + 0x6c);
    patch_x86_64_32rx(code + 0xb1, (uintptr_t)data + 0x54);
    patch_x86_64_32rx(code + 0xb7, (uintptr_t)data + 0x6c);
}

void
emit__SET_ADD(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_SET_ADD.o:    file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 8b 05 00 00 00 00             movl    (%rip), %eax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  R_X86_64_GOTPCRELX   _JIT_OPARG-0x4
    // 7: f7 d0                         notl    %eax
    // 9: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // d: c1 e0 03                      shll    $0x3, %eax
    // 10: 48 0d 00 00 f8 ff             orq     $-0x80000, %rax         # imm = 0xFFF80000
    // 16: 48 8b 7c 05 00                movq    (%rbp,%rax), %rdi
    // 1b: 48 89 de                      movq    %rbx, %rsi
    // 1e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x24 <_JIT_ENTRY+0x24>
    // 0000000000000020:  R_X86_64_GOTPCRELX   PySet_Add-0x4
    // 24: 48 8b 0b                      movq    (%rbx), %rcx
    // 27: 85 c9                         testl   %ecx, %ecx
    // 29: 78 08                         js      0x33 <_JIT_ENTRY+0x33>
    // 2b: 48 ff c9                      decq    %rcx
    // 2e: 48 89 0b                      movq    %rcx, (%rbx)
    // 31: 74 0b                         je      0x3e <_JIT_ENTRY+0x3e>
    // 33: 85 c0                         testl   %eax, %eax
    // 35: 74 18                         je      0x4f <_JIT_ENTRY+0x4f>
    // 37: 58                            popq    %rax
    // 38: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x3e <_JIT_ENTRY+0x3e>
    // 000000000000003a:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 3e: 48 89 df                      movq    %rbx, %rdi
    // 41: 89 c3                         movl    %eax, %ebx
    // 43: ff 15 00 00 00 00             callq   *(%rip)                 # 0x49 <_JIT_ENTRY+0x49>
    // 0000000000000045:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 49: 89 d8                         movl    %ebx, %eax
    // 4b: 85 c0                         testl   %eax, %eax
    // 4d: 75 e8                         jne     0x37 <_JIT_ENTRY+0x37>
    // 4f: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 53: 58                            popq    %rax
    // 54: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x5a <_JIT_ENTRY+0x5a>
    // 0000000000000056:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 54: 
    const unsigned char code_body[84] = {
        0x50, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0xf7,
        0xd0, 0x48, 0x8b, 0x5d, 0xf8, 0xc1, 0xe0, 0x03,
        0x48, 0x0d, 0x00, 0x00, 0xf8, 0xff, 0x48, 0x8b,
        0x7c, 0x05, 0x00, 0x48, 0x89, 0xde, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x0b, 0x85,
        0xc9, 0x78, 0x08, 0x48, 0xff, 0xc9, 0x48, 0x89,
        0x0b, 0x74, 0x0b, 0x85, 0xc0, 0x74, 0x18, 0x58,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89,
        0xdf, 0x89, 0xc3, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x89, 0xd8, 0x85, 0xc0, 0x75, 0xe8, 0x48,
        0x83, 0xc5, 0xf8, 0x58,
    };
    // 0: 
    // 0: OPARG
    // 8: &PySet_Add+0x0
    // 10: ERROR_TARGET
    // 18: &_Py_Dealloc+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PySet_Add);
    patch_64(data + 0x10, instruction_starts[instruction->error_target]);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x20, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3a, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x45, (uintptr_t)data + 0x14);
}

void
emit__SET_FUNCTION_ATTRIBUTE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_SET_FUNCTION_ATTRIBUTE.o:     file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 89 e8                      movq    %rbp, %rax
    // 3: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 7: 48 8b 48 f0                   movq    -0x10(%rax), %rcx
    // b: f3 0f bc 35 00 00 00 00       tzcntl  (%rip), %esi            # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 13: 48 8b 50 f8                   movq    -0x8(%rax), %rdx
    // 17: 48 8d 3d 00 00 00 00          leaq    (%rip), %rdi            # 0x1e <_JIT_ENTRY+0x1e>
    // 000000000000001a:  R_X86_64_PC32        .rodata-0x4
    // 1e: 48 63 34 b7                   movslq  (%rdi,%rsi,4), %rsi
    // 22: 48 01 fe                      addq    %rdi, %rsi
    // 25: ff e6                         jmpq    *%rsi
    // 27: 48 8d 72 38                   leaq    0x38(%rdx), %rsi
    // 2b: 48 89 0e                      movq    %rcx, (%rsi)
    // 2e: 48 89 50 f0                   movq    %rdx, -0x10(%rax)
    // 32: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x38 <_JIT_ENTRY+0x38>
    // 0000000000000034:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 38: 48 8d 72 70                   leaq    0x70(%rdx), %rsi
    // 3c: 48 89 0e                      movq    %rcx, (%rsi)
    // 3f: 48 89 50 f0                   movq    %rdx, -0x10(%rax)
    // 43: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x49 <_JIT_ENTRY+0x49>
    // 0000000000000045:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 49: 48 8d 72 48                   leaq    0x48(%rdx), %rsi
    // 4d: 48 89 0e                      movq    %rcx, (%rsi)
    // 50: 48 89 50 f0                   movq    %rdx, -0x10(%rax)
    // 54: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x5a <_JIT_ENTRY+0x5a>
    // 0000000000000056:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 5a: 48 8d 72 40                   leaq    0x40(%rdx), %rsi
    // 5e: 48 89 0e                      movq    %rcx, (%rsi)
    // 61: 48 89 50 f0                   movq    %rdx, -0x10(%rax)
    // 65: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x6b <_JIT_ENTRY+0x6b>
    // 0000000000000067:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 65: 
    const unsigned char code_body[101] = {
        0x48, 0x89, 0xe8, 0x48, 0x83, 0xc5, 0xf8, 0x48,
        0x8b, 0x48, 0xf0, 0xf3, 0x0f, 0xbc, 0x35, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x50, 0xf8, 0x48,
        0x8d, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x48, 0x63,
        0x34, 0xb7, 0x48, 0x01, 0xfe, 0xff, 0xe6, 0x48,
        0x8d, 0x72, 0x38, 0x48, 0x89, 0x0e, 0x48, 0x89,
        0x50, 0xf0, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8d, 0x72, 0x70, 0x48, 0x89, 0x0e, 0x48,
        0x89, 0x50, 0xf0, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8d, 0x72, 0x48, 0x48, 0x89, 0x0e,
        0x48, 0x89, 0x50, 0xf0, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8d, 0x72, 0x40, 0x48, 0x89,
        0x0e, 0x48, 0x89, 0x50, 0xf0,
    };
    // 0: '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    // 10: 
    // 10: OPARG
    // 18: CONTINUE
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_32r(data + 0x0, (uintptr_t)code + 0x27);
    patch_32r(data + 0x4, (uintptr_t)code + 0x5e);
    patch_32r(data + 0x8, (uintptr_t)code + 0x40);
    patch_32r(data + 0xc, (uintptr_t)code + 0x55);
    patch_64(data + 0x10, instruction->oparg);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0xf, (uintptr_t)data + 0xc);
    patch_32r(code + 0x1a, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x34, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x45, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x56, (uintptr_t)data + 0x14);
}

void
emit__SET_IP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_SET_IP.o:     file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  R_X86_64_REX_GOTPCRELX       _JIT_OPERAND-0x4
    // 7: 49 89 45 38                   movq    %rax, 0x38(%r13)
    // b: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x11 <_JIT_ENTRY+0x11>
    // 000000000000000d:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // b: 
    const unsigned char code_body[11] = {
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x49,
        0x89, 0x45, 0x38,
    };
    // 0: 
    // 0: OPERAND
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
}

void
emit__SET_UPDATE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_SET_UPDATE.o: file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 8b 05 00 00 00 00             movl    (%rip), %eax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  R_X86_64_GOTPCRELX   _JIT_OPARG-0x4
    // 7: f7 d0                         notl    %eax
    // 9: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // d: c1 e0 03                      shll    $0x3, %eax
    // 10: 48 0d 00 00 f8 ff             orq     $-0x80000, %rax         # imm = 0xFFF80000
    // 16: 48 8b 7c 05 00                movq    (%rbp,%rax), %rdi
    // 1b: 48 89 de                      movq    %rbx, %rsi
    // 1e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x24 <_JIT_ENTRY+0x24>
    // 0000000000000020:  R_X86_64_GOTPCRELX   _PySet_Update-0x4
    // 24: 48 8b 0b                      movq    (%rbx), %rcx
    // 27: 85 c9                         testl   %ecx, %ecx
    // 29: 78 08                         js      0x33 <_JIT_ENTRY+0x33>
    // 2b: 48 ff c9                      decq    %rcx
    // 2e: 48 89 0b                      movq    %rcx, (%rbx)
    // 31: 74 0f                         je      0x42 <_JIT_ENTRY+0x42>
    // 33: 85 c0                         testl   %eax, %eax
    // 35: 78 1c                         js      0x53 <_JIT_ENTRY+0x53>
    // 37: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 3b: 58                            popq    %rax
    // 3c: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x42 <_JIT_ENTRY+0x42>
    // 000000000000003e:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 42: 48 89 df                      movq    %rbx, %rdi
    // 45: 89 c3                         movl    %eax, %ebx
    // 47: ff 15 00 00 00 00             callq   *(%rip)                 # 0x4d <_JIT_ENTRY+0x4d>
    // 0000000000000049:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 4d: 89 d8                         movl    %ebx, %eax
    // 4f: 85 c0                         testl   %eax, %eax
    // 51: 79 e4                         jns     0x37 <_JIT_ENTRY+0x37>
    // 53: 58                            popq    %rax
    // 54: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x5a <_JIT_ENTRY+0x5a>
    // 0000000000000056:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 5a: 
    const unsigned char code_body[90] = {
        0x50, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0xf7,
        0xd0, 0x48, 0x8b, 0x5d, 0xf8, 0xc1, 0xe0, 0x03,
        0x48, 0x0d, 0x00, 0x00, 0xf8, 0xff, 0x48, 0x8b,
        0x7c, 0x05, 0x00, 0x48, 0x89, 0xde, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x0b, 0x85,
        0xc9, 0x78, 0x08, 0x48, 0xff, 0xc9, 0x48, 0x89,
        0x0b, 0x74, 0x0f, 0x85, 0xc0, 0x78, 0x1c, 0x48,
        0x83, 0xc5, 0xf8, 0x58, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x89, 0xdf, 0x89, 0xc3, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x89, 0xd8, 0x85,
        0xc0, 0x79, 0xe4, 0x58, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: &_PySet_Update+0x0
    // 10: CONTINUE
    // 18: &_Py_Dealloc+0x0
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PySet_Update);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x20, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3e, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x49, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x56, (uintptr_t)data + 0x1c);
}

void
emit__START_EXECUTOR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_START_EXECUTOR.o:     file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 49 8b bc 24 10 01 00 00       movq    0x110(%r12), %rdi
    // 9: 48 8b 07                      movq    (%rdi), %rax
    // c: 85 c0                         testl   %eax, %eax
    // e: 78 08                         js      0x18 <_JIT_ENTRY+0x18>
    // 10: 48 ff c8                      decq    %rax
    // 13: 48 89 07                      movq    %rax, (%rdi)
    // 16: 74 20                         je      0x38 <_JIT_ENTRY+0x38>
    // 18: 49 c7 84 24 10 01 00 00 00 00 00 00   movq    $0x0, 0x110(%r12)
    // 24: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x2b <_JIT_ENTRY+0x2b>
    // 0000000000000027:  R_X86_64_REX_GOTPCRELX       _JIT_OPERAND-0x4
    // 2b: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
    // 2f: 74 26                         je      0x57 <_JIT_ENTRY+0x57>
    // 31: 58                            popq    %rax
    // 32: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x38 <_JIT_ENTRY+0x38>
    // 0000000000000034:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 38: ff 15 00 00 00 00             callq   *(%rip)                 # 0x3e <_JIT_ENTRY+0x3e>
    // 000000000000003a:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 3e: 49 c7 84 24 10 01 00 00 00 00 00 00   movq    $0x0, 0x110(%r12)
    // 4a: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x51 <_JIT_ENTRY+0x51>
    // 000000000000004d:  R_X86_64_REX_GOTPCRELX       _JIT_OPERAND-0x4
    // 51: 80 78 22 00                   cmpb    $0x0, 0x22(%rax)
    // 55: 75 da                         jne     0x31 <_JIT_ENTRY+0x31>
    // 57: 58                            popq    %rax
    // 58: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x5e <_JIT_ENTRY+0x5e>
    // 000000000000005a:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 5e: 
    const unsigned char code_body[94] = {
        0x50, 0x49, 0x8b, 0xbc, 0x24, 0x10, 0x01, 0x00,
        0x00, 0x48, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x08,
        0x48, 0xff, 0xc8, 0x48, 0x89, 0x07, 0x74, 0x20,
        0x49, 0xc7, 0x84, 0x24, 0x10, 0x01, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x80, 0x78, 0x22, 0x00, 0x74,
        0x26, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0xc7,
        0x84, 0x24, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x80, 0x78, 0x22, 0x00, 0x75, 0xda, 0x58,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPERAND
    // 8: CONTINUE
    // 10: &_Py_Dealloc+0x0
    // 18: JUMP_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x27, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x34, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3a, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x4d, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x5a, (uintptr_t)data + 0x14);
}

void
emit__STORE_ATTR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_STORE_ATTR.o: file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 4c 8b 7d f0                   movq    -0x10(%rbp), %r15
    // 5: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 9: 49 8b 45 00                   movq    (%r13), %rax
    // d: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 11: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 18: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
    // 1d: 48 89 df                      movq    %rbx, %rdi
    // 20: 4c 89 fa                      movq    %r15, %rdx
    // 23: ff 15 00 00 00 00             callq   *(%rip)                 # 0x29 <_JIT_ENTRY+0x29>
    // 0000000000000025:  R_X86_64_GOTPCRELX   PyObject_SetAttr-0x4
    // 29: 41 89 c6                      movl    %eax, %r14d
    // 2c: 49 8b 07                      movq    (%r15), %rax
    // 2f: 85 c0                         testl   %eax, %eax
    // 31: 78 08                         js      0x3b <_JIT_ENTRY+0x3b>
    // 33: 48 ff c8                      decq    %rax
    // 36: 49 89 07                      movq    %rax, (%r15)
    // 39: 74 1a                         je      0x55 <_JIT_ENTRY+0x55>
    // 3b: 48 8b 03                      movq    (%rbx), %rax
    // 3e: 85 c0                         testl   %eax, %eax
    // 40: 78 23                         js      0x65 <_JIT_ENTRY+0x65>
    // 42: 48 ff c8                      decq    %rax
    // 45: 48 89 03                      movq    %rax, (%rbx)
    // 48: 75 1b                         jne     0x65 <_JIT_ENTRY+0x65>
    // 4a: 48 89 df                      movq    %rbx, %rdi
    // 4d: ff 15 00 00 00 00             callq   *(%rip)                 # 0x53 <_JIT_ENTRY+0x53>
    // 000000000000004f:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 53: eb 10                         jmp     0x65 <_JIT_ENTRY+0x65>
    // 55: 4c 89 ff                      movq    %r15, %rdi
    // 58: ff 15 00 00 00 00             callq   *(%rip)                 # 0x5e <_JIT_ENTRY+0x5e>
    // 000000000000005a:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 5e: 48 8b 03                      movq    (%rbx), %rax
    // 61: 85 c0                         testl   %eax, %eax
    // 63: 79 dd                         jns     0x42 <_JIT_ENTRY+0x42>
    // 65: 45 85 f6                      testl   %r14d, %r14d
    // 68: 74 07                         je      0x71 <_JIT_ENTRY+0x71>
    // 6a: 58                            popq    %rax
    // 6b: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x71 <_JIT_ENTRY+0x71>
    // 000000000000006d:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 71: 48 83 c5 f0                   addq    $-0x10, %rbp
    // 75: 58                            popq    %rax
    // 76: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x7c <_JIT_ENTRY+0x7c>
    // 0000000000000078:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 76: 
    const unsigned char code_body[118] = {
        0x50, 0x4c, 0x8b, 0x7d, 0xf0, 0x48, 0x8b, 0x5d,
        0xf8, 0x49, 0x8b, 0x45, 0x00, 0x48, 0x8b, 0x40,
        0x20, 0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0x89, 0xdf,
        0x4c, 0x89, 0xfa, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x41, 0x89, 0xc6, 0x49, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8, 0x49, 0x89,
        0x07, 0x74, 0x1a, 0x48, 0x8b, 0x03, 0x85, 0xc0,
        0x78, 0x23, 0x48, 0xff, 0xc8, 0x48, 0x89, 0x03,
        0x75, 0x1b, 0x48, 0x89, 0xdf, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0xeb, 0x10, 0x4c, 0x89, 0xff,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x03, 0x85, 0xc0, 0x79, 0xdd, 0x45, 0x85, 0xf6,
        0x74, 0x07, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x83, 0xc5, 0xf0, 0x58,
    };
    // 0: 
    // 0: OPARG
    // 8: &PyObject_SetAttr+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyObject_SetAttr);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x14, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x25, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x4f, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x5a, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x6d, (uintptr_t)data + 0x14);
}

void
emit__STORE_ATTR_INSTANCE_VALUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_STORE_ATTR_INSTANCE_VALUE.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 45 f0                   movq    -0x10(%rbp), %rax
    // 5: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 9: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x10 <_JIT_ENTRY+0x10>
    // 000000000000000c:  R_X86_64_GOTPCREL    _JIT_OPERAND-0x4
    // 10: 48 8b 7c cb 18                movq    0x18(%rbx,%rcx,8), %rdi
    // 15: 48 89 44 cb 18                movq    %rax, 0x18(%rbx,%rcx,8)
    // 1a: 48 85 ff                      testq   %rdi, %rdi
    // 1d: 74 17                         je      0x36 <_JIT_ENTRY+0x36>
    // 1f: 48 8b 07                      movq    (%rdi), %rax
    // 22: 85 c0                         testl   %eax, %eax
    // 24: 78 31                         js      0x57 <_JIT_ENTRY+0x57>
    // 26: 48 ff c8                      decq    %rax
    // 29: 48 89 07                      movq    %rax, (%rdi)
    // 2c: 75 29                         jne     0x57 <_JIT_ENTRY+0x57>
    // 2e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x34 <_JIT_ENTRY+0x34>
    // 0000000000000030:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 34: eb 21                         jmp     0x57 <_JIT_ENTRY+0x57>
    // 36: 48 8d 43 10                   leaq    0x10(%rbx), %rax
    // 3a: 0f b6 4b 11                   movzbl  0x11(%rbx), %ecx
    // 3e: 0f b6 53 10                   movzbl  0x10(%rbx), %edx
    // 42: 48 8d 04 d0                   leaq    (%rax,%rdx,8), %rax
    // 46: 0f b6 15 00 00 00 00          movzbl  (%rip), %edx            # 0x4d <_JIT_ENTRY+0x4d>
    // 0000000000000049:  R_X86_64_GOTPCREL    _JIT_OPERAND-0x4
    // 4d: 88 54 01 08                   movb    %dl, 0x8(%rcx,%rax)
    // 51: 8d 41 01                      leal    0x1(%rcx), %eax
    // 54: 88 43 11                      movb    %al, 0x11(%rbx)
    // 57: 48 83 c5 f0                   addq    $-0x10, %rbp
    // 5b: 48 8b 03                      movq    (%rbx), %rax
    // 5e: 85 c0                         testl   %eax, %eax
    // 60: 78 08                         js      0x6a <_JIT_ENTRY+0x6a>
    // 62: 48 ff c8                      decq    %rax
    // 65: 48 89 03                      movq    %rax, (%rbx)
    // 68: 74 07                         je      0x71 <_JIT_ENTRY+0x71>
    // 6a: 58                            popq    %rax
    // 6b: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x71 <_JIT_ENTRY+0x71>
    // 000000000000006d:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 71: 48 89 df                      movq    %rbx, %rdi
    // 74: ff 15 00 00 00 00             callq   *(%rip)                 # 0x7a <_JIT_ENTRY+0x7a>
    // 0000000000000076:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 7a: 58                            popq    %rax
    // 7b: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x81 <_JIT_ENTRY+0x81>
    // 000000000000007d:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 7b: 
    const unsigned char code_body[123] = {
        0x50, 0x48, 0x8b, 0x45, 0xf0, 0x48, 0x8b, 0x5d,
        0xf8, 0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x7c, 0xcb, 0x18, 0x48, 0x89, 0x44,
        0xcb, 0x18, 0x48, 0x85, 0xff, 0x74, 0x17, 0x48,
        0x8b, 0x07, 0x85, 0xc0, 0x78, 0x31, 0x48, 0xff,
        0xc8, 0x48, 0x89, 0x07, 0x75, 0x29, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0xeb, 0x21, 0x48, 0x8d,
        0x43, 0x10, 0x0f, 0xb6, 0x4b, 0x11, 0x0f, 0xb6,
        0x53, 0x10, 0x48, 0x8d, 0x04, 0xd0, 0x0f, 0xb6,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x88, 0x54, 0x01,
        0x08, 0x8d, 0x41, 0x01, 0x88, 0x43, 0x11, 0x48,
        0x83, 0xc5, 0xf0, 0x48, 0x8b, 0x03, 0x85, 0xc0,
        0x78, 0x08, 0x48, 0xff, 0xc8, 0x48, 0x89, 0x03,
        0x74, 0x07, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xdf, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x58,
    };
    // 0: 
    // 0: OPERAND
    // 8: &_Py_Dealloc+0x0
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0xc, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x30, (uintptr_t)data + 0x4);
    patch_32r(code + 0x49, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x6d, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x76, (uintptr_t)data + 0x4);
}

void
emit__STORE_ATTR_SLOT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_STORE_ATTR_SLOT.o:    file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 45 f0                   movq    -0x10(%rbp), %rax
    // 5: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 9: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x10 <_JIT_ENTRY+0x10>
    // 000000000000000c:  R_X86_64_GOTPCREL    _JIT_OPERAND-0x4
    // 10: 48 8b 3c 0b                   movq    (%rbx,%rcx), %rdi
    // 14: 48 89 04 0b                   movq    %rax, (%rbx,%rcx)
    // 18: 48 85 ff                      testq   %rdi, %rdi
    // 1b: 74 15                         je      0x32 <_JIT_ENTRY+0x32>
    // 1d: 48 8b 07                      movq    (%rdi), %rax
    // 20: 85 c0                         testl   %eax, %eax
    // 22: 78 0e                         js      0x32 <_JIT_ENTRY+0x32>
    // 24: 48 ff c8                      decq    %rax
    // 27: 48 89 07                      movq    %rax, (%rdi)
    // 2a: 75 06                         jne     0x32 <_JIT_ENTRY+0x32>
    // 2c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x32 <_JIT_ENTRY+0x32>
    // 000000000000002e:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 32: 48 83 c5 f0                   addq    $-0x10, %rbp
    // 36: 48 8b 03                      movq    (%rbx), %rax
    // 39: 85 c0                         testl   %eax, %eax
    // 3b: 78 08                         js      0x45 <_JIT_ENTRY+0x45>
    // 3d: 48 ff c8                      decq    %rax
    // 40: 48 89 03                      movq    %rax, (%rbx)
    // 43: 74 07                         je      0x4c <_JIT_ENTRY+0x4c>
    // 45: 58                            popq    %rax
    // 46: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x4c <_JIT_ENTRY+0x4c>
    // 0000000000000048:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 4c: 48 89 df                      movq    %rbx, %rdi
    // 4f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x55 <_JIT_ENTRY+0x55>
    // 0000000000000051:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 55: 58                            popq    %rax
    // 56: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x5c <_JIT_ENTRY+0x5c>
    // 0000000000000058:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 56: 
    const unsigned char code_body[86] = {
        0x50, 0x48, 0x8b, 0x45, 0xf0, 0x48, 0x8b, 0x5d,
        0xf8, 0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x3c, 0x0b, 0x48, 0x89, 0x04, 0x0b,
        0x48, 0x85, 0xff, 0x74, 0x15, 0x48, 0x8b, 0x07,
        0x85, 0xc0, 0x78, 0x0e, 0x48, 0xff, 0xc8, 0x48,
        0x89, 0x07, 0x75, 0x06, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x83, 0xc5, 0xf0, 0x48, 0x8b,
        0x03, 0x85, 0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8,
        0x48, 0x89, 0x03, 0x74, 0x07, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x58,
    };
    // 0: 
    // 0: OPERAND
    // 8: &_Py_Dealloc+0x0
    // 10: CONTINUE
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->operand);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0xc, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x48, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x51, (uintptr_t)data + 0x4);
}

void
emit__STORE_DEREF(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_STORE_DEREF.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 5: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 9: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x10 <_JIT_ENTRY+0x10>
    // 000000000000000c:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 10: 49 8b 4c cd 48                movq    0x48(%r13,%rcx,8), %rcx
    // 15: 48 8b 79 10                   movq    0x10(%rcx), %rdi
    // 19: 48 89 41 10                   movq    %rax, 0x10(%rcx)
    // 1d: 48 85 ff                      testq   %rdi, %rdi
    // 20: 74 0f                         je      0x31 <_JIT_ENTRY+0x31>
    // 22: 48 8b 07                      movq    (%rdi), %rax
    // 25: 85 c0                         testl   %eax, %eax
    // 27: 78 08                         js      0x31 <_JIT_ENTRY+0x31>
    // 29: 48 ff c8                      decq    %rax
    // 2c: 48 89 07                      movq    %rax, (%rdi)
    // 2f: 74 07                         je      0x38 <_JIT_ENTRY+0x38>
    // 31: 58                            popq    %rax
    // 32: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x38 <_JIT_ENTRY+0x38>
    // 0000000000000034:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 38: ff 15 00 00 00 00             callq   *(%rip)                 # 0x3e <_JIT_ENTRY+0x3e>
    // 000000000000003a:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 3e: 58                            popq    %rax
    // 3f: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x45 <_JIT_ENTRY+0x45>
    // 0000000000000041:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 3f: 
    const unsigned char code_body[63] = {
        0x50, 0x48, 0x8b, 0x45, 0xf8, 0x48, 0x83, 0xc5,
        0xf8, 0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x8b, 0x4c, 0xcd, 0x48, 0x48, 0x8b, 0x79,
        0x10, 0x48, 0x89, 0x41, 0x10, 0x48, 0x85, 0xff,
        0x74, 0x0f, 0x48, 0x8b, 0x07, 0x85, 0xc0, 0x78,
        0x08, 0x48, 0xff, 0xc8, 0x48, 0x89, 0x07, 0x74,
        0x07, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x58,
    };
    // 0: 
    // 0: OPARG
    // 8: CONTINUE
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0xc, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x34, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3a, (uintptr_t)data + 0xc);
}

void
emit__STORE_FAST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_STORE_FAST.o: file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 5: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 9: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x10 <_JIT_ENTRY+0x10>
    // 000000000000000c:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 10: 49 8b 7c cd 48                movq    0x48(%r13,%rcx,8), %rdi
    // 15: 49 89 44 cd 48                movq    %rax, 0x48(%r13,%rcx,8)
    // 1a: 48 85 ff                      testq   %rdi, %rdi
    // 1d: 74 0f                         je      0x2e <_JIT_ENTRY+0x2e>
    // 1f: 48 8b 07                      movq    (%rdi), %rax
    // 22: 85 c0                         testl   %eax, %eax
    // 24: 78 08                         js      0x2e <_JIT_ENTRY+0x2e>
    // 26: 48 ff c8                      decq    %rax
    // 29: 48 89 07                      movq    %rax, (%rdi)
    // 2c: 74 07                         je      0x35 <_JIT_ENTRY+0x35>
    // 2e: 58                            popq    %rax
    // 2f: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x35 <_JIT_ENTRY+0x35>
    // 0000000000000031:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 35: ff 15 00 00 00 00             callq   *(%rip)                 # 0x3b <_JIT_ENTRY+0x3b>
    // 0000000000000037:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 3b: 58                            popq    %rax
    // 3c: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x42 <_JIT_ENTRY+0x42>
    // 000000000000003e:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 3c: 
    const unsigned char code_body[60] = {
        0x50, 0x48, 0x8b, 0x45, 0xf8, 0x48, 0x83, 0xc5,
        0xf8, 0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x8b, 0x7c, 0xcd, 0x48, 0x49, 0x89, 0x44,
        0xcd, 0x48, 0x48, 0x85, 0xff, 0x74, 0x0f, 0x48,
        0x8b, 0x07, 0x85, 0xc0, 0x78, 0x08, 0x48, 0xff,
        0xc8, 0x48, 0x89, 0x07, 0x74, 0x07, 0x58, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x58,
    };
    // 0: 
    // 0: OPARG
    // 8: CONTINUE
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0xc, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x31, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x37, (uintptr_t)data + 0xc);
}

void
emit__STORE_FAST_0(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_STORE_FAST_0.o:       file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 5: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 9: 49 8b 7d 48                   movq    0x48(%r13), %rdi
    // d: 49 89 45 48                   movq    %rax, 0x48(%r13)
    // 11: 48 85 ff                      testq   %rdi, %rdi
    // 14: 74 0f                         je      0x25 <_JIT_ENTRY+0x25>
    // 16: 48 8b 07                      movq    (%rdi), %rax
    // 19: 85 c0                         testl   %eax, %eax
    // 1b: 78 08                         js      0x25 <_JIT_ENTRY+0x25>
    // 1d: 48 ff c8                      decq    %rax
    // 20: 48 89 07                      movq    %rax, (%rdi)
    // 23: 74 07                         je      0x2c <_JIT_ENTRY+0x2c>
    // 25: 58                            popq    %rax
    // 26: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x2c <_JIT_ENTRY+0x2c>
    // 0000000000000028:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 2c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x32 <_JIT_ENTRY+0x32>
    // 000000000000002e:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 32: 58                            popq    %rax
    // 33: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x39 <_JIT_ENTRY+0x39>
    // 0000000000000035:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 33: 
    const unsigned char code_body[51] = {
        0x50, 0x48, 0x8b, 0x45, 0xf8, 0x48, 0x83, 0xc5,
        0xf8, 0x49, 0x8b, 0x7d, 0x48, 0x49, 0x89, 0x45,
        0x48, 0x48, 0x85, 0xff, 0x74, 0x0f, 0x48, 0x8b,
        0x07, 0x85, 0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8,
        0x48, 0x89, 0x07, 0x74, 0x07, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x58,
    };
    // 0: 
    // 0: CONTINUE
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x28, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)data + 0x4);
}

void
emit__STORE_FAST_1(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_STORE_FAST_1.o:       file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 5: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 9: 49 8b 7d 50                   movq    0x50(%r13), %rdi
    // d: 49 89 45 50                   movq    %rax, 0x50(%r13)
    // 11: 48 85 ff                      testq   %rdi, %rdi
    // 14: 74 0f                         je      0x25 <_JIT_ENTRY+0x25>
    // 16: 48 8b 07                      movq    (%rdi), %rax
    // 19: 85 c0                         testl   %eax, %eax
    // 1b: 78 08                         js      0x25 <_JIT_ENTRY+0x25>
    // 1d: 48 ff c8                      decq    %rax
    // 20: 48 89 07                      movq    %rax, (%rdi)
    // 23: 74 07                         je      0x2c <_JIT_ENTRY+0x2c>
    // 25: 58                            popq    %rax
    // 26: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x2c <_JIT_ENTRY+0x2c>
    // 0000000000000028:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 2c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x32 <_JIT_ENTRY+0x32>
    // 000000000000002e:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 32: 58                            popq    %rax
    // 33: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x39 <_JIT_ENTRY+0x39>
    // 0000000000000035:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 33: 
    const unsigned char code_body[51] = {
        0x50, 0x48, 0x8b, 0x45, 0xf8, 0x48, 0x83, 0xc5,
        0xf8, 0x49, 0x8b, 0x7d, 0x50, 0x49, 0x89, 0x45,
        0x50, 0x48, 0x85, 0xff, 0x74, 0x0f, 0x48, 0x8b,
        0x07, 0x85, 0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8,
        0x48, 0x89, 0x07, 0x74, 0x07, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x58,
    };
    // 0: 
    // 0: CONTINUE
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x28, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)data + 0x4);
}

void
emit__STORE_FAST_2(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_STORE_FAST_2.o:       file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 5: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 9: 49 8b 7d 58                   movq    0x58(%r13), %rdi
    // d: 49 89 45 58                   movq    %rax, 0x58(%r13)
    // 11: 48 85 ff                      testq   %rdi, %rdi
    // 14: 74 0f                         je      0x25 <_JIT_ENTRY+0x25>
    // 16: 48 8b 07                      movq    (%rdi), %rax
    // 19: 85 c0                         testl   %eax, %eax
    // 1b: 78 08                         js      0x25 <_JIT_ENTRY+0x25>
    // 1d: 48 ff c8                      decq    %rax
    // 20: 48 89 07                      movq    %rax, (%rdi)
    // 23: 74 07                         je      0x2c <_JIT_ENTRY+0x2c>
    // 25: 58                            popq    %rax
    // 26: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x2c <_JIT_ENTRY+0x2c>
    // 0000000000000028:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 2c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x32 <_JIT_ENTRY+0x32>
    // 000000000000002e:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 32: 58                            popq    %rax
    // 33: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x39 <_JIT_ENTRY+0x39>
    // 0000000000000035:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 33: 
    const unsigned char code_body[51] = {
        0x50, 0x48, 0x8b, 0x45, 0xf8, 0x48, 0x83, 0xc5,
        0xf8, 0x49, 0x8b, 0x7d, 0x58, 0x49, 0x89, 0x45,
        0x58, 0x48, 0x85, 0xff, 0x74, 0x0f, 0x48, 0x8b,
        0x07, 0x85, 0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8,
        0x48, 0x89, 0x07, 0x74, 0x07, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x58,
    };
    // 0: 
    // 0: CONTINUE
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x28, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)data + 0x4);
}

void
emit__STORE_FAST_3(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_STORE_FAST_3.o:       file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 5: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 9: 49 8b 7d 60                   movq    0x60(%r13), %rdi
    // d: 49 89 45 60                   movq    %rax, 0x60(%r13)
    // 11: 48 85 ff                      testq   %rdi, %rdi
    // 14: 74 0f                         je      0x25 <_JIT_ENTRY+0x25>
    // 16: 48 8b 07                      movq    (%rdi), %rax
    // 19: 85 c0                         testl   %eax, %eax
    // 1b: 78 08                         js      0x25 <_JIT_ENTRY+0x25>
    // 1d: 48 ff c8                      decq    %rax
    // 20: 48 89 07                      movq    %rax, (%rdi)
    // 23: 74 07                         je      0x2c <_JIT_ENTRY+0x2c>
    // 25: 58                            popq    %rax
    // 26: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x2c <_JIT_ENTRY+0x2c>
    // 0000000000000028:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 2c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x32 <_JIT_ENTRY+0x32>
    // 000000000000002e:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 32: 58                            popq    %rax
    // 33: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x39 <_JIT_ENTRY+0x39>
    // 0000000000000035:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 33: 
    const unsigned char code_body[51] = {
        0x50, 0x48, 0x8b, 0x45, 0xf8, 0x48, 0x83, 0xc5,
        0xf8, 0x49, 0x8b, 0x7d, 0x60, 0x49, 0x89, 0x45,
        0x60, 0x48, 0x85, 0xff, 0x74, 0x0f, 0x48, 0x8b,
        0x07, 0x85, 0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8,
        0x48, 0x89, 0x07, 0x74, 0x07, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x58,
    };
    // 0: 
    // 0: CONTINUE
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x28, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)data + 0x4);
}

void
emit__STORE_FAST_4(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_STORE_FAST_4.o:       file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 5: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 9: 49 8b 7d 68                   movq    0x68(%r13), %rdi
    // d: 49 89 45 68                   movq    %rax, 0x68(%r13)
    // 11: 48 85 ff                      testq   %rdi, %rdi
    // 14: 74 0f                         je      0x25 <_JIT_ENTRY+0x25>
    // 16: 48 8b 07                      movq    (%rdi), %rax
    // 19: 85 c0                         testl   %eax, %eax
    // 1b: 78 08                         js      0x25 <_JIT_ENTRY+0x25>
    // 1d: 48 ff c8                      decq    %rax
    // 20: 48 89 07                      movq    %rax, (%rdi)
    // 23: 74 07                         je      0x2c <_JIT_ENTRY+0x2c>
    // 25: 58                            popq    %rax
    // 26: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x2c <_JIT_ENTRY+0x2c>
    // 0000000000000028:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 2c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x32 <_JIT_ENTRY+0x32>
    // 000000000000002e:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 32: 58                            popq    %rax
    // 33: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x39 <_JIT_ENTRY+0x39>
    // 0000000000000035:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 33: 
    const unsigned char code_body[51] = {
        0x50, 0x48, 0x8b, 0x45, 0xf8, 0x48, 0x83, 0xc5,
        0xf8, 0x49, 0x8b, 0x7d, 0x68, 0x49, 0x89, 0x45,
        0x68, 0x48, 0x85, 0xff, 0x74, 0x0f, 0x48, 0x8b,
        0x07, 0x85, 0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8,
        0x48, 0x89, 0x07, 0x74, 0x07, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x58,
    };
    // 0: 
    // 0: CONTINUE
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x28, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)data + 0x4);
}

void
emit__STORE_FAST_5(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_STORE_FAST_5.o:       file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 5: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 9: 49 8b 7d 70                   movq    0x70(%r13), %rdi
    // d: 49 89 45 70                   movq    %rax, 0x70(%r13)
    // 11: 48 85 ff                      testq   %rdi, %rdi
    // 14: 74 0f                         je      0x25 <_JIT_ENTRY+0x25>
    // 16: 48 8b 07                      movq    (%rdi), %rax
    // 19: 85 c0                         testl   %eax, %eax
    // 1b: 78 08                         js      0x25 <_JIT_ENTRY+0x25>
    // 1d: 48 ff c8                      decq    %rax
    // 20: 48 89 07                      movq    %rax, (%rdi)
    // 23: 74 07                         je      0x2c <_JIT_ENTRY+0x2c>
    // 25: 58                            popq    %rax
    // 26: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x2c <_JIT_ENTRY+0x2c>
    // 0000000000000028:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 2c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x32 <_JIT_ENTRY+0x32>
    // 000000000000002e:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 32: 58                            popq    %rax
    // 33: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x39 <_JIT_ENTRY+0x39>
    // 0000000000000035:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 33: 
    const unsigned char code_body[51] = {
        0x50, 0x48, 0x8b, 0x45, 0xf8, 0x48, 0x83, 0xc5,
        0xf8, 0x49, 0x8b, 0x7d, 0x70, 0x49, 0x89, 0x45,
        0x70, 0x48, 0x85, 0xff, 0x74, 0x0f, 0x48, 0x8b,
        0x07, 0x85, 0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8,
        0x48, 0x89, 0x07, 0x74, 0x07, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x58,
    };
    // 0: 
    // 0: CONTINUE
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x28, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)data + 0x4);
}

void
emit__STORE_FAST_6(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_STORE_FAST_6.o:       file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 5: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 9: 49 8b 7d 78                   movq    0x78(%r13), %rdi
    // d: 49 89 45 78                   movq    %rax, 0x78(%r13)
    // 11: 48 85 ff                      testq   %rdi, %rdi
    // 14: 74 0f                         je      0x25 <_JIT_ENTRY+0x25>
    // 16: 48 8b 07                      movq    (%rdi), %rax
    // 19: 85 c0                         testl   %eax, %eax
    // 1b: 78 08                         js      0x25 <_JIT_ENTRY+0x25>
    // 1d: 48 ff c8                      decq    %rax
    // 20: 48 89 07                      movq    %rax, (%rdi)
    // 23: 74 07                         je      0x2c <_JIT_ENTRY+0x2c>
    // 25: 58                            popq    %rax
    // 26: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x2c <_JIT_ENTRY+0x2c>
    // 0000000000000028:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 2c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x32 <_JIT_ENTRY+0x32>
    // 000000000000002e:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 32: 58                            popq    %rax
    // 33: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x39 <_JIT_ENTRY+0x39>
    // 0000000000000035:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 33: 
    const unsigned char code_body[51] = {
        0x50, 0x48, 0x8b, 0x45, 0xf8, 0x48, 0x83, 0xc5,
        0xf8, 0x49, 0x8b, 0x7d, 0x78, 0x49, 0x89, 0x45,
        0x78, 0x48, 0x85, 0xff, 0x74, 0x0f, 0x48, 0x8b,
        0x07, 0x85, 0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8,
        0x48, 0x89, 0x07, 0x74, 0x07, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x58,
    };
    // 0: 
    // 0: CONTINUE
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x28, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)data + 0x4);
}

void
emit__STORE_FAST_7(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_STORE_FAST_7.o:       file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 5: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 9: 49 8b bd 80 00 00 00          movq    0x80(%r13), %rdi
    // 10: 49 89 85 80 00 00 00          movq    %rax, 0x80(%r13)
    // 17: 48 85 ff                      testq   %rdi, %rdi
    // 1a: 74 0f                         je      0x2b <_JIT_ENTRY+0x2b>
    // 1c: 48 8b 07                      movq    (%rdi), %rax
    // 1f: 85 c0                         testl   %eax, %eax
    // 21: 78 08                         js      0x2b <_JIT_ENTRY+0x2b>
    // 23: 48 ff c8                      decq    %rax
    // 26: 48 89 07                      movq    %rax, (%rdi)
    // 29: 74 07                         je      0x32 <_JIT_ENTRY+0x32>
    // 2b: 58                            popq    %rax
    // 2c: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x32 <_JIT_ENTRY+0x32>
    // 000000000000002e:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 32: ff 15 00 00 00 00             callq   *(%rip)                 # 0x38 <_JIT_ENTRY+0x38>
    // 0000000000000034:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 38: 58                            popq    %rax
    // 39: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x3f <_JIT_ENTRY+0x3f>
    // 000000000000003b:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 39: 
    const unsigned char code_body[57] = {
        0x50, 0x48, 0x8b, 0x45, 0xf8, 0x48, 0x83, 0xc5,
        0xf8, 0x49, 0x8b, 0xbd, 0x80, 0x00, 0x00, 0x00,
        0x49, 0x89, 0x85, 0x80, 0x00, 0x00, 0x00, 0x48,
        0x85, 0xff, 0x74, 0x0f, 0x48, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8, 0x48, 0x89,
        0x07, 0x74, 0x07, 0x58, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x58,
    };
    // 0: 
    // 0: CONTINUE
    // 8: &_Py_Dealloc+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x2e, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x34, (uintptr_t)data + 0x4);
}

void
emit__STORE_GLOBAL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_STORE_GLOBAL.o:       file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 5: 49 8b 45 00                   movq    (%r13), %rax
    // 9: 49 8b 7d 18                   movq    0x18(%r13), %rdi
    // d: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 11: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 18: 48 8b 74 c8 18                movq    0x18(%rax,%rcx,8), %rsi
    // 1d: 48 89 da                      movq    %rbx, %rdx
    // 20: ff 15 00 00 00 00             callq   *(%rip)                 # 0x26 <_JIT_ENTRY+0x26>
    // 0000000000000022:  R_X86_64_GOTPCRELX   PyDict_SetItem-0x4
    // 26: 48 8b 0b                      movq    (%rbx), %rcx
    // 29: 85 c9                         testl   %ecx, %ecx
    // 2b: 78 08                         js      0x35 <_JIT_ENTRY+0x35>
    // 2d: 48 ff c9                      decq    %rcx
    // 30: 48 89 0b                      movq    %rcx, (%rbx)
    // 33: 74 0b                         je      0x40 <_JIT_ENTRY+0x40>
    // 35: 85 c0                         testl   %eax, %eax
    // 37: 74 18                         je      0x51 <_JIT_ENTRY+0x51>
    // 39: 58                            popq    %rax
    // 3a: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x40 <_JIT_ENTRY+0x40>
    // 000000000000003c:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 40: 48 89 df                      movq    %rbx, %rdi
    // 43: 89 c3                         movl    %eax, %ebx
    // 45: ff 15 00 00 00 00             callq   *(%rip)                 # 0x4b <_JIT_ENTRY+0x4b>
    // 0000000000000047:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 4b: 89 d8                         movl    %ebx, %eax
    // 4d: 85 c0                         testl   %eax, %eax
    // 4f: 75 e8                         jne     0x39 <_JIT_ENTRY+0x39>
    // 51: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 55: 58                            popq    %rax
    // 56: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x5c <_JIT_ENTRY+0x5c>
    // 0000000000000058:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 56: 
    const unsigned char code_body[86] = {
        0x50, 0x48, 0x8b, 0x5d, 0xf8, 0x49, 0x8b, 0x45,
        0x00, 0x49, 0x8b, 0x7d, 0x18, 0x48, 0x8b, 0x40,
        0x20, 0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x74, 0xc8, 0x18, 0x48, 0x89, 0xda,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x0b, 0x85, 0xc9, 0x78, 0x08, 0x48, 0xff, 0xc9,
        0x48, 0x89, 0x0b, 0x74, 0x0b, 0x85, 0xc0, 0x74,
        0x18, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0xdf, 0x89, 0xc3, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x89, 0xd8, 0x85, 0xc0, 0x75,
        0xe8, 0x48, 0x83, 0xc5, 0xf8, 0x58,
    };
    // 0: 
    // 0: OPARG
    // 8: &PyDict_SetItem+0x0
    // 10: ERROR_TARGET
    // 18: &_Py_Dealloc+0x0
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&PyDict_SetItem);
    patch_64(data + 0x10, instruction_starts[instruction->error_target]);
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x14, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x22, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3c, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x47, (uintptr_t)data + 0x14);
}

void
emit__STORE_NAME(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_STORE_NAME.o: file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 5: 49 8b 45 00                   movq    (%r13), %rax
    // 9: 49 8b 7d 28                   movq    0x28(%r13), %rdi
    // d: 48 8b 40 20                   movq    0x20(%rax), %rax
    // 11: 0f b7 0d 00 00 00 00          movzwl  (%rip), %ecx            # 0x18 <_JIT_ENTRY+0x18>
    // 0000000000000014:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 18: 48 8b 4c c8 18                movq    0x18(%rax,%rcx,8), %rcx
    // 1d: 48 85 ff                      testq   %rdi, %rdi
    // 20: 74 22                         je      0x44 <_JIT_ENTRY+0x44>
    // 22: 48 8b 47 08                   movq    0x8(%rdi), %rax
    // 26: 48 89 ce                      movq    %rcx, %rsi
    // 29: 48 89 da                      movq    %rbx, %rdx
    // 2c: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x33 <_JIT_ENTRY+0x33>
    // 000000000000002f:  R_X86_64_REX_GOTPCRELX       PyDict_Type-0x4
    // 33: 74 41                         je      0x76 <_JIT_ENTRY+0x76>
    // 35: ff 15 00 00 00 00             callq   *(%rip)                 # 0x3b <_JIT_ENTRY+0x3b>
    // 0000000000000037:  R_X86_64_GOTPCRELX   PyObject_SetItem-0x4
    // 3b: 48 8b 0b                      movq    (%rbx), %rcx
    // 3e: 85 c9                         testl   %ecx, %ecx
    // 40: 79 41                         jns     0x83 <_JIT_ENTRY+0x83>
    // 42: eb 47                         jmp     0x8b <_JIT_ENTRY+0x8b>
    // 44: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x4b <_JIT_ENTRY+0x4b>
    // 0000000000000047:  R_X86_64_REX_GOTPCRELX       PyExc_SystemError-0x4
    // 4b: 48 8b 30                      movq    (%rax), %rsi
    // 4e: 48 8d 15 00 00 00 00          leaq    (%rip), %rdx            # 0x55 <_JIT_ENTRY+0x55>
    // 0000000000000051:  R_X86_64_PC32        .L.str.7-0x4
    // 55: 4c 89 e7                      movq    %r12, %rdi
    // 58: 31 c0                         xorl    %eax, %eax
    // 5a: ff 15 00 00 00 00             callq   *(%rip)                 # 0x60 <_JIT_ENTRY+0x60>
    // 000000000000005c:  R_X86_64_GOTPCRELX   _PyErr_Format-0x4
    // 60: 48 8b 03                      movq    (%rbx), %rax
    // 63: 85 c0                         testl   %eax, %eax
    // 65: 78 08                         js      0x6f <_JIT_ENTRY+0x6f>
    // 67: 48 ff c8                      decq    %rax
    // 6a: 48 89 03                      movq    %rax, (%rbx)
    // 6d: 74 43                         je      0xb2 <_JIT_ENTRY+0xb2>
    // 6f: 58                            popq    %rax
    // 70: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x76 <_JIT_ENTRY+0x76>
    // 0000000000000072:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 76: ff 15 00 00 00 00             callq   *(%rip)                 # 0x7c <_JIT_ENTRY+0x7c>
    // 0000000000000078:  R_X86_64_GOTPCRELX   PyDict_SetItem-0x4
    // 7c: 48 8b 0b                      movq    (%rbx), %rcx
    // 7f: 85 c9                         testl   %ecx, %ecx
    // 81: 78 08                         js      0x8b <_JIT_ENTRY+0x8b>
    // 83: 48 ff c9                      decq    %rcx
    // 86: 48 89 0b                      movq    %rcx, (%rbx)
    // 89: 74 0b                         je      0x96 <_JIT_ENTRY+0x96>
    // 8b: 85 c0                         testl   %eax, %eax
    // 8d: 74 18                         je      0xa7 <_JIT_ENTRY+0xa7>
    // 8f: 58                            popq    %rax
    // 90: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x96 <_JIT_ENTRY+0x96>
    // 0000000000000092:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 96: 48 89 df                      movq    %rbx, %rdi
    // 99: 89 c3                         movl    %eax, %ebx
    // 9b: ff 15 00 00 00 00             callq   *(%rip)                 # 0xa1 <_JIT_ENTRY+0xa1>
    // 000000000000009d:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // a1: 89 d8                         movl    %ebx, %eax
    // a3: 85 c0                         testl   %eax, %eax
    // a5: 75 e8                         jne     0x8f <_JIT_ENTRY+0x8f>
    // a7: 48 83 c5 f8                   addq    $-0x8, %rbp
    // ab: 58                            popq    %rax
    // ac: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xb2 <_JIT_ENTRY+0xb2>
    // 00000000000000ae:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // b2: 48 89 df                      movq    %rbx, %rdi
    // b5: ff 15 00 00 00 00             callq   *(%rip)                 # 0xbb <_JIT_ENTRY+0xbb>
    // 00000000000000b7:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // bb: 58                            popq    %rax
    // bc: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xc2 <_JIT_ENTRY+0xc2>
    // 00000000000000be:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // c2: 
    const unsigned char code_body[194] = {
        0x50, 0x48, 0x8b, 0x5d, 0xf8, 0x49, 0x8b, 0x45,
        0x00, 0x49, 0x8b, 0x7d, 0x28, 0x48, 0x8b, 0x40,
        0x20, 0x0f, 0xb7, 0x0d, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x4c, 0xc8, 0x18, 0x48, 0x85, 0xff,
        0x74, 0x22, 0x48, 0x8b, 0x47, 0x08, 0x48, 0x89,
        0xce, 0x48, 0x89, 0xda, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x41, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x0b, 0x85, 0xc9,
        0x79, 0x41, 0xeb, 0x47, 0x48, 0x8b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x30, 0x48, 0x8d,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x89, 0xe7,
        0x31, 0xc0, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x08, 0x48,
        0xff, 0xc8, 0x48, 0x89, 0x03, 0x74, 0x43, 0x58,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x0b, 0x85,
        0xc9, 0x78, 0x08, 0x48, 0xff, 0xc9, 0x48, 0x89,
        0x0b, 0x74, 0x0b, 0x85, 0xc0, 0x74, 0x18, 0x58,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89,
        0xdf, 0x89, 0xc3, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x89, 0xd8, 0x85, 0xc0, 0x75, 0xe8, 0x48,
        0x83, 0xc5, 0xf8, 0x58, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x58, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: 'no locals found when storing %R\x00'
    // 20: 
    // 20: OPARG
    // 28: &PyDict_Type+0x0
    // 30: &PyObject_SetItem+0x0
    // 38: &PyExc_SystemError+0x0
    // 40: &_PyErr_Format+0x0
    // 48: ERROR_TARGET
    // 50: &PyDict_SetItem+0x0
    // 58: &_Py_Dealloc+0x0
    // 60: CONTINUE
    const unsigned char data_body[104] = {
        0x6e, 0x6f, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
        0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20,
        0x77, 0x68, 0x65, 0x6e, 0x20, 0x73, 0x74, 0x6f,
        0x72, 0x69, 0x6e, 0x67, 0x20, 0x25, 0x52, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x20, instruction->oparg);
    patch_64(data + 0x28, (uintptr_t)&PyDict_Type);
    patch_64(data + 0x30, (uintptr_t)&PyObject_SetItem);
    patch_64(data + 0x38, (uintptr_t)&PyExc_SystemError);
    patch_64(data + 0x40, (uintptr_t)&_PyErr_Format);
    patch_64(data + 0x48, instruction_starts[instruction->error_target]);
    patch_64(data + 0x50, (uintptr_t)&PyDict_SetItem);
    patch_64(data + 0x58, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x60, (uintptr_t)code + sizeof(code_body));
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x14, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x2f, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x37, (uintptr_t)data + 0x2c);
    patch_x86_64_32rx(code + 0x47, (uintptr_t)data + 0x34);
    patch_32r(code + 0x51, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x5c, (uintptr_t)data + 0x3c);
    patch_x86_64_32rx(code + 0x72, (uintptr_t)data + 0x44);
    patch_x86_64_32rx(code + 0x78, (uintptr_t)data + 0x4c);
    patch_x86_64_32rx(code + 0x92, (uintptr_t)data + 0x44);
    patch_x86_64_32rx(code + 0x9d, (uintptr_t)data + 0x54);
    patch_x86_64_32rx(code + 0xae, (uintptr_t)data + 0x5c);
    patch_x86_64_32rx(code + 0xb7, (uintptr_t)data + 0x54);
    patch_x86_64_32rx(code + 0xbe, (uintptr_t)data + 0x44);
}

void
emit__STORE_SLICE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_STORE_SLICE.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 75 f8                   movq    -0x8(%rbp), %rsi
    // 5: 48 8b 7d f0                   movq    -0x10(%rbp), %rdi
    // 9: 4c 8b 75 e0                   movq    -0x20(%rbp), %r14
    // d: 48 8b 5d e8                   movq    -0x18(%rbp), %rbx
    // 11: ff 15 00 00 00 00             callq   *(%rip)                 # 0x17 <_JIT_ENTRY+0x17>
    // 0000000000000013:  R_X86_64_GOTPCRELX   _PyBuildSlice_ConsumeRefs-0x4
    // 17: 48 85 c0                      testq   %rax, %rax
    // 1a: 74 6e                         je      0x8a <_JIT_ENTRY+0x8a>
    // 1c: 49 89 c7                      movq    %rax, %r15
    // 1f: 4c 89 2c 24                   movq    %r13, (%rsp)
    // 23: 4d 89 e5                      movq    %r12, %r13
    // 26: 48 89 df                      movq    %rbx, %rdi
    // 29: 48 89 c6                      movq    %rax, %rsi
    // 2c: 4c 89 f2                      movq    %r14, %rdx
    // 2f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x35 <_JIT_ENTRY+0x35>
    // 0000000000000031:  R_X86_64_GOTPCRELX   PyObject_SetItem-0x4
    // 35: 41 89 c4                      movl    %eax, %r12d
    // 38: 49 8b 07                      movq    (%r15), %rax
    // 3b: 85 c0                         testl   %eax, %eax
    // 3d: 78 11                         js      0x50 <_JIT_ENTRY+0x50>
    // 3f: 48 ff c8                      decq    %rax
    // 42: 49 89 07                      movq    %rax, (%r15)
    // 45: 75 09                         jne     0x50 <_JIT_ENTRY+0x50>
    // 47: 4c 89 ff                      movq    %r15, %rdi
    // 4a: ff 15 00 00 00 00             callq   *(%rip)                 # 0x50 <_JIT_ENTRY+0x50>
    // 000000000000004c:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 50: 49 8b 06                      movq    (%r14), %rax
    // 53: 85 c0                         testl   %eax, %eax
    // 55: 78 11                         js      0x68 <_JIT_ENTRY+0x68>
    // 57: 48 ff c8                      decq    %rax
    // 5a: 49 89 06                      movq    %rax, (%r14)
    // 5d: 75 09                         jne     0x68 <_JIT_ENTRY+0x68>
    // 5f: 4c 89 f7                      movq    %r14, %rdi
    // 62: ff 15 00 00 00 00             callq   *(%rip)                 # 0x68 <_JIT_ENTRY+0x68>
    // 0000000000000064:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 68: 48 8b 03                      movq    (%rbx), %rax
    // 6b: 85 c0                         testl   %eax, %eax
    // 6d: 78 08                         js      0x77 <_JIT_ENTRY+0x77>
    // 6f: 48 ff c8                      decq    %rax
    // 72: 48 89 03                      movq    %rax, (%rbx)
    // 75: 74 4a                         je      0xc1 <_JIT_ENTRY+0xc1>
    // 77: 45 85 e4                      testl   %r12d, %r12d
    // 7a: 4d 89 ec                      movq    %r13, %r12
    // 7d: 4c 8b 2c 24                   movq    (%rsp), %r13
    // 81: 74 53                         je      0xd6 <_JIT_ENTRY+0xd6>
    // 83: 58                            popq    %rax
    // 84: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x8a <_JIT_ENTRY+0x8a>
    // 0000000000000086:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 8a: 49 8b 06                      movq    (%r14), %rax
    // 8d: 85 c0                         testl   %eax, %eax
    // 8f: 78 11                         js      0xa2 <_JIT_ENTRY+0xa2>
    // 91: 48 ff c8                      decq    %rax
    // 94: 49 89 06                      movq    %rax, (%r14)
    // 97: 75 09                         jne     0xa2 <_JIT_ENTRY+0xa2>
    // 99: 4c 89 f7                      movq    %r14, %rdi
    // 9c: ff 15 00 00 00 00             callq   *(%rip)                 # 0xa2 <_JIT_ENTRY+0xa2>
    // 000000000000009e:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // a2: 48 8b 03                      movq    (%rbx), %rax
    // a5: 85 c0                         testl   %eax, %eax
    // a7: 78 da                         js      0x83 <_JIT_ENTRY+0x83>
    // a9: 48 ff c8                      decq    %rax
    // ac: 48 89 03                      movq    %rax, (%rbx)
    // af: 75 d2                         jne     0x83 <_JIT_ENTRY+0x83>
    // b1: 48 89 df                      movq    %rbx, %rdi
    // b4: ff 15 00 00 00 00             callq   *(%rip)                 # 0xba <_JIT_ENTRY+0xba>
    // 00000000000000b6:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // ba: 58                            popq    %rax
    // bb: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xc1 <_JIT_ENTRY+0xc1>
    // 00000000000000bd:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // c1: 48 89 df                      movq    %rbx, %rdi
    // c4: ff 15 00 00 00 00             callq   *(%rip)                 # 0xca <_JIT_ENTRY+0xca>
    // 00000000000000c6:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // ca: 45 85 e4                      testl   %r12d, %r12d
    // cd: 4d 89 ec                      movq    %r13, %r12
    // d0: 4c 8b 2c 24                   movq    (%rsp), %r13
    // d4: 75 ad                         jne     0x83 <_JIT_ENTRY+0x83>
    // d6: 48 83 c5 e0                   addq    $-0x20, %rbp
    // da: 58                            popq    %rax
    // db: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xe1 <_JIT_ENTRY+0xe1>
    // 00000000000000dd:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // db: 
    const unsigned char code_body[219] = {
        0x50, 0x48, 0x8b, 0x75, 0xf8, 0x48, 0x8b, 0x7d,
        0xf0, 0x4c, 0x8b, 0x75, 0xe0, 0x48, 0x8b, 0x5d,
        0xe8, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x85, 0xc0, 0x74, 0x6e, 0x49, 0x89, 0xc7, 0x4c,
        0x89, 0x2c, 0x24, 0x4d, 0x89, 0xe5, 0x48, 0x89,
        0xdf, 0x48, 0x89, 0xc6, 0x4c, 0x89, 0xf2, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x41, 0x89, 0xc4,
        0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x11, 0x48,
        0xff, 0xc8, 0x49, 0x89, 0x07, 0x75, 0x09, 0x4c,
        0x89, 0xff, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x11, 0x48,
        0xff, 0xc8, 0x49, 0x89, 0x06, 0x75, 0x09, 0x4c,
        0x89, 0xf7, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x08, 0x48,
        0xff, 0xc8, 0x48, 0x89, 0x03, 0x74, 0x4a, 0x45,
        0x85, 0xe4, 0x4d, 0x89, 0xec, 0x4c, 0x8b, 0x2c,
        0x24, 0x74, 0x53, 0x58, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78,
        0x11, 0x48, 0xff, 0xc8, 0x49, 0x89, 0x06, 0x75,
        0x09, 0x4c, 0x89, 0xf7, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78,
        0xda, 0x48, 0xff, 0xc8, 0x48, 0x89, 0x03, 0x75,
        0xd2, 0x48, 0x89, 0xdf, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xdf, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x45, 0x85, 0xe4, 0x4d, 0x89, 0xec,
        0x4c, 0x8b, 0x2c, 0x24, 0x75, 0xad, 0x48, 0x83,
        0xc5, 0xe0, 0x58,
    };
    // 0: 
    // 0: &_PyBuildSlice_ConsumeRefs+0x0
    // 8: &PyObject_SetItem+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_PyBuildSlice_ConsumeRefs);
    patch_64(data + 0x8, (uintptr_t)&PyObject_SetItem);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x13, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x31, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x4c, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x64, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x86, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x9e, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xb6, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xbd, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xc6, (uintptr_t)data + 0xc);
}

void
emit__STORE_SUBSCR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_STORE_SUBSCR.o:       file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 4c 89 24 24                   movq    %r12, (%rsp)
    // 5: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 9: 4c 8b 75 e8                   movq    -0x18(%rbp), %r14
    // d: 4c 8b 7d f0                   movq    -0x10(%rbp), %r15
    // 11: 4c 89 ff                      movq    %r15, %rdi
    // 14: 48 89 de                      movq    %rbx, %rsi
    // 17: 4c 89 f2                      movq    %r14, %rdx
    // 1a: ff 15 00 00 00 00             callq   *(%rip)                 # 0x20 <_JIT_ENTRY+0x20>
    // 000000000000001c:  R_X86_64_GOTPCRELX   PyObject_SetItem-0x4
    // 20: 41 89 c4                      movl    %eax, %r12d
    // 23: 49 8b 06                      movq    (%r14), %rax
    // 26: 85 c0                         testl   %eax, %eax
    // 28: 78 08                         js      0x32 <_JIT_ENTRY+0x32>
    // 2a: 48 ff c8                      decq    %rax
    // 2d: 49 89 06                      movq    %rax, (%r14)
    // 30: 74 1a                         je      0x4c <_JIT_ENTRY+0x4c>
    // 32: 49 8b 07                      movq    (%r15), %rax
    // 35: 85 c0                         testl   %eax, %eax
    // 37: 78 23                         js      0x5c <_JIT_ENTRY+0x5c>
    // 39: 48 ff c8                      decq    %rax
    // 3c: 49 89 07                      movq    %rax, (%r15)
    // 3f: 75 1b                         jne     0x5c <_JIT_ENTRY+0x5c>
    // 41: 4c 89 ff                      movq    %r15, %rdi
    // 44: ff 15 00 00 00 00             callq   *(%rip)                 # 0x4a <_JIT_ENTRY+0x4a>
    // 0000000000000046:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 4a: eb 10                         jmp     0x5c <_JIT_ENTRY+0x5c>
    // 4c: 4c 89 f7                      movq    %r14, %rdi
    // 4f: ff 15 00 00 00 00             callq   *(%rip)                 # 0x55 <_JIT_ENTRY+0x55>
    // 0000000000000051:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 55: 49 8b 07                      movq    (%r15), %rax
    // 58: 85 c0                         testl   %eax, %eax
    // 5a: 79 dd                         jns     0x39 <_JIT_ENTRY+0x39>
    // 5c: 48 8b 03                      movq    (%rbx), %rax
    // 5f: 85 c0                         testl   %eax, %eax
    // 61: 78 08                         js      0x6b <_JIT_ENTRY+0x6b>
    // 63: 48 ff c8                      decq    %rax
    // 66: 48 89 03                      movq    %rax, (%rbx)
    // 69: 74 10                         je      0x7b <_JIT_ENTRY+0x7b>
    // 6b: 45 85 e4                      testl   %r12d, %r12d
    // 6e: 74 19                         je      0x89 <_JIT_ENTRY+0x89>
    // 70: 4c 8b 24 24                   movq    (%rsp), %r12
    // 74: 58                            popq    %rax
    // 75: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x7b <_JIT_ENTRY+0x7b>
    // 0000000000000077:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 7b: 48 89 df                      movq    %rbx, %rdi
    // 7e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x84 <_JIT_ENTRY+0x84>
    // 0000000000000080:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 84: 45 85 e4                      testl   %r12d, %r12d
    // 87: 75 e7                         jne     0x70 <_JIT_ENTRY+0x70>
    // 89: 48 83 c5 e8                   addq    $-0x18, %rbp
    // 8d: 4c 8b 24 24                   movq    (%rsp), %r12
    // 91: 58                            popq    %rax
    // 92: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x98 <_JIT_ENTRY+0x98>
    // 0000000000000094:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 92: 
    const unsigned char code_body[146] = {
        0x50, 0x4c, 0x89, 0x24, 0x24, 0x48, 0x8b, 0x5d,
        0xf8, 0x4c, 0x8b, 0x75, 0xe8, 0x4c, 0x8b, 0x7d,
        0xf0, 0x4c, 0x89, 0xff, 0x48, 0x89, 0xde, 0x4c,
        0x89, 0xf2, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x41, 0x89, 0xc4, 0x49, 0x8b, 0x06, 0x85, 0xc0,
        0x78, 0x08, 0x48, 0xff, 0xc8, 0x49, 0x89, 0x06,
        0x74, 0x1a, 0x49, 0x8b, 0x07, 0x85, 0xc0, 0x78,
        0x23, 0x48, 0xff, 0xc8, 0x49, 0x89, 0x07, 0x75,
        0x1b, 0x4c, 0x89, 0xff, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0xeb, 0x10, 0x4c, 0x89, 0xf7, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x49, 0x8b, 0x07,
        0x85, 0xc0, 0x79, 0xdd, 0x48, 0x8b, 0x03, 0x85,
        0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8, 0x48, 0x89,
        0x03, 0x74, 0x10, 0x45, 0x85, 0xe4, 0x74, 0x19,
        0x4c, 0x8b, 0x24, 0x24, 0x58, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x45, 0x85, 0xe4, 0x75,
        0xe7, 0x48, 0x83, 0xc5, 0xe8, 0x4c, 0x8b, 0x24,
        0x24, 0x58,
    };
    // 0: 
    // 0: &PyObject_SetItem+0x0
    // 8: &_Py_Dealloc+0x0
    // 10: ERROR_TARGET
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyObject_SetItem);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x10, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x1c, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x46, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x51, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x77, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x80, (uintptr_t)data + 0x4);
}

void
emit__STORE_SUBSCR_DICT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_STORE_SUBSCR_DICT.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 5d f0                   movq    -0x10(%rbp), %rbx
    // 5: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // 9: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x10 <_JIT_ENTRY+0x10>
    // 000000000000000c:  R_X86_64_REX_GOTPCRELX       PyDict_Type-0x4
    // 10: 74 07                         je      0x19 <_JIT_ENTRY+0x19>
    // 12: 58                            popq    %rax
    // 13: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x19 <_JIT_ENTRY+0x19>
    // 0000000000000015:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 19: 48 8b 55 e8                   movq    -0x18(%rbp), %rdx
    // 1d: 48 8b 75 f8                   movq    -0x8(%rbp), %rsi
    // 21: 48 89 df                      movq    %rbx, %rdi
    // 24: ff 15 00 00 00 00             callq   *(%rip)                 # 0x2a <_JIT_ENTRY+0x2a>
    // 0000000000000026:  R_X86_64_GOTPCRELX   _PyDict_SetItem_Take2-0x4
    // 2a: 48 8b 0b                      movq    (%rbx), %rcx
    // 2d: 85 c9                         testl   %ecx, %ecx
    // 2f: 78 08                         js      0x39 <_JIT_ENTRY+0x39>
    // 31: 48 ff c9                      decq    %rcx
    // 34: 48 89 0b                      movq    %rcx, (%rbx)
    // 37: 74 0b                         je      0x44 <_JIT_ENTRY+0x44>
    // 39: 85 c0                         testl   %eax, %eax
    // 3b: 74 18                         je      0x55 <_JIT_ENTRY+0x55>
    // 3d: 58                            popq    %rax
    // 3e: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x44 <_JIT_ENTRY+0x44>
    // 0000000000000040:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 44: 48 89 df                      movq    %rbx, %rdi
    // 47: 89 c3                         movl    %eax, %ebx
    // 49: ff 15 00 00 00 00             callq   *(%rip)                 # 0x4f <_JIT_ENTRY+0x4f>
    // 000000000000004b:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 4f: 89 d8                         movl    %ebx, %eax
    // 51: 85 c0                         testl   %eax, %eax
    // 53: 75 e8                         jne     0x3d <_JIT_ENTRY+0x3d>
    // 55: 48 83 c5 e8                   addq    $-0x18, %rbp
    // 59: 58                            popq    %rax
    // 5a: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x60 <_JIT_ENTRY+0x60>
    // 000000000000005c:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 5a: 
    const unsigned char code_body[90] = {
        0x50, 0x48, 0x8b, 0x5d, 0xf0, 0x48, 0x8b, 0x43,
        0x08, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x74, 0x07, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x55, 0xe8, 0x48, 0x8b, 0x75,
        0xf8, 0x48, 0x89, 0xdf, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8b, 0x0b, 0x85, 0xc9, 0x78,
        0x08, 0x48, 0xff, 0xc9, 0x48, 0x89, 0x0b, 0x74,
        0x0b, 0x85, 0xc0, 0x74, 0x18, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf, 0x89,
        0xc3, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x89,
        0xd8, 0x85, 0xc0, 0x75, 0xe8, 0x48, 0x83, 0xc5,
        0xe8, 0x58,
    };
    // 0: 
    // 0: &PyDict_Type+0x0
    // 8: JUMP_TARGET
    // 10: &_PyDict_SetItem_Take2+0x0
    // 18: ERROR_TARGET
    // 20: &_Py_Dealloc+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyDict_Type);
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&_PyDict_SetItem_Take2);
    patch_64(data + 0x18, instruction_starts[instruction->error_target]);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xc, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x15, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x26, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x40, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x4b, (uintptr_t)data + 0x1c);
}

void
emit__STORE_SUBSCR_LIST_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_STORE_SUBSCR_LIST_INT.o:      file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // 5: 49 8b 46 08                   movq    0x8(%r14), %rax
    // 9: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x10 <_JIT_ENTRY+0x10>
    // 000000000000000c:  R_X86_64_REX_GOTPCRELX       PyLong_Type-0x4
    // 10: 0f 85 b2 00 00 00             jne     0xc8 <_JIT_ENTRY+0xc8>
    // 16: 48 8b 5d f0                   movq    -0x10(%rbp), %rbx
    // 1a: 48 8b 43 08                   movq    0x8(%rbx), %rax
    // 1e: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x25 <_JIT_ENTRY+0x25>
    // 0000000000000021:  R_X86_64_REX_GOTPCRELX       PyList_Type-0x4
    // 25: 0f 85 9d 00 00 00             jne     0xc8 <_JIT_ENTRY+0xc8>
    // 2b: 49 83 7e 10 09                cmpq    $0x9, 0x10(%r14)
    // 30: 0f 83 92 00 00 00             jae     0xc8 <_JIT_ENTRY+0xc8>
    // 36: 41 8b 46 18                   movl    0x18(%r14), %eax
    // 3a: 48 39 43 10                   cmpq    %rax, 0x10(%rbx)
    // 3e: 0f 8e 84 00 00 00             jle     0xc8 <_JIT_ENTRY+0xc8>
    // 44: 48 8b 4d e8                   movq    -0x18(%rbp), %rcx
    // 48: 48 8b 53 18                   movq    0x18(%rbx), %rdx
    // 4c: 48 8b 3c c2                   movq    (%rdx,%rax,8), %rdi
    // 50: 48 89 0c c2                   movq    %rcx, (%rdx,%rax,8)
    // 54: 48 8b 07                      movq    (%rdi), %rax
    // 57: 85 c0                         testl   %eax, %eax
    // 59: 78 0e                         js      0x69 <_JIT_ENTRY+0x69>
    // 5b: 48 ff c8                      decq    %rax
    // 5e: 48 89 07                      movq    %rax, (%rdi)
    // 61: 75 06                         jne     0x69 <_JIT_ENTRY+0x69>
    // 63: ff 15 00 00 00 00             callq   *(%rip)                 # 0x69 <_JIT_ENTRY+0x69>
    // 0000000000000065:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 69: 49 8b 06                      movq    (%r14), %rax
    // 6c: 85 c0                         testl   %eax, %eax
    // 6e: 78 35                         js      0xa5 <_JIT_ENTRY+0xa5>
    // 70: 48 ff c8                      decq    %rax
    // 73: 49 89 06                      movq    %rax, (%r14)
    // 76: 75 2d                         jne     0xa5 <_JIT_ENTRY+0xa5>
    // 78: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x7f <_JIT_ENTRY+0x7f>
    // 000000000000007b:  R_X86_64_REX_GOTPCRELX       _PyRuntime-0x4
    // 7f: 48 8b 81 48 28 00 00          movq    0x2848(%rcx), %rax
    // 86: 48 85 c0                      testq   %rax, %rax
    // 89: 74 11                         je      0x9c <_JIT_ENTRY+0x9c>
    // 8b: 48 8b 91 50 28 00 00          movq    0x2850(%rcx), %rdx
    // 92: 4c 89 f7                      movq    %r14, %rdi
    // 95: be 01 00 00 00                movl    $0x1, %esi
    // 9a: ff d0                         callq   *%rax
    // 9c: 4c 89 f7                      movq    %r14, %rdi
    // 9f: ff 15 00 00 00 00             callq   *(%rip)                 # 0xa5 <_JIT_ENTRY+0xa5>
    // 00000000000000a1:  R_X86_64_GOTPCRELX   PyObject_Free-0x4
    // a5: 48 83 c5 e8                   addq    $-0x18, %rbp
    // a9: 48 8b 03                      movq    (%rbx), %rax
    // ac: 85 c0                         testl   %eax, %eax
    // ae: 78 11                         js      0xc1 <_JIT_ENTRY+0xc1>
    // b0: 48 ff c8                      decq    %rax
    // b3: 48 89 03                      movq    %rax, (%rbx)
    // b6: 75 09                         jne     0xc1 <_JIT_ENTRY+0xc1>
    // b8: 48 89 df                      movq    %rbx, %rdi
    // bb: ff 15 00 00 00 00             callq   *(%rip)                 # 0xc1 <_JIT_ENTRY+0xc1>
    // 00000000000000bd:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // c1: 58                            popq    %rax
    // c2: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xc8 <_JIT_ENTRY+0xc8>
    // 00000000000000c4:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // c8: 58                            popq    %rax
    // c9: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xcf <_JIT_ENTRY+0xcf>
    // 00000000000000cb:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // cf: 
    const unsigned char code_body[207] = {
        0x50, 0x4c, 0x8b, 0x75, 0xf8, 0x49, 0x8b, 0x46,
        0x08, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x0f, 0x85, 0xb2, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x5d, 0xf0, 0x48, 0x8b, 0x43, 0x08, 0x48, 0x3b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x85, 0x9d,
        0x00, 0x00, 0x00, 0x49, 0x83, 0x7e, 0x10, 0x09,
        0x0f, 0x83, 0x92, 0x00, 0x00, 0x00, 0x41, 0x8b,
        0x46, 0x18, 0x48, 0x39, 0x43, 0x10, 0x0f, 0x8e,
        0x84, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x4d, 0xe8,
        0x48, 0x8b, 0x53, 0x18, 0x48, 0x8b, 0x3c, 0xc2,
        0x48, 0x89, 0x0c, 0xc2, 0x48, 0x8b, 0x07, 0x85,
        0xc0, 0x78, 0x0e, 0x48, 0xff, 0xc8, 0x48, 0x89,
        0x07, 0x75, 0x06, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x49, 0x8b, 0x06, 0x85, 0xc0, 0x78, 0x35,
        0x48, 0xff, 0xc8, 0x49, 0x89, 0x06, 0x75, 0x2d,
        0x48, 0x8b, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x81, 0x48, 0x28, 0x00, 0x00, 0x48, 0x85,
        0xc0, 0x74, 0x11, 0x48, 0x8b, 0x91, 0x50, 0x28,
        0x00, 0x00, 0x4c, 0x89, 0xf7, 0xbe, 0x01, 0x00,
        0x00, 0x00, 0xff, 0xd0, 0x4c, 0x89, 0xf7, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x83, 0xc5,
        0xe8, 0x48, 0x8b, 0x03, 0x85, 0xc0, 0x78, 0x11,
        0x48, 0xff, 0xc8, 0x48, 0x89, 0x03, 0x75, 0x09,
        0x48, 0x89, 0xdf, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &PyLong_Type+0x0
    // 8: &PyList_Type+0x0
    // 10: &_Py_Dealloc+0x0
    // 18: &_PyRuntime+0x0
    // 20: &PyObject_Free+0x0
    // 28: CONTINUE
    // 30: JUMP_TARGET
    const unsigned char data_body[56] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    patch_64(data + 0x8, (uintptr_t)&PyList_Type);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x20, (uintptr_t)&PyObject_Free);
    patch_64(data + 0x28, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x30, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xc, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x21, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x65, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x7b, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0xa1, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0xbd, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0xc4, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0xcb, (uintptr_t)data + 0x2c);
}

void
emit__SWAP(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_SWAP.o:       file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 7: 48 8b 4d f8                   movq    -0x8(%rbp), %rcx
    // b: c1 e0 03                      shll    $0x3, %eax
    // e: 48 89 ea                      movq    %rbp, %rdx
    // 11: 48 29 c2                      subq    %rax, %rdx
    // 14: 48 8b 02                      movq    (%rdx), %rax
    // 17: 48 89 0a                      movq    %rcx, (%rdx)
    // 1a: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // 1e: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x24 <_JIT_ENTRY+0x24>
    // 0000000000000020:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 1e: 
    const unsigned char code_body[30] = {
        0x0f, 0xb7, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x4d, 0xf8, 0xc1, 0xe0, 0x03, 0x48, 0x89,
        0xea, 0x48, 0x29, 0xc2, 0x48, 0x8b, 0x02, 0x48,
        0x89, 0x0a, 0x48, 0x89, 0x45, 0xf8,
    };
    // 0: 
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x3, (uintptr_t)data + -0x4);
}

void
emit__TIER2_RESUME_CHECK(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_TIER2_RESUME_CHECK.o: file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 49 8b 44 24 18                movq    0x18(%r12), %rax
    // 5: 84 c0                         testb   %al, %al
    // 7: 74 06                         je      0xf <_JIT_ENTRY+0xf>
    // 9: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // f: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x15 <_JIT_ENTRY+0x15>
    // 0000000000000011:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // f: 
    const unsigned char code_body[15] = {
        0x49, 0x8b, 0x44, 0x24, 0x18, 0x84, 0xc0, 0x74,
        0x06, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: JUMP_TARGET
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
}

void
emit__TO_BOOL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_TO_BOOL.o:    file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 5: 48 89 df                      movq    %rbx, %rdi
    // 8: ff 15 00 00 00 00             callq   *(%rip)                 # 0xe <_JIT_ENTRY+0xe>
    // 000000000000000a:  R_X86_64_GOTPCRELX   PyObject_IsTrue-0x4
    // e: 48 8b 0b                      movq    (%rbx), %rcx
    // 11: 85 c9                         testl   %ecx, %ecx
    // 13: 78 08                         js      0x1d <_JIT_ENTRY+0x1d>
    // 15: 48 ff c9                      decq    %rcx
    // 18: 48 89 0b                      movq    %rcx, (%rbx)
    // 1b: 74 2a                         je      0x47 <_JIT_ENTRY+0x47>
    // 1d: 85 c0                         testl   %eax, %eax
    // 1f: 78 37                         js      0x58 <_JIT_ENTRY+0x58>
    // 21: 75 12                         jne     0x35 <_JIT_ENTRY+0x35>
    // 23: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x2a <_JIT_ENTRY+0x2a>
    // 0000000000000026:  R_X86_64_REX_GOTPCRELX       _Py_FalseStruct-0x4
    // 2a: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // 2e: 58                            popq    %rax
    // 2f: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x35 <_JIT_ENTRY+0x35>
    // 0000000000000031:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 35: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x3c <_JIT_ENTRY+0x3c>
    // 0000000000000038:  R_X86_64_REX_GOTPCRELX       _Py_TrueStruct-0x4
    // 3c: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // 40: 58                            popq    %rax
    // 41: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x47 <_JIT_ENTRY+0x47>
    // 0000000000000043:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 47: 48 89 df                      movq    %rbx, %rdi
    // 4a: 89 c3                         movl    %eax, %ebx
    // 4c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x52 <_JIT_ENTRY+0x52>
    // 000000000000004e:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 52: 89 d8                         movl    %ebx, %eax
    // 54: 85 c0                         testl   %eax, %eax
    // 56: 79 c9                         jns     0x21 <_JIT_ENTRY+0x21>
    // 58: 58                            popq    %rax
    // 59: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x5f <_JIT_ENTRY+0x5f>
    // 000000000000005b:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 5f: 
    const unsigned char code_body[95] = {
        0x50, 0x48, 0x8b, 0x5d, 0xf8, 0x48, 0x89, 0xdf,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x0b, 0x85, 0xc9, 0x78, 0x08, 0x48, 0xff, 0xc9,
        0x48, 0x89, 0x0b, 0x74, 0x2a, 0x85, 0xc0, 0x78,
        0x37, 0x75, 0x12, 0x48, 0x8b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x89, 0x45, 0xf8, 0x58, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x45, 0xf8,
        0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0xdf, 0x89, 0xc3, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x89, 0xd8, 0x85, 0xc0, 0x79, 0xc9,
        0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &PyObject_IsTrue+0x0
    // 8: &_Py_FalseStruct+0x0
    // 10: CONTINUE
    // 18: &_Py_TrueStruct+0x0
    // 20: &_Py_Dealloc+0x0
    // 28: ERROR_TARGET
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyObject_IsTrue);
    patch_64(data + 0x8, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x28, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xa, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x26, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x31, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x38, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x43, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x4e, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x5b, (uintptr_t)data + 0x24);
}

void
emit__TO_BOOL_BOOL(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_TO_BOOL_BOOL.o:       file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 4: 48 8b 40 08                   movq    0x8(%rax), %rax
    // 8: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xf <_JIT_ENTRY+0xf>
    // 000000000000000b:  R_X86_64_REX_GOTPCRELX       PyBool_Type-0x4
    // f: 74 06                         je      0x17 <_JIT_ENTRY+0x17>
    // 11: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x17 <_JIT_ENTRY+0x17>
    // 0000000000000013:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 17: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 17: 
    const unsigned char code_body[23] = {
        0x48, 0x8b, 0x45, 0xf8, 0x48, 0x8b, 0x40, 0x08,
        0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x74,
        0x06, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &PyBool_Type+0x0
    // 8: JUMP_TARGET
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyBool_Type);
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xb, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x13, (uintptr_t)data + 0x4);
}

void
emit__TO_BOOL_INT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_TO_BOOL_INT.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 7d f8                   movq    -0x8(%rbp), %rdi
    // 5: 48 8b 47 08                   movq    0x8(%rdi), %rax
    // 9: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x10 <_JIT_ENTRY+0x10>
    // 000000000000000c:  R_X86_64_REX_GOTPCRELX       PyLong_Type-0x4
    // 10: 74 07                         je      0x19 <_JIT_ENTRY+0x19>
    // 12: 58                            popq    %rax
    // 13: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x19 <_JIT_ENTRY+0x19>
    // 0000000000000015:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 19: 8b 47 10                      movl    0x10(%rdi), %eax
    // 1c: 83 e0 03                      andl    $0x3, %eax
    // 1f: 83 f8 01                      cmpl    $0x1, %eax
    // 22: 75 12                         jne     0x36 <_JIT_ENTRY+0x36>
    // 24: 48 8b 1d 00 00 00 00          movq    (%rip), %rbx            # 0x2b <_JIT_ENTRY+0x2b>
    // 0000000000000027:  R_X86_64_REX_GOTPCRELX       _Py_FalseStruct-0x4
    // 2b: 48 89 5d f8                   movq    %rbx, -0x8(%rbp)
    // 2f: 58                            popq    %rax
    // 30: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x36 <_JIT_ENTRY+0x36>
    // 0000000000000032:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 36: 48 8b 07                      movq    (%rdi), %rax
    // 39: 48 8b 1d 00 00 00 00          movq    (%rip), %rbx            # 0x40 <_JIT_ENTRY+0x40>
    // 000000000000003c:  R_X86_64_REX_GOTPCRELX       _Py_TrueStruct-0x4
    // 40: 85 c0                         testl   %eax, %eax
    // 42: 78 e7                         js      0x2b <_JIT_ENTRY+0x2b>
    // 44: 48 ff c8                      decq    %rax
    // 47: 48 89 07                      movq    %rax, (%rdi)
    // 4a: 75 df                         jne     0x2b <_JIT_ENTRY+0x2b>
    // 4c: ff 15 00 00 00 00             callq   *(%rip)                 # 0x52 <_JIT_ENTRY+0x52>
    // 000000000000004e:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 52: 48 89 5d f8                   movq    %rbx, -0x8(%rbp)
    // 56: 58                            popq    %rax
    // 57: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x5d <_JIT_ENTRY+0x5d>
    // 0000000000000059:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 57: 
    const unsigned char code_body[87] = {
        0x50, 0x48, 0x8b, 0x7d, 0xf8, 0x48, 0x8b, 0x47,
        0x08, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x74, 0x07, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x8b, 0x47, 0x10, 0x83, 0xe0, 0x03, 0x83,
        0xf8, 0x01, 0x75, 0x12, 0x48, 0x8b, 0x1d, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0x5d, 0xf8, 0x58,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x07, 0x48, 0x8b, 0x1d, 0x00, 0x00, 0x00, 0x00,
        0x85, 0xc0, 0x78, 0xe7, 0x48, 0xff, 0xc8, 0x48,
        0x89, 0x07, 0x75, 0xdf, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x89, 0x5d, 0xf8, 0x58,
    };
    // 0: 
    // 0: &PyLong_Type+0x0
    // 8: JUMP_TARGET
    // 10: &_Py_FalseStruct+0x0
    // 18: CONTINUE
    // 20: &_Py_TrueStruct+0x0
    // 28: &_Py_Dealloc+0x0
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyLong_Type);
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x28, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xc, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x15, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x27, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x32, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x3c, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x4e, (uintptr_t)data + 0x24);
}

void
emit__TO_BOOL_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_TO_BOOL_LIST.o:       file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 7d f8                   movq    -0x8(%rbp), %rdi
    // 5: 48 8b 47 08                   movq    0x8(%rdi), %rax
    // 9: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x10 <_JIT_ENTRY+0x10>
    // 000000000000000c:  R_X86_64_REX_GOTPCRELX       PyList_Type-0x4
    // 10: 74 07                         je      0x19 <_JIT_ENTRY+0x19>
    // 12: 58                            popq    %rax
    // 13: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x19 <_JIT_ENTRY+0x19>
    // 0000000000000015:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 19: 48 8b 07                      movq    (%rdi), %rax
    // 1c: 48 8b 5f 10                   movq    0x10(%rdi), %rbx
    // 20: 85 c0                         testl   %eax, %eax
    // 22: 78 08                         js      0x2c <_JIT_ENTRY+0x2c>
    // 24: 48 ff c8                      decq    %rax
    // 27: 48 89 07                      movq    %rax, (%rdi)
    // 2a: 74 17                         je      0x43 <_JIT_ENTRY+0x43>
    // 2c: 48 85 db                      testq   %rbx, %rbx
    // 2f: 75 1d                         jne     0x4e <_JIT_ENTRY+0x4e>
    // 31: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x38 <_JIT_ENTRY+0x38>
    // 0000000000000034:  R_X86_64_REX_GOTPCRELX       _Py_FalseStruct-0x4
    // 38: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // 3c: 58                            popq    %rax
    // 3d: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x43 <_JIT_ENTRY+0x43>
    // 000000000000003f:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 43: ff 15 00 00 00 00             callq   *(%rip)                 # 0x49 <_JIT_ENTRY+0x49>
    // 0000000000000045:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 49: 48 85 db                      testq   %rbx, %rbx
    // 4c: 74 e3                         je      0x31 <_JIT_ENTRY+0x31>
    // 4e: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x55 <_JIT_ENTRY+0x55>
    // 0000000000000051:  R_X86_64_REX_GOTPCRELX       _Py_TrueStruct-0x4
    // 55: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // 59: 58                            popq    %rax
    // 5a: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x60 <_JIT_ENTRY+0x60>
    // 000000000000005c:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 5a: 
    const unsigned char code_body[90] = {
        0x50, 0x48, 0x8b, 0x7d, 0xf8, 0x48, 0x8b, 0x47,
        0x08, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x74, 0x07, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x07, 0x48, 0x8b, 0x5f, 0x10,
        0x85, 0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8, 0x48,
        0x89, 0x07, 0x74, 0x17, 0x48, 0x85, 0xdb, 0x75,
        0x1d, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0x45, 0xf8, 0x58, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x85, 0xdb, 0x74, 0xe3, 0x48, 0x8b,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x45,
        0xf8, 0x58,
    };
    // 0: 
    // 0: &PyList_Type+0x0
    // 8: JUMP_TARGET
    // 10: &_Py_FalseStruct+0x0
    // 18: CONTINUE
    // 20: &_Py_Dealloc+0x0
    // 28: &_Py_TrueStruct+0x0
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyList_Type);
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x28, (uintptr_t)&_Py_TrueStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xc, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x15, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x34, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x3f, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x45, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x51, (uintptr_t)data + 0x24);
}

void
emit__TO_BOOL_NONE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_TO_BOOL_NONE.o:       file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 45 f8                   movq    -0x8(%rbp), %rax
    // 4: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0xb <_JIT_ENTRY+0xb>
    // 0000000000000007:  R_X86_64_REX_GOTPCRELX       _Py_NoneStruct-0x4
    // b: 74 06                         je      0x13 <_JIT_ENTRY+0x13>
    // d: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x13 <_JIT_ENTRY+0x13>
    // 000000000000000f:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 13: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x1a <_JIT_ENTRY+0x1a>
    // 0000000000000016:  R_X86_64_REX_GOTPCRELX       _Py_FalseStruct-0x4
    // 1a: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // 1e: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x24 <_JIT_ENTRY+0x24>
    // 0000000000000020:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 1e: 
    const unsigned char code_body[30] = {
        0x48, 0x8b, 0x45, 0xf8, 0x48, 0x3b, 0x05, 0x00,
        0x00, 0x00, 0x00, 0x74, 0x06, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x05, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x89, 0x45, 0xf8,
    };
    // 0: 
    // 0: &_Py_NoneStruct+0x0
    // 8: JUMP_TARGET
    // 10: &_Py_FalseStruct+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&_Py_FalseStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x7, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0xf, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x16, (uintptr_t)data + 0xc);
}

void
emit__TO_BOOL_STR(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_TO_BOOL_STR.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 7d f8                   movq    -0x8(%rbp), %rdi
    // 5: 48 8b 47 08                   movq    0x8(%rdi), %rax
    // 9: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x10 <_JIT_ENTRY+0x10>
    // 000000000000000c:  R_X86_64_REX_GOTPCRELX       PyUnicode_Type-0x4
    // 10: 74 07                         je      0x19 <_JIT_ENTRY+0x19>
    // 12: 58                            popq    %rax
    // 13: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x19 <_JIT_ENTRY+0x19>
    // 0000000000000015:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 19: b8 e8 89 00 00                movl    $0x89e8, %eax           # imm = 0x89E8
    // 1e: 48 03 05 00 00 00 00          addq    (%rip), %rax            # 0x25 <_JIT_ENTRY+0x25>
    // 0000000000000021:  R_X86_64_REX_GOTPCRELX       _PyRuntime-0x4
    // 25: 48 39 c7                      cmpq    %rax, %rdi
    // 28: 74 21                         je      0x4b <_JIT_ENTRY+0x4b>
    // 2a: 48 8b 07                      movq    (%rdi), %rax
    // 2d: 48 8b 1d 00 00 00 00          movq    (%rip), %rbx            # 0x34 <_JIT_ENTRY+0x34>
    // 0000000000000030:  R_X86_64_REX_GOTPCRELX       _Py_TrueStruct-0x4
    // 34: 85 c0                         testl   %eax, %eax
    // 36: 78 08                         js      0x40 <_JIT_ENTRY+0x40>
    // 38: 48 ff c8                      decq    %rax
    // 3b: 48 89 07                      movq    %rax, (%rdi)
    // 3e: 74 1d                         je      0x5d <_JIT_ENTRY+0x5d>
    // 40: 48 89 5d f8                   movq    %rbx, -0x8(%rbp)
    // 44: 58                            popq    %rax
    // 45: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x4b <_JIT_ENTRY+0x4b>
    // 0000000000000047:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 4b: 48 8b 1d 00 00 00 00          movq    (%rip), %rbx            # 0x52 <_JIT_ENTRY+0x52>
    // 000000000000004e:  R_X86_64_REX_GOTPCRELX       _Py_FalseStruct-0x4
    // 52: 48 89 5d f8                   movq    %rbx, -0x8(%rbp)
    // 56: 58                            popq    %rax
    // 57: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x5d <_JIT_ENTRY+0x5d>
    // 0000000000000059:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 5d: ff 15 00 00 00 00             callq   *(%rip)                 # 0x63 <_JIT_ENTRY+0x63>
    // 000000000000005f:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 63: 48 89 5d f8                   movq    %rbx, -0x8(%rbp)
    // 67: 58                            popq    %rax
    // 68: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x6e <_JIT_ENTRY+0x6e>
    // 000000000000006a:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 68: 
    const unsigned char code_body[104] = {
        0x50, 0x48, 0x8b, 0x7d, 0xf8, 0x48, 0x8b, 0x47,
        0x08, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x74, 0x07, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0xb8, 0xe8, 0x89, 0x00, 0x00, 0x48, 0x03,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc7,
        0x74, 0x21, 0x48, 0x8b, 0x07, 0x48, 0x8b, 0x1d,
        0x00, 0x00, 0x00, 0x00, 0x85, 0xc0, 0x78, 0x08,
        0x48, 0xff, 0xc8, 0x48, 0x89, 0x07, 0x74, 0x1d,
        0x48, 0x89, 0x5d, 0xf8, 0x58, 0xff, 0x25, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x1d, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x89, 0x5d, 0xf8, 0x58, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x89, 0x5d, 0xf8, 0x58,
    };
    // 0: 
    // 0: &PyUnicode_Type+0x0
    // 8: JUMP_TARGET
    // 10: &_PyRuntime+0x0
    // 18: &_Py_TrueStruct+0x0
    // 20: CONTINUE
    // 28: &_Py_FalseStruct+0x0
    // 30: &_Py_Dealloc+0x0
    const unsigned char data_body[56] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyUnicode_Type);
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&_PyRuntime);
    patch_64(data + 0x18, (uintptr_t)&_Py_TrueStruct);
    patch_64(data + 0x20, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x28, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x30, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xc, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x15, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x21, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x30, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x47, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x4e, (uintptr_t)data + 0x24);
    patch_x86_64_32rx(code + 0x59, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x5f, (uintptr_t)data + 0x2c);
}

void
emit__UNARY_INVERT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_UNARY_INVERT.o:       file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 5: 48 89 df                      movq    %rbx, %rdi
    // 8: ff 15 00 00 00 00             callq   *(%rip)                 # 0xe <_JIT_ENTRY+0xe>
    // 000000000000000a:  R_X86_64_GOTPCRELX   PyNumber_Invert-0x4
    // e: 48 8b 0b                      movq    (%rbx), %rcx
    // 11: 85 c9                         testl   %ecx, %ecx
    // 13: 78 08                         js      0x1d <_JIT_ENTRY+0x1d>
    // 15: 48 ff c9                      decq    %rcx
    // 18: 48 89 0b                      movq    %rcx, (%rbx)
    // 1b: 74 10                         je      0x2d <_JIT_ENTRY+0x2d>
    // 1d: 48 85 c0                      testq   %rax, %rax
    // 20: 74 1f                         je      0x41 <_JIT_ENTRY+0x41>
    // 22: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // 26: 58                            popq    %rax
    // 27: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x2d <_JIT_ENTRY+0x2d>
    // 0000000000000029:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 2d: 48 89 df                      movq    %rbx, %rdi
    // 30: 48 89 c3                      movq    %rax, %rbx
    // 33: ff 15 00 00 00 00             callq   *(%rip)                 # 0x39 <_JIT_ENTRY+0x39>
    // 0000000000000035:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 39: 48 89 d8                      movq    %rbx, %rax
    // 3c: 48 85 c0                      testq   %rax, %rax
    // 3f: 75 e1                         jne     0x22 <_JIT_ENTRY+0x22>
    // 41: 58                            popq    %rax
    // 42: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x48 <_JIT_ENTRY+0x48>
    // 0000000000000044:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 48: 
    const unsigned char code_body[72] = {
        0x50, 0x48, 0x8b, 0x5d, 0xf8, 0x48, 0x89, 0xdf,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x0b, 0x85, 0xc9, 0x78, 0x08, 0x48, 0xff, 0xc9,
        0x48, 0x89, 0x0b, 0x74, 0x10, 0x48, 0x85, 0xc0,
        0x74, 0x1f, 0x48, 0x89, 0x45, 0xf8, 0x58, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf,
        0x48, 0x89, 0xc3, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xd8, 0x48, 0x85, 0xc0, 0x75,
        0xe1, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &PyNumber_Invert+0x0
    // 8: CONTINUE
    // 10: &_Py_Dealloc+0x0
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyNumber_Invert);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xa, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x29, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x35, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x44, (uintptr_t)data + 0x14);
}

void
emit__UNARY_NEGATIVE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_UNARY_NEGATIVE.o:     file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // 5: 48 89 df                      movq    %rbx, %rdi
    // 8: ff 15 00 00 00 00             callq   *(%rip)                 # 0xe <_JIT_ENTRY+0xe>
    // 000000000000000a:  R_X86_64_GOTPCRELX   PyNumber_Negative-0x4
    // e: 48 8b 0b                      movq    (%rbx), %rcx
    // 11: 85 c9                         testl   %ecx, %ecx
    // 13: 78 08                         js      0x1d <_JIT_ENTRY+0x1d>
    // 15: 48 ff c9                      decq    %rcx
    // 18: 48 89 0b                      movq    %rcx, (%rbx)
    // 1b: 74 10                         je      0x2d <_JIT_ENTRY+0x2d>
    // 1d: 48 85 c0                      testq   %rax, %rax
    // 20: 74 1f                         je      0x41 <_JIT_ENTRY+0x41>
    // 22: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // 26: 58                            popq    %rax
    // 27: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x2d <_JIT_ENTRY+0x2d>
    // 0000000000000029:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 2d: 48 89 df                      movq    %rbx, %rdi
    // 30: 48 89 c3                      movq    %rax, %rbx
    // 33: ff 15 00 00 00 00             callq   *(%rip)                 # 0x39 <_JIT_ENTRY+0x39>
    // 0000000000000035:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 39: 48 89 d8                      movq    %rbx, %rax
    // 3c: 48 85 c0                      testq   %rax, %rax
    // 3f: 75 e1                         jne     0x22 <_JIT_ENTRY+0x22>
    // 41: 58                            popq    %rax
    // 42: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x48 <_JIT_ENTRY+0x48>
    // 0000000000000044:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 48: 
    const unsigned char code_body[72] = {
        0x50, 0x48, 0x8b, 0x5d, 0xf8, 0x48, 0x89, 0xdf,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x0b, 0x85, 0xc9, 0x78, 0x08, 0x48, 0xff, 0xc9,
        0x48, 0x89, 0x0b, 0x74, 0x10, 0x48, 0x85, 0xc0,
        0x74, 0x1f, 0x48, 0x89, 0x45, 0xf8, 0x58, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf,
        0x48, 0x89, 0xc3, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x89, 0xd8, 0x48, 0x85, 0xc0, 0x75,
        0xe1, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &PyNumber_Negative+0x0
    // 8: CONTINUE
    // 10: &_Py_Dealloc+0x0
    // 18: ERROR_TARGET
    const unsigned char data_body[32] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyNumber_Negative);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x18, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xa, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x29, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x35, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x44, (uintptr_t)data + 0x14);
}

void
emit__UNARY_NOT(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_UNARY_NOT.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  R_X86_64_REX_GOTPCRELX       _Py_FalseStruct-0x4
    // 7: 48 39 45 f8                   cmpq    %rax, -0x8(%rbp)
    // b: 75 07                         jne     0x14 <_JIT_ENTRY+0x14>
    // d: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x14 <_JIT_ENTRY+0x14>
    // 0000000000000010:  R_X86_64_REX_GOTPCRELX       _Py_TrueStruct-0x4
    // 14: 48 89 45 f8                   movq    %rax, -0x8(%rbp)
    // 18: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x1e <_JIT_ENTRY+0x1e>
    // 000000000000001a:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 18: 
    const unsigned char code_body[24] = {
        0x48, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x39, 0x45, 0xf8, 0x75, 0x07, 0x48, 0x8b, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x45, 0xf8,
    };
    // 0: 
    // 0: &_Py_FalseStruct+0x0
    // 8: &_Py_TrueStruct+0x0
    const unsigned char data_body[16] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&_Py_FalseStruct);
    patch_64(data + 0x8, (uintptr_t)&_Py_TrueStruct);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x10, (uintptr_t)data + 0x4);
}

void
emit__UNPACK_EX(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_UNPACK_EX.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 8b 05 00 00 00 00             movl    (%rip), %eax            # 0x7 <_JIT_ENTRY+0x7>
    // 0000000000000003:  R_X86_64_GOTPCRELX   _JIT_OPARG-0x4
    // 7: 48 8b 5d f8                   movq    -0x8(%rbp), %rbx
    // b: 0f b6 d0                      movzbl  %al, %edx
    // e: 0f b6 cc                      movzbl  %ah, %ecx
    // 11: 8d 04 11                      leal    (%rcx,%rdx), %eax
    // 14: 4c 8d 74 c5 00                leaq    (%rbp,%rax,8), %r14
    // 19: 4c 89 e7                      movq    %r12, %rdi
    // 1c: 48 89 de                      movq    %rbx, %rsi
    // 1f: 4d 89 f0                      movq    %r14, %r8
    // 22: ff 15 00 00 00 00             callq   *(%rip)                 # 0x28 <_JIT_ENTRY+0x28>
    // 0000000000000024:  R_X86_64_GOTPCRELX   _PyEval_UnpackIterable-0x4
    // 28: 48 8b 0b                      movq    (%rbx), %rcx
    // 2b: 85 c9                         testl   %ecx, %ecx
    // 2d: 78 08                         js      0x37 <_JIT_ENTRY+0x37>
    // 2f: 48 ff c9                      decq    %rcx
    // 32: 48 89 0b                      movq    %rcx, (%rbx)
    // 35: 74 0e                         je      0x45 <_JIT_ENTRY+0x45>
    // 37: 85 c0                         testl   %eax, %eax
    // 39: 74 1b                         je      0x56 <_JIT_ENTRY+0x56>
    // 3b: 4c 89 f5                      movq    %r14, %rbp
    // 3e: 58                            popq    %rax
    // 3f: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x45 <_JIT_ENTRY+0x45>
    // 0000000000000041:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 45: 48 89 df                      movq    %rbx, %rdi
    // 48: 89 c3                         movl    %eax, %ebx
    // 4a: ff 15 00 00 00 00             callq   *(%rip)                 # 0x50 <_JIT_ENTRY+0x50>
    // 000000000000004c:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 50: 89 d8                         movl    %ebx, %eax
    // 52: 85 c0                         testl   %eax, %eax
    // 54: 75 e5                         jne     0x3b <_JIT_ENTRY+0x3b>
    // 56: 58                            popq    %rax
    // 57: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x5d <_JIT_ENTRY+0x5d>
    // 0000000000000059:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 5d: 
    const unsigned char code_body[93] = {
        0x50, 0x8b, 0x05, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8b, 0x5d, 0xf8, 0x0f, 0xb6, 0xd0, 0x0f, 0xb6,
        0xcc, 0x8d, 0x04, 0x11, 0x4c, 0x8d, 0x74, 0xc5,
        0x00, 0x4c, 0x89, 0xe7, 0x48, 0x89, 0xde, 0x4d,
        0x89, 0xf0, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x0b, 0x85, 0xc9, 0x78, 0x08, 0x48,
        0xff, 0xc9, 0x48, 0x89, 0x0b, 0x74, 0x0e, 0x85,
        0xc0, 0x74, 0x1b, 0x4c, 0x89, 0xf5, 0x58, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0xdf,
        0x89, 0xc3, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x89, 0xd8, 0x85, 0xc0, 0x75, 0xe5, 0x58, 0xff,
        0x25, 0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: &_PyEval_UnpackIterable+0x0
    // 10: CONTINUE
    // 18: &_Py_Dealloc+0x0
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_UnpackIterable);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x3, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x24, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x41, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x4c, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x59, (uintptr_t)data + 0x1c);
}

void
emit__UNPACK_SEQUENCE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_UNPACK_SEQUENCE.o:    file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 0f b7 15 00 00 00 00          movzwl  (%rip), %edx            # 0x8 <_JIT_ENTRY+0x8>
    // 0000000000000004:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 8: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // c: 48 8d 1c d5 f8 ff ff ff       leaq    -0x8(,%rdx,8), %rbx
    // 14: 48 01 eb                      addq    %rbp, %rbx
    // 17: 4c 89 e7                      movq    %r12, %rdi
    // 1a: 4c 89 f6                      movq    %r14, %rsi
    // 1d: b9 ff ff ff ff                movl    $0xffffffff, %ecx       # imm = 0xFFFFFFFF
    // 22: 49 89 d8                      movq    %rbx, %r8
    // 25: ff 15 00 00 00 00             callq   *(%rip)                 # 0x2b <_JIT_ENTRY+0x2b>
    // 0000000000000027:  R_X86_64_GOTPCRELX   _PyEval_UnpackIterable-0x4
    // 2b: 49 8b 0e                      movq    (%r14), %rcx
    // 2e: 85 c9                         testl   %ecx, %ecx
    // 30: 78 08                         js      0x3a <_JIT_ENTRY+0x3a>
    // 32: 48 ff c9                      decq    %rcx
    // 35: 49 89 0e                      movq    %rcx, (%r14)
    // 38: 74 0e                         je      0x48 <_JIT_ENTRY+0x48>
    // 3a: 85 c0                         testl   %eax, %eax
    // 3c: 74 1d                         je      0x5b <_JIT_ENTRY+0x5b>
    // 3e: 48 89 dd                      movq    %rbx, %rbp
    // 41: 58                            popq    %rax
    // 42: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x48 <_JIT_ENTRY+0x48>
    // 0000000000000044:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 48: 4c 89 f7                      movq    %r14, %rdi
    // 4b: 41 89 c6                      movl    %eax, %r14d
    // 4e: ff 15 00 00 00 00             callq   *(%rip)                 # 0x54 <_JIT_ENTRY+0x54>
    // 0000000000000050:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 54: 44 89 f0                      movl    %r14d, %eax
    // 57: 85 c0                         testl   %eax, %eax
    // 59: 75 e3                         jne     0x3e <_JIT_ENTRY+0x3e>
    // 5b: 58                            popq    %rax
    // 5c: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x62 <_JIT_ENTRY+0x62>
    // 000000000000005e:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 62: 
    const unsigned char code_body[98] = {
        0x50, 0x0f, 0xb7, 0x15, 0x00, 0x00, 0x00, 0x00,
        0x4c, 0x8b, 0x75, 0xf8, 0x48, 0x8d, 0x1c, 0xd5,
        0xf8, 0xff, 0xff, 0xff, 0x48, 0x01, 0xeb, 0x4c,
        0x89, 0xe7, 0x4c, 0x89, 0xf6, 0xb9, 0xff, 0xff,
        0xff, 0xff, 0x49, 0x89, 0xd8, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x49, 0x8b, 0x0e, 0x85, 0xc9,
        0x78, 0x08, 0x48, 0xff, 0xc9, 0x49, 0x89, 0x0e,
        0x74, 0x0e, 0x85, 0xc0, 0x74, 0x1d, 0x48, 0x89,
        0xdd, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00, 0x00,
        0x4c, 0x89, 0xf7, 0x41, 0x89, 0xc6, 0xff, 0x15,
        0x00, 0x00, 0x00, 0x00, 0x44, 0x89, 0xf0, 0x85,
        0xc0, 0x75, 0xe3, 0x58, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00,
    };
    // 0: 
    // 0: OPARG
    // 8: &_PyEval_UnpackIterable+0x0
    // 10: CONTINUE
    // 18: &_Py_Dealloc+0x0
    // 20: ERROR_TARGET
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    patch_64(data + 0x8, (uintptr_t)&_PyEval_UnpackIterable);
    patch_64(data + 0x10, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x18, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x20, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x4, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x27, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x44, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x50, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x5e, (uintptr_t)data + 0x1c);
}

void
emit__UNPACK_SEQUENCE_LIST(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_UNPACK_SEQUENCE_LIST.o:       file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 7d f8                   movq    -0x8(%rbp), %rdi
    // 5: 48 8b 47 08                   movq    0x8(%rdi), %rax
    // 9: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x10 <_JIT_ENTRY+0x10>
    // 000000000000000c:  R_X86_64_REX_GOTPCRELX       PyList_Type-0x4
    // 10: 75 50                         jne     0x62 <_JIT_ENTRY+0x62>
    // 12: 48 8b 5f 10                   movq    0x10(%rdi), %rbx
    // 16: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 1d: 48 39 c3                      cmpq    %rax, %rbx
    // 20: 75 40                         jne     0x62 <_JIT_ENTRY+0x62>
    // 22: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x29 <_JIT_ENTRY+0x29>
    // 0000000000000025:  R_X86_64_REX_GOTPCRELX       _JIT_OPARG-0x4
    // 29: 66 85 c0                      testw   %ax, %ax
    // 2c: 74 3b                         je      0x69 <_JIT_ENTRY+0x69>
    // 2e: 48 8d 45 f8                   leaq    -0x8(%rbp), %rax
    // 32: 48 8b 4f 18                   movq    0x18(%rdi), %rcx
    // 36: 48 8d 53 01                   leaq    0x1(%rbx), %rdx
    // 3a: eb 14                         jmp     0x50 <_JIT_ENTRY+0x50>
    // 3c: 0f 1f 40 00                   nopl    (%rax)
    // 40: 48 89 30                      movq    %rsi, (%rax)
    // 43: 48 83 c0 08                   addq    $0x8, %rax
    // 47: 48 ff ca                      decq    %rdx
    // 4a: 48 83 fa 01                   cmpq    $0x1, %rdx
    // 4e: 76 19                         jbe     0x69 <_JIT_ENTRY+0x69>
    // 50: 48 8b 74 d1 f0                movq    -0x10(%rcx,%rdx,8), %rsi
    // 55: 44 8b 06                      movl    (%rsi), %r8d
    // 58: 41 ff c0                      incl    %r8d
    // 5b: 74 e3                         je      0x40 <_JIT_ENTRY+0x40>
    // 5d: 44 89 06                      movl    %r8d, (%rsi)
    // 60: eb de                         jmp     0x40 <_JIT_ENTRY+0x40>
    // 62: 58                            popq    %rax
    // 63: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x69 <_JIT_ENTRY+0x69>
    // 0000000000000065:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 69: 48 8b 07                      movq    (%rdi), %rax
    // 6c: 85 c0                         testl   %eax, %eax
    // 6e: 78 08                         js      0x78 <_JIT_ENTRY+0x78>
    // 70: 48 ff c8                      decq    %rax
    // 73: 48 89 07                      movq    %rax, (%rdi)
    // 76: 74 0c                         je      0x84 <_JIT_ENTRY+0x84>
    // 78: 48 8d 6c dd f8                leaq    -0x8(%rbp,%rbx,8), %rbp
    // 7d: 58                            popq    %rax
    // 7e: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x84 <_JIT_ENTRY+0x84>
    // 0000000000000080:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 84: ff 15 00 00 00 00             callq   *(%rip)                 # 0x8a <_JIT_ENTRY+0x8a>
    // 0000000000000086:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 8a: 48 8d 6c dd f8                leaq    -0x8(%rbp,%rbx,8), %rbp
    // 8f: 58                            popq    %rax
    // 90: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x96 <_JIT_ENTRY+0x96>
    // 0000000000000092:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 90: 
    const unsigned char code_body[144] = {
        0x50, 0x48, 0x8b, 0x7d, 0xf8, 0x48, 0x8b, 0x47,
        0x08, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x75, 0x50, 0x48, 0x8b, 0x5f, 0x10, 0x0f, 0xb7,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc3,
        0x75, 0x40, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x66, 0x85, 0xc0, 0x74, 0x3b, 0x48, 0x8d,
        0x45, 0xf8, 0x48, 0x8b, 0x4f, 0x18, 0x48, 0x8d,
        0x53, 0x01, 0xeb, 0x14, 0x0f, 0x1f, 0x40, 0x00,
        0x48, 0x89, 0x30, 0x48, 0x83, 0xc0, 0x08, 0x48,
        0xff, 0xca, 0x48, 0x83, 0xfa, 0x01, 0x76, 0x19,
        0x48, 0x8b, 0x74, 0xd1, 0xf0, 0x44, 0x8b, 0x06,
        0x41, 0xff, 0xc0, 0x74, 0xe3, 0x44, 0x89, 0x06,
        0xeb, 0xde, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x8b, 0x07, 0x85, 0xc0, 0x78, 0x08,
        0x48, 0xff, 0xc8, 0x48, 0x89, 0x07, 0x74, 0x0c,
        0x48, 0x8d, 0x6c, 0xdd, 0xf8, 0x58, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00, 0xff, 0x15, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8d, 0x6c, 0xdd, 0xf8, 0x58,
    };
    // 0: 
    // 0: &PyList_Type+0x0
    // 8: OPARG
    // 10: JUMP_TARGET
    // 18: CONTINUE
    // 20: &_Py_Dealloc+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyList_Type);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xc, (uintptr_t)data + -0x4);
    patch_32r(code + 0x19, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x25, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x65, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x80, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x86, (uintptr_t)data + 0x1c);
}

void
emit__UNPACK_SEQUENCE_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_UNPACK_SEQUENCE_TUPLE.o:      file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 7d f8                   movq    -0x8(%rbp), %rdi
    // 5: 48 8b 47 08                   movq    0x8(%rdi), %rax
    // 9: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x10 <_JIT_ENTRY+0x10>
    // 000000000000000c:  R_X86_64_REX_GOTPCRELX       PyTuple_Type-0x4
    // 10: 75 4d                         jne     0x5f <_JIT_ENTRY+0x5f>
    // 12: 48 8b 5f 10                   movq    0x10(%rdi), %rbx
    // 16: 0f b7 05 00 00 00 00          movzwl  (%rip), %eax            # 0x1d <_JIT_ENTRY+0x1d>
    // 0000000000000019:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 1d: 48 39 c3                      cmpq    %rax, %rbx
    // 20: 75 3d                         jne     0x5f <_JIT_ENTRY+0x5f>
    // 22: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x29 <_JIT_ENTRY+0x29>
    // 0000000000000025:  R_X86_64_REX_GOTPCRELX       _JIT_OPARG-0x4
    // 29: 66 85 c0                      testw   %ax, %ax
    // 2c: 74 38                         je      0x66 <_JIT_ENTRY+0x66>
    // 2e: 48 8d 45 f8                   leaq    -0x8(%rbp), %rax
    // 32: 48 8d 4b 01                   leaq    0x1(%rbx), %rcx
    // 36: eb 18                         jmp     0x50 <_JIT_ENTRY+0x50>
    // 38: 0f 1f 84 00 00 00 00 00       nopl    (%rax,%rax)
    // 40: 48 89 10                      movq    %rdx, (%rax)
    // 43: 48 83 c0 08                   addq    $0x8, %rax
    // 47: 48 ff c9                      decq    %rcx
    // 4a: 48 83 f9 01                   cmpq    $0x1, %rcx
    // 4e: 76 16                         jbe     0x66 <_JIT_ENTRY+0x66>
    // 50: 48 8b 54 cf 08                movq    0x8(%rdi,%rcx,8), %rdx
    // 55: 8b 32                         movl    (%rdx), %esi
    // 57: ff c6                         incl    %esi
    // 59: 74 e5                         je      0x40 <_JIT_ENTRY+0x40>
    // 5b: 89 32                         movl    %esi, (%rdx)
    // 5d: eb e1                         jmp     0x40 <_JIT_ENTRY+0x40>
    // 5f: 58                            popq    %rax
    // 60: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x66 <_JIT_ENTRY+0x66>
    // 0000000000000062:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 66: 48 8b 07                      movq    (%rdi), %rax
    // 69: 85 c0                         testl   %eax, %eax
    // 6b: 78 08                         js      0x75 <_JIT_ENTRY+0x75>
    // 6d: 48 ff c8                      decq    %rax
    // 70: 48 89 07                      movq    %rax, (%rdi)
    // 73: 74 0c                         je      0x81 <_JIT_ENTRY+0x81>
    // 75: 48 8d 6c dd f8                leaq    -0x8(%rbp,%rbx,8), %rbp
    // 7a: 58                            popq    %rax
    // 7b: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x81 <_JIT_ENTRY+0x81>
    // 000000000000007d:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 81: ff 15 00 00 00 00             callq   *(%rip)                 # 0x87 <_JIT_ENTRY+0x87>
    // 0000000000000083:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 87: 48 8d 6c dd f8                leaq    -0x8(%rbp,%rbx,8), %rbp
    // 8c: 58                            popq    %rax
    // 8d: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x93 <_JIT_ENTRY+0x93>
    // 000000000000008f:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 8d: 
    const unsigned char code_body[141] = {
        0x50, 0x48, 0x8b, 0x7d, 0xf8, 0x48, 0x8b, 0x47,
        0x08, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x75, 0x4d, 0x48, 0x8b, 0x5f, 0x10, 0x0f, 0xb7,
        0x05, 0x00, 0x00, 0x00, 0x00, 0x48, 0x39, 0xc3,
        0x75, 0x3d, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x66, 0x85, 0xc0, 0x74, 0x38, 0x48, 0x8d,
        0x45, 0xf8, 0x48, 0x8d, 0x4b, 0x01, 0xeb, 0x18,
        0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x89, 0x10, 0x48, 0x83, 0xc0, 0x08, 0x48,
        0xff, 0xc9, 0x48, 0x83, 0xf9, 0x01, 0x76, 0x16,
        0x48, 0x8b, 0x54, 0xcf, 0x08, 0x8b, 0x32, 0xff,
        0xc6, 0x74, 0xe5, 0x89, 0x32, 0xeb, 0xe1, 0x58,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b,
        0x07, 0x85, 0xc0, 0x78, 0x08, 0x48, 0xff, 0xc8,
        0x48, 0x89, 0x07, 0x74, 0x0c, 0x48, 0x8d, 0x6c,
        0xdd, 0xf8, 0x58, 0xff, 0x25, 0x00, 0x00, 0x00,
        0x00, 0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x8d, 0x6c, 0xdd, 0xf8, 0x58,
    };
    // 0: 
    // 0: &PyTuple_Type+0x0
    // 8: OPARG
    // 10: JUMP_TARGET
    // 18: CONTINUE
    // 20: &_Py_Dealloc+0x0
    const unsigned char data_body[40] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyTuple_Type);
    patch_64(data + 0x8, instruction->oparg);
    patch_64(data + 0x10, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x18, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x20, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xc, (uintptr_t)data + -0x4);
    patch_32r(code + 0x19, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x25, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x62, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x7d, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x83, (uintptr_t)data + 0x1c);
}

void
emit__UNPACK_SEQUENCE_TWO_TUPLE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_UNPACK_SEQUENCE_TWO_TUPLE.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 50                            pushq   %rax
    // 1: 48 8b 7d f8                   movq    -0x8(%rbp), %rdi
    // 5: 48 8b 47 08                   movq    0x8(%rdi), %rax
    // 9: 48 3b 05 00 00 00 00          cmpq    (%rip), %rax            # 0x10 <_JIT_ENTRY+0x10>
    // 000000000000000c:  R_X86_64_REX_GOTPCRELX       PyTuple_Type-0x4
    // 10: 75 25                         jne     0x37 <_JIT_ENTRY+0x37>
    // 12: 48 83 7f 10 02                cmpq    $0x2, 0x10(%rdi)
    // 17: 75 1e                         jne     0x37 <_JIT_ENTRY+0x37>
    // 19: 48 8b 5f 18                   movq    0x18(%rdi), %rbx
    // 1d: 8b 03                         movl    (%rbx), %eax
    // 1f: ff c0                         incl    %eax
    // 21: 75 1b                         jne     0x3e <_JIT_ENTRY+0x3e>
    // 23: 4c 8b 77 20                   movq    0x20(%rdi), %r14
    // 27: 41 8b 06                      movl    (%r14), %eax
    // 2a: ff c0                         incl    %eax
    // 2c: 75 1d                         jne     0x4b <_JIT_ENTRY+0x4b>
    // 2e: 48 8b 07                      movq    (%rdi), %rax
    // 31: 85 c0                         testl   %eax, %eax
    // 33: 79 20                         jns     0x55 <_JIT_ENTRY+0x55>
    // 35: eb 2c                         jmp     0x63 <_JIT_ENTRY+0x63>
    // 37: 58                            popq    %rax
    // 38: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x3e <_JIT_ENTRY+0x3e>
    // 000000000000003a:  R_X86_64_GOTPCRELX   _JIT_JUMP_TARGET-0x4
    // 3e: 89 03                         movl    %eax, (%rbx)
    // 40: 4c 8b 77 20                   movq    0x20(%rdi), %r14
    // 44: 41 8b 06                      movl    (%r14), %eax
    // 47: ff c0                         incl    %eax
    // 49: 74 e3                         je      0x2e <_JIT_ENTRY+0x2e>
    // 4b: 41 89 06                      movl    %eax, (%r14)
    // 4e: 48 8b 07                      movq    (%rdi), %rax
    // 51: 85 c0                         testl   %eax, %eax
    // 53: 78 0e                         js      0x63 <_JIT_ENTRY+0x63>
    // 55: 48 ff c8                      decq    %rax
    // 58: 48 89 07                      movq    %rax, (%rdi)
    // 5b: 75 06                         jne     0x63 <_JIT_ENTRY+0x63>
    // 5d: ff 15 00 00 00 00             callq   *(%rip)                 # 0x63 <_JIT_ENTRY+0x63>
    // 000000000000005f:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 63: 4c 89 75 f8                   movq    %r14, -0x8(%rbp)
    // 67: 48 89 5d 00                   movq    %rbx, (%rbp)
    // 6b: 48 83 c5 08                   addq    $0x8, %rbp
    // 6f: 58                            popq    %rax
    // 70: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x76 <_JIT_ENTRY+0x76>
    // 0000000000000072:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 70: 
    const unsigned char code_body[112] = {
        0x50, 0x48, 0x8b, 0x7d, 0xf8, 0x48, 0x8b, 0x47,
        0x08, 0x48, 0x3b, 0x05, 0x00, 0x00, 0x00, 0x00,
        0x75, 0x25, 0x48, 0x83, 0x7f, 0x10, 0x02, 0x75,
        0x1e, 0x48, 0x8b, 0x5f, 0x18, 0x8b, 0x03, 0xff,
        0xc0, 0x75, 0x1b, 0x4c, 0x8b, 0x77, 0x20, 0x41,
        0x8b, 0x06, 0xff, 0xc0, 0x75, 0x1d, 0x48, 0x8b,
        0x07, 0x85, 0xc0, 0x79, 0x20, 0xeb, 0x2c, 0x58,
        0xff, 0x25, 0x00, 0x00, 0x00, 0x00, 0x89, 0x03,
        0x4c, 0x8b, 0x77, 0x20, 0x41, 0x8b, 0x06, 0xff,
        0xc0, 0x74, 0xe3, 0x41, 0x89, 0x06, 0x48, 0x8b,
        0x07, 0x85, 0xc0, 0x78, 0x0e, 0x48, 0xff, 0xc8,
        0x48, 0x89, 0x07, 0x75, 0x06, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x4c, 0x89, 0x75, 0xf8, 0x48,
        0x89, 0x5d, 0x00, 0x48, 0x83, 0xc5, 0x08, 0x58,
    };
    // 0: 
    // 0: &PyTuple_Type+0x0
    // 8: JUMP_TARGET
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyTuple_Type);
    patch_64(data + 0x8, instruction_starts[instruction->jump_target]);
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0xc, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x3a, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x5f, (uintptr_t)data + 0xc);
}

void
emit__WITH_EXCEPT_START(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_WITH_EXCEPT_START.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 83 ec 38                   subq    $0x38, %rsp
    // 4: 48 8b 5d e0                   movq    -0x20(%rbp), %rbx
    // 8: 4c 8b 75 f8                   movq    -0x8(%rbp), %r14
    // c: 4d 8b 7e 08                   movq    0x8(%r14), %r15
    // 10: 4c 89 f7                      movq    %r14, %rdi
    // 13: ff 15 00 00 00 00             callq   *(%rip)                 # 0x19 <_JIT_ENTRY+0x19>
    // 0000000000000015:  R_X86_64_GOTPCRELX   PyException_GetTraceback-0x4
    // 19: 48 85 c0                      testq   %rax, %rax
    // 1c: 74 24                         je      0x42 <_JIT_ENTRY+0x42>
    // 1e: 48 8b 08                      movq    (%rax), %rcx
    // 21: 85 c9                         testl   %ecx, %ecx
    // 23: 78 24                         js      0x49 <_JIT_ENTRY+0x49>
    // 25: 48 ff c9                      decq    %rcx
    // 28: 48 89 08                      movq    %rcx, (%rax)
    // 2b: 75 1c                         jne     0x49 <_JIT_ENTRY+0x49>
    // 2d: 48 89 c7                      movq    %rax, %rdi
    // 30: 48 89 44 24 08                movq    %rax, 0x8(%rsp)
    // 35: ff 15 00 00 00 00             callq   *(%rip)                 # 0x3b <_JIT_ENTRY+0x3b>
    // 0000000000000037:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 3b: 48 8b 44 24 08                movq    0x8(%rsp), %rax
    // 40: eb 07                         jmp     0x49 <_JIT_ENTRY+0x49>
    // 42: 48 8b 05 00 00 00 00          movq    (%rip), %rax            # 0x49 <_JIT_ENTRY+0x49>
    // 0000000000000045:  R_X86_64_REX_GOTPCRELX       _Py_NoneStruct-0x4
    // 49: 48 c7 44 24 10 00 00 00 00    movq    $0x0, 0x10(%rsp)
    // 52: 48 8d 74 24 18                leaq    0x18(%rsp), %rsi
    // 57: 4c 89 7c 24 18                movq    %r15, 0x18(%rsp)
    // 5c: 4c 89 74 24 20                movq    %r14, 0x20(%rsp)
    // 61: 48 89 44 24 28                movq    %rax, 0x28(%rsp)
    // 66: 48 ba 03 00 00 00 00 00 00 80 movabsq $-0x7ffffffffffffffd, %rdx # imm = 0x8000000000000003
    // 70: 48 89 df                      movq    %rbx, %rdi
    // 73: 31 c9                         xorl    %ecx, %ecx
    // 75: ff 15 00 00 00 00             callq   *(%rip)                 # 0x7b <_JIT_ENTRY+0x7b>
    // 0000000000000077:  R_X86_64_GOTPCRELX   PyObject_Vectorcall-0x4
    // 7b: 48 85 c0                      testq   %rax, %rax
    // 7e: 74 12                         je      0x92 <_JIT_ENTRY+0x92>
    // 80: 48 89 45 00                   movq    %rax, (%rbp)
    // 84: 48 83 c5 08                   addq    $0x8, %rbp
    // 88: 48 83 c4 38                   addq    $0x38, %rsp
    // 8c: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x92 <_JIT_ENTRY+0x92>
    // 000000000000008e:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 92: 48 83 c4 38                   addq    $0x38, %rsp
    // 96: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x9c <_JIT_ENTRY+0x9c>
    // 0000000000000098:  R_X86_64_GOTPCRELX   _JIT_ERROR_TARGET-0x4
    // 9c: 
    const unsigned char code_body[156] = {
        0x48, 0x83, 0xec, 0x38, 0x48, 0x8b, 0x5d, 0xe0,
        0x4c, 0x8b, 0x75, 0xf8, 0x4d, 0x8b, 0x7e, 0x08,
        0x4c, 0x89, 0xf7, 0xff, 0x15, 0x00, 0x00, 0x00,
        0x00, 0x48, 0x85, 0xc0, 0x74, 0x24, 0x48, 0x8b,
        0x08, 0x85, 0xc9, 0x78, 0x24, 0x48, 0xff, 0xc9,
        0x48, 0x89, 0x08, 0x75, 0x1c, 0x48, 0x89, 0xc7,
        0x48, 0x89, 0x44, 0x24, 0x08, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x8b, 0x44, 0x24, 0x08,
        0xeb, 0x07, 0x48, 0x8b, 0x05, 0x00, 0x00, 0x00,
        0x00, 0x48, 0xc7, 0x44, 0x24, 0x10, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x8d, 0x74, 0x24, 0x18, 0x4c,
        0x89, 0x7c, 0x24, 0x18, 0x4c, 0x89, 0x74, 0x24,
        0x20, 0x48, 0x89, 0x44, 0x24, 0x28, 0x48, 0xba,
        0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
        0x48, 0x89, 0xdf, 0x31, 0xc9, 0xff, 0x15, 0x00,
        0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x12,
        0x48, 0x89, 0x45, 0x00, 0x48, 0x83, 0xc5, 0x08,
        0x48, 0x83, 0xc4, 0x38, 0xff, 0x25, 0x00, 0x00,
        0x00, 0x00, 0x48, 0x83, 0xc4, 0x38, 0xff, 0x25,
        0x00, 0x00, 0x00, 0x00,
    };
    // 0: 
    // 0: &PyException_GetTraceback+0x0
    // 8: &_Py_Dealloc+0x0
    // 10: &_Py_NoneStruct+0x0
    // 18: &PyObject_Vectorcall+0x0
    // 20: CONTINUE
    // 28: ERROR_TARGET
    const unsigned char data_body[48] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)&PyException_GetTraceback);
    patch_64(data + 0x8, (uintptr_t)&_Py_Dealloc);
    patch_64(data + 0x10, (uintptr_t)&_Py_NoneStruct);
    patch_64(data + 0x18, (uintptr_t)&PyObject_Vectorcall);
    patch_64(data + 0x20, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x28, instruction_starts[instruction->error_target]);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x15, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x37, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x45, (uintptr_t)data + 0xc);
    patch_x86_64_32rx(code + 0x77, (uintptr_t)data + 0x14);
    patch_x86_64_32rx(code + 0x8e, (uintptr_t)data + 0x1c);
    patch_x86_64_32rx(code + 0x98, (uintptr_t)data + 0x24);
}

void
emit__YIELD_VALUE(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/_YIELD_VALUE.o:        file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_JIT_ENTRY>:
    // 0: 48 8b 4d f8                   movq    -0x8(%rbp), %rcx
    // 4: 48 83 c5 f8                   addq    $-0x8, %rbp
    // 8: 49 83 45 38 02                addq    $0x2, 0x38(%r13)
    // d: 0f b6 05 00 00 00 00          movzbl  (%rip), %eax            # 0x14 <_JIT_ENTRY+0x14>
    // 0000000000000010:  R_X86_64_GOTPCREL    _JIT_OPARG-0x4
    // 14: 04 fe                         addb    $-0x2, %al
    // 16: 41 88 45 fb                   movb    %al, -0x5(%r13)
    // 1a: 4c 29 ed                      subq    %r13, %rbp
    // 1d: 48 83 c5 b8                   addq    $-0x48, %rbp
    // 21: 48 c1 ed 03                   shrq    $0x3, %rbp
    // 25: 41 89 6d 40                   movl    %ebp, 0x40(%r13)
    // 29: 49 8b 45 e8                   movq    -0x18(%r13), %rax
    // 2d: 49 89 44 24 78                movq    %rax, 0x78(%r12)
    // 32: 49 c7 45 e8 00 00 00 00       movq    $0x0, -0x18(%r13)
    // 3a: 41 ff 44 24 2c                incl    0x2c(%r12)
    // 3f: 49 8b 45 08                   movq    0x8(%r13), %rax
    // 43: 49 89 44 24 48                movq    %rax, 0x48(%r12)
    // 48: 49 c7 45 08 00 00 00 00       movq    $0x0, 0x8(%r13)
    // 50: 48 63 50 40                   movslq  0x40(%rax), %rdx
    // 54: c7 40 40 ff ff ff ff          movl    $0xffffffff, 0x40(%rax) # imm = 0xFFFFFFFF
    // 5b: 48 89 4c d0 48                movq    %rcx, 0x48(%rax,%rdx,8)
    // 60: 48 8d 2c d0                   leaq    (%rax,%rdx,8), %rbp
    // 64: 48 83 c5 50                   addq    $0x50, %rbp
    // 68: 49 89 c5                      movq    %rax, %r13
    // 6b: ff 25 00 00 00 00             jmpq    *(%rip)                 # 0x71 <_JIT_ENTRY+0x71>
    // 000000000000006d:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 6b: 
    const unsigned char code_body[107] = {
        0x48, 0x8b, 0x4d, 0xf8, 0x48, 0x83, 0xc5, 0xf8,
        0x49, 0x83, 0x45, 0x38, 0x02, 0x0f, 0xb6, 0x05,
        0x00, 0x00, 0x00, 0x00, 0x04, 0xfe, 0x41, 0x88,
        0x45, 0xfb, 0x4c, 0x29, 0xed, 0x48, 0x83, 0xc5,
        0xb8, 0x48, 0xc1, 0xed, 0x03, 0x41, 0x89, 0x6d,
        0x40, 0x49, 0x8b, 0x45, 0xe8, 0x49, 0x89, 0x44,
        0x24, 0x78, 0x49, 0xc7, 0x45, 0xe8, 0x00, 0x00,
        0x00, 0x00, 0x41, 0xff, 0x44, 0x24, 0x2c, 0x49,
        0x8b, 0x45, 0x08, 0x49, 0x89, 0x44, 0x24, 0x48,
        0x49, 0xc7, 0x45, 0x08, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x63, 0x50, 0x40, 0xc7, 0x40, 0x40, 0xff,
        0xff, 0xff, 0xff, 0x48, 0x89, 0x4c, 0xd0, 0x48,
        0x48, 0x8d, 0x2c, 0xd0, 0x48, 0x83, 0xc5, 0x50,
        0x49, 0x89, 0xc5,
    };
    // 0: 
    // 0: OPARG
    const unsigned char data_body[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, instruction->oparg);
    memcpy(code, code_body, sizeof(code_body));
    patch_32r(code + 0x10, (uintptr_t)data + -0x4);
}

void
emit_trampoline(
    unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
    const _PyUOpInstruction *instruction, uintptr_t instruction_starts[])
{
    // 
    // /tmp/tmpnl5i70ln/trampoline.o:  file format elf64-x86-64
    // 
    // Disassembly of section .text:
    // 
    // 0000000000000000 <_ENTRY>:
    // 0: 55                            pushq   %rbp
    // 1: 41 57                         pushq   %r15
    // 3: 41 56                         pushq   %r14
    // 5: 41 55                         pushq   %r13
    // 7: 41 54                         pushq   %r12
    // 9: 53                            pushq   %rbx
    // a: 50                            pushq   %rax
    // b: 48 89 f5                      movq    %rsi, %rbp
    // e: 48 8b 0d 00 00 00 00          movq    (%rip), %rcx            # 0x15 <_ENTRY+0x15>
    // 0000000000000011:  R_X86_64_REX_GOTPCRELX       _JIT_EXECUTOR-0x4
    // 15: 8b 01                         movl    (%rcx), %eax
    // 17: ff c0                         incl    %eax
    // 19: 74 02                         je      0x1d <_ENTRY+0x1d>
    // 1b: 89 01                         movl    %eax, (%rcx)
    // 1d: 49 89 fd                      movq    %rdi, %r13
    // 20: 49 89 d4                      movq    %rdx, %r12
    // 23: 48 89 14 24                   movq    %rdx, (%rsp)
    // 27: ff 15 00 00 00 00             callq   *(%rip)                 # 0x2d <_ENTRY+0x2d>
    // 0000000000000029:  R_X86_64_GOTPCRELX   _JIT_CONTINUE-0x4
    // 2d: 48 8b 0c 24                   movq    (%rsp), %rcx
    // 31: 48 8b b9 10 01 00 00          movq    0x110(%rcx), %rdi
    // 38: 48 8b 15 00 00 00 00          movq    (%rip), %rdx            # 0x3f <_ENTRY+0x3f>
    // 000000000000003b:  R_X86_64_REX_GOTPCRELX       _JIT_EXECUTOR-0x4
    // 3f: 48 89 91 10 01 00 00          movq    %rdx, 0x110(%rcx)
    // 46: 48 8b 0f                      movq    (%rdi), %rcx
    // 49: 85 c9                         testl   %ecx, %ecx
    // 4b: 78 14                         js      0x61 <_ENTRY+0x61>
    // 4d: 48 ff c9                      decq    %rcx
    // 50: 48 89 0f                      movq    %rcx, (%rdi)
    // 53: 75 0c                         jne     0x61 <_ENTRY+0x61>
    // 55: 48 89 c3                      movq    %rax, %rbx
    // 58: ff 15 00 00 00 00             callq   *(%rip)                 # 0x5e <_ENTRY+0x5e>
    // 000000000000005a:  R_X86_64_GOTPCRELX   _Py_Dealloc-0x4
    // 5e: 48 89 d8                      movq    %rbx, %rax
    // 61: 48 83 c4 08                   addq    $0x8, %rsp
    // 65: 5b                            popq    %rbx
    // 66: 41 5c                         popq    %r12
    // 68: 41 5d                         popq    %r13
    // 6a: 41 5e                         popq    %r14
    // 6c: 41 5f                         popq    %r15
    // 6e: 5d                            popq    %rbp
    // 6f: c3                            retq
    // 70: 
    const unsigned char code_body[112] = {
        0x55, 0x41, 0x57, 0x41, 0x56, 0x41, 0x55, 0x41,
        0x54, 0x53, 0x50, 0x48, 0x89, 0xf5, 0x48, 0x8b,
        0x0d, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x01, 0xff,
        0xc0, 0x74, 0x02, 0x89, 0x01, 0x49, 0x89, 0xfd,
        0x49, 0x89, 0xd4, 0x48, 0x89, 0x14, 0x24, 0xff,
        0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8b, 0x0c,
        0x24, 0x48, 0x8b, 0xb9, 0x10, 0x01, 0x00, 0x00,
        0x48, 0x8b, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48,
        0x89, 0x91, 0x10, 0x01, 0x00, 0x00, 0x48, 0x8b,
        0x0f, 0x85, 0xc9, 0x78, 0x14, 0x48, 0xff, 0xc9,
        0x48, 0x89, 0x0f, 0x75, 0x0c, 0x48, 0x89, 0xc3,
        0xff, 0x15, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89,
        0xd8, 0x48, 0x83, 0xc4, 0x08, 0x5b, 0x41, 0x5c,
        0x41, 0x5d, 0x41, 0x5e, 0x41, 0x5f, 0x5d, 0xc3,
    };
    // 0: 
    // 0: EXECUTOR
    // 8: CONTINUE
    // 10: &_Py_Dealloc+0x0
    const unsigned char data_body[24] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };
    memcpy(data, data_body, sizeof(data_body));
    patch_64(data + 0x0, (uintptr_t)executor);
    patch_64(data + 0x8, (uintptr_t)code + sizeof(code_body));
    patch_64(data + 0x10, (uintptr_t)&_Py_Dealloc);
    memcpy(code, code_body, sizeof(code_body));
    patch_x86_64_32rx(code + 0x11, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x29, (uintptr_t)data + 0x4);
    patch_x86_64_32rx(code + 0x3b, (uintptr_t)data + -0x4);
    patch_x86_64_32rx(code + 0x5a, (uintptr_t)data + 0xc);
}

typedef struct {
    void (*emit)(
        unsigned char *code, unsigned char *data, _PyExecutorObject *executor,
        const _PyUOpInstruction *instruction, uintptr_t instruction_starts[]);
    size_t code_size;
    size_t data_size;
} StencilGroup;

static const StencilGroup trampoline = {emit_trampoline, 112, 24};

static const StencilGroup stencil_groups[MAX_UOP_ID + 1] = {
    [_BINARY_OP] = {emit__BINARY_OP, 119, 40},
    [_BINARY_OP_ADD_FLOAT] = {emit__BINARY_OP_ADD_FLOAT, 253, 40},
    [_BINARY_OP_ADD_INT] = {emit__BINARY_OP_ADD_INT, 180, 40},
    [_BINARY_OP_ADD_UNICODE] = {emit__BINARY_OP_ADD_UNICODE, 180, 40},
    [_BINARY_OP_MULTIPLY_FLOAT] = {emit__BINARY_OP_MULTIPLY_FLOAT, 253, 40},
    [_BINARY_OP_MULTIPLY_INT] = {emit__BINARY_OP_MULTIPLY_INT, 180, 40},
    [_BINARY_OP_SUBTRACT_FLOAT] = {emit__BINARY_OP_SUBTRACT_FLOAT, 253, 40},
    [_BINARY_OP_SUBTRACT_INT] = {emit__BINARY_OP_SUBTRACT_INT, 180, 40},
    [_BINARY_SLICE] = {emit__BINARY_SLICE, 127, 40},
    [_BINARY_SUBSCR] = {emit__BINARY_SUBSCR, 108, 32},
    [_BINARY_SUBSCR_DICT] = {emit__BINARY_SUBSCR_DICT, 153, 56},
    [_BINARY_SUBSCR_LIST_INT] = {emit__BINARY_SUBSCR_LIST_INT, 191, 56},
    [_BINARY_SUBSCR_STR_INT] = {emit__BINARY_SUBSCR_STR_INT, 346, 48},
    [_BINARY_SUBSCR_TUPLE_INT] = {emit__BINARY_SUBSCR_TUPLE_INT, 184, 56},
    [_BUILD_CONST_KEY_MAP] = {emit__BUILD_CONST_KEY_MAP, 265, 40},
    [_BUILD_LIST] = {emit__BUILD_LIST, 74, 32},
    [_BUILD_MAP] = {emit__BUILD_MAP, 214, 40},
    [_BUILD_SLICE] = {emit__BUILD_SLICE, 260, 40},
    [_BUILD_STRING] = {emit__BUILD_STRING, 205, 48},
    [_BUILD_TUPLE] = {emit__BUILD_TUPLE, 74, 32},
    [_CALL_BUILTIN_CLASS] = {emit__CALL_BUILTIN_CLASS, 295, 40},
    [_CALL_BUILTIN_FAST] = {emit__CALL_BUILTIN_FAST, 295, 48},
    [_CALL_BUILTIN_FAST_WITH_KEYWORDS] = {emit__CALL_BUILTIN_FAST_WITH_KEYWORDS, 295, 48},
    [_CALL_BUILTIN_O] = {emit__CALL_BUILTIN_O, 249, 48},
    [_CALL_INTRINSIC_1] = {emit__CALL_INTRINSIC_1, 89, 40},
    [_CALL_INTRINSIC_2] = {emit__CALL_INTRINSIC_2, 125, 40},
    [_CALL_ISINSTANCE] = {emit__CALL_ISINSTANCE, 316, 64},
    [_CALL_LEN] = {emit__CALL_LEN, 243, 64},
    [_CALL_METHOD_DESCRIPTOR_FAST] = {emit__CALL_METHOD_DESCRIPTOR_FAST, 347, 48},
    [_CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS] = {emit__CALL_METHOD_DESCRIPTOR_FAST_WITH_KEYWORDS, 347, 48},
    [_CALL_METHOD_DESCRIPTOR_NOARGS] = {emit__CALL_METHOD_DESCRIPTOR_NOARGS, 259, 48},
    [_CALL_METHOD_DESCRIPTOR_O] = {emit__CALL_METHOD_DESCRIPTOR_O, 301, 48},
    [_CALL_NON_PY_GENERAL] = {emit__CALL_NON_PY_GENERAL, 317, 40},
    [_CALL_STR_1] = {emit__CALL_STR_1, 98, 48},
    [_CALL_TUPLE_1] = {emit__CALL_TUPLE_1, 98, 48},
    [_CALL_TYPE_1] = {emit__CALL_TYPE_1, 79, 24},
    [_CHECK_ATTR_CLASS] = {emit__CHECK_ATTR_CLASS, 43, 24},
    [_CHECK_ATTR_METHOD_LAZY_DICT] = {emit__CHECK_ATTR_METHOD_LAZY_DICT, 25, 16},
    [_CHECK_ATTR_MODULE] = {emit__CHECK_ATTR_MODULE, 48, 32},
    [_CHECK_ATTR_WITH_HINT] = {emit__CHECK_ATTR_WITH_HINT, 23, 16},
    [_CHECK_CALL_BOUND_METHOD_EXACT_ARGS] = {emit__CHECK_CALL_BOUND_METHOD_EXACT_ARGS, 56, 24},
    [_CHECK_EG_MATCH] = {emit__CHECK_EG_MATCH, 267, 56},
    [_CHECK_EXC_MATCH] = {emit__CHECK_EXC_MATCH, 147, 56},
    [_CHECK_FUNCTION] = {emit__CHECK_FUNCTION, 30, 24},
    [_CHECK_FUNCTION_EXACT_ARGS] = {emit__CHECK_FUNCTION_EXACT_ARGS, 86, 40},
    [_CHECK_FUNCTION_VERSION] = {emit__CHECK_FUNCTION_VERSION, 61, 40},
    [_CHECK_IS_NOT_PY_CALLABLE] = {emit__CHECK_IS_NOT_PY_CALLABLE, 56, 40},
    [_CHECK_MANAGED_OBJECT_HAS_VALUES] = {emit__CHECK_MANAGED_OBJECT_HAS_VALUES, 22, 16},
    [_CHECK_METHOD_VERSION] = {emit__CHECK_METHOD_VERSION, 84, 40},
    [_CHECK_PEP_523] = {emit__CHECK_PEP_523, 21, 8},
    [_CHECK_PERIODIC] = {emit__CHECK_PERIODIC, 58, 16},
    [_CHECK_STACK_SPACE] = {emit__CHECK_STACK_SPACE, 77, 16},
    [_CHECK_STACK_SPACE_OPERAND] = {emit__CHECK_STACK_SPACE_OPERAND, 54, 16},
    [_CHECK_VALIDITY] = {emit__CHECK_VALIDITY, 25, 24},
    [_CHECK_VALIDITY_AND_SET_IP] = {emit__CHECK_VALIDITY_AND_SET_IP, 36, 32},
    [_COLD_EXIT] = {emit__COLD_EXIT, 340, 32},
    [_COMPARE_OP] = {emit__COMPARE_OP, 203, 64},
    [_COMPARE_OP_FLOAT] = {emit__COMPARE_OP_FLOAT, 291, 48},
    [_COMPARE_OP_INT] = {emit__COMPARE_OP_INT, 328, 56},
    [_COMPARE_OP_STR] = {emit__COMPARE_OP_STR, 207, 56},
    [_CONTAINS_OP] = {emit__CONTAINS_OP, 142, 56},
    [_CONTAINS_OP_DICT] = {emit__CONTAINS_OP_DICT, 167, 72},
    [_CONTAINS_OP_SET] = {emit__CONTAINS_OP_SET, 176, 80},
    [_CONVERT_VALUE] = {emit__CONVERT_VALUE, 83, 40},
    [_COPY] = {emit__COPY, 35, 8},
    [_COPY_FREE_VARS] = {emit__COPY_FREE_VARS, 178, 16},
    [_DELETE_ATTR] = {emit__DELETE_ATTR, 82, 32},
    [_DELETE_DEREF] = {emit__DELETE_DEREF, 86, 40},
    [_DELETE_FAST] = {emit__DELETE_FAST, 115, 136},
    [_DELETE_GLOBAL] = {emit__DELETE_GLOBAL, 92, 80},
    [_DELETE_NAME] = {emit__DELETE_NAME, 118, 112},
    [_DELETE_SUBSCR] = {emit__DELETE_SUBSCR, 98, 24},
    [_DEOPT] = {emit__DEOPT, 51, 16},
    [_DICT_MERGE] = {emit__DICT_MERGE, 149, 48},
    [_DICT_UPDATE] = {emit__DICT_UPDATE, 179, 112},
    [_DYNAMIC_EXIT] = {emit__DYNAMIC_EXIT, 249, 24},
    [_END_SEND] = {emit__END_SEND, 53, 16},
    [_ERROR_POP_N] = {emit__ERROR_POP_N, 77, 24},
    [_EXIT_INIT_CHECK] = {emit__EXIT_INIT_CHECK, 59, 80},
    [_EXIT_TRACE] = {emit__EXIT_TRACE, 60, 16},
    [_EXPAND_METHOD] = {emit__EXPAND_METHOD, 105, 16},
    [_FATAL_ERROR] = {emit__FATAL_ERROR, 21, 48},
    [_FORMAT_SIMPLE] = {emit__FORMAT_SIMPLE, 93, 40},
    [_FORMAT_WITH_SPEC] = {emit__FORMAT_WITH_SPEC, 108, 32},
    [_FOR_ITER_GEN_FRAME] = {emit__FOR_ITER_GEN_FRAME, 107, 32},
    [_FOR_ITER_TIER_TWO] = {emit__FOR_ITER_TIER_TWO, 114, 56},
    [_GET_AITER] = {emit__GET_AITER, 252, 200},
    [_GET_ANEXT] = {emit__GET_ANEXT, 250, 200},
    [_GET_AWAITABLE] = {emit__GET_AWAITABLE, 223, 120},
    [_GET_ITER] = {emit__GET_ITER, 72, 32},
    [_GET_LEN] = {emit__GET_LEN, 52, 32},
    [_GET_YIELD_FROM_ITER] = {emit__GET_YIELD_FROM_ITER, 160, 136},
    [_GUARD_BOTH_FLOAT] = {emit__GUARD_BOTH_FLOAT, 40, 16},
    [_GUARD_BOTH_INT] = {emit__GUARD_BOTH_INT, 40, 16},
    [_GUARD_BOTH_UNICODE] = {emit__GUARD_BOTH_UNICODE, 40, 16},
    [_GUARD_BUILTINS_VERSION] = {emit__GUARD_BUILTINS_VERSION, 45, 32},
    [_GUARD_DORV_NO_DICT] = {emit__GUARD_DORV_NO_DICT, 23, 8},
    [_GUARD_DORV_VALUES_INST_ATTR_FROM_DICT] = {emit__GUARD_DORV_VALUES_INST_ATTR_FROM_DICT, 22, 16},
    [_GUARD_GLOBALS_VERSION] = {emit__GUARD_GLOBALS_VERSION, 45, 32},
    [_GUARD_IS_FALSE_POP] = {emit__GUARD_IS_FALSE_POP, 23, 16},
    [_GUARD_IS_NONE_POP] = {emit__GUARD_IS_NONE_POP, 60, 32},
    [_GUARD_IS_NOT_NONE_POP] = {emit__GUARD_IS_NOT_NONE_POP, 54, 32},
    [_GUARD_IS_TRUE_POP] = {emit__GUARD_IS_TRUE_POP, 23, 16},
    [_GUARD_KEYS_VERSION] = {emit__GUARD_KEYS_VERSION, 38, 24},
    [_GUARD_NOS_FLOAT] = {emit__GUARD_NOS_FLOAT, 23, 16},
    [_GUARD_NOS_INT] = {emit__GUARD_NOS_INT, 23, 16},
    [_GUARD_NOT_EXHAUSTED_LIST] = {emit__GUARD_NOT_EXHAUSTED_LIST, 49, 16},
    [_GUARD_NOT_EXHAUSTED_RANGE] = {emit__GUARD_NOT_EXHAUSTED_RANGE, 23, 16},
    [_GUARD_NOT_EXHAUSTED_TUPLE] = {emit__GUARD_NOT_EXHAUSTED_TUPLE, 35, 16},
    [_GUARD_TOS_FLOAT] = {emit__GUARD_TOS_FLOAT, 23, 16},
    [_GUARD_TOS_INT] = {emit__GUARD_TOS_INT, 23, 16},
    [_GUARD_TYPE_VERSION] = {emit__GUARD_TYPE_VERSION, 34, 24},
    [_INIT_CALL_BOUND_METHOD_EXACT_ARGS] = {emit__INIT_CALL_BOUND_METHOD_EXACT_ARGS, 112, 16},
    [_INIT_CALL_PY_EXACT_ARGS] = {emit__INIT_CALL_PY_EXACT_ARGS, 576, 8},
    [_INIT_CALL_PY_EXACT_ARGS_0] = {emit__INIT_CALL_PY_EXACT_ARGS_0, 236, 0},
    [_INIT_CALL_PY_EXACT_ARGS_1] = {emit__INIT_CALL_PY_EXACT_ARGS_1, 238, 0},
    [_INIT_CALL_PY_EXACT_ARGS_2] = {emit__INIT_CALL_PY_EXACT_ARGS_2, 247, 0},
    [_INIT_CALL_PY_EXACT_ARGS_3] = {emit__INIT_CALL_PY_EXACT_ARGS_3, 256, 0},
    [_INIT_CALL_PY_EXACT_ARGS_4] = {emit__INIT_CALL_PY_EXACT_ARGS_4, 265, 0},
    [_INTERNAL_INCREMENT_OPT_COUNTER] = {emit__INTERNAL_INCREMENT_OPT_COUNTER, 12, 0},
    [_IS_NONE] = {emit__IS_NONE, 76, 40},
    [_IS_OP] = {emit__IS_OP, 126, 40},
    [_ITER_CHECK_LIST] = {emit__ITER_CHECK_LIST, 23, 16},
    [_ITER_CHECK_RANGE] = {emit__ITER_CHECK_RANGE, 23, 16},
    [_ITER_CHECK_TUPLE] = {emit__ITER_CHECK_TUPLE, 23, 16},
    [_ITER_NEXT_LIST] = {emit__ITER_NEXT_LIST, 44, 0},
    [_ITER_NEXT_RANGE] = {emit__ITER_NEXT_RANGE, 57, 24},
    [_ITER_NEXT_TUPLE] = {emit__ITER_NEXT_TUPLE, 41, 0},
    [_JUMP_TO_TOP] = {emit__JUMP_TO_TOP, 6, 8},
    [_LIST_APPEND] = {emit__LIST_APPEND, 91, 32},
    [_LIST_EXTEND] = {emit__LIST_EXTEND, 209, 128},
    [_LOAD_ASSERTION_ERROR] = {emit__LOAD_ASSERTION_ERROR, 26, 8},
    [_LOAD_ATTR] = {emit__LOAD_ATTR, 203, 48},
    [_LOAD_ATTR_CLASS_0] = {emit__LOAD_ATTR_CLASS_0, 57, 24},
    [_LOAD_ATTR_CLASS_1] = {emit__LOAD_ATTR_CLASS_1, 58, 16},
    [_LOAD_ATTR_INSTANCE_VALUE_0] = {emit__LOAD_ATTR_INSTANCE_VALUE_0, 74, 32},
    [_LOAD_ATTR_INSTANCE_VALUE_1] = {emit__LOAD_ATTR_INSTANCE_VALUE_1, 81, 32},
    [_LOAD_ATTR_METHOD_LAZY_DICT] = {emit__LOAD_ATTR_METHOD_LAZY_DICT, 31, 8},
    [_LOAD_ATTR_METHOD_NO_DICT] = {emit__LOAD_ATTR_METHOD_NO_DICT, 31, 8},
    [_LOAD_ATTR_METHOD_WITH_VALUES] = {emit__LOAD_ATTR_METHOD_WITH_VALUES, 31, 8},
    [_LOAD_ATTR_MODULE] = {emit__LOAD_ATTR_MODULE, 124, 40},
    [_LOAD_ATTR_NONDESCRIPTOR_NO_DICT] = {emit__LOAD_ATTR_NONDESCRIPTOR_NO_DICT, 67, 24},
    [_LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES] = {emit__LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES, 67, 24},
    [_LOAD_ATTR_SLOT_0] = {emit__LOAD_ATTR_SLOT_0, 73, 32},
    [_LOAD_ATTR_SLOT_1] = {emit__LOAD_ATTR_SLOT_1, 80, 32},
    [_LOAD_ATTR_WITH_HINT] = {emit__LOAD_ATTR_WITH_HINT, 198, 32},
    [_LOAD_BUILD_CLASS] = {emit__LOAD_BUILD_CLASS, 94, 80},
    [_LOAD_CONST] = {emit__LOAD_CONST, 36, 8},
    [_LOAD_CONST_INLINE] = {emit__LOAD_CONST_INLINE, 23, 8},
    [_LOAD_CONST_INLINE_BORROW] = {emit__LOAD_CONST_INLINE_BORROW, 15, 8},
    [_LOAD_CONST_INLINE_BORROW_WITH_NULL] = {emit__LOAD_CONST_INLINE_BORROW_WITH_NULL, 23, 8},
    [_LOAD_CONST_INLINE_WITH_NULL] = {emit__LOAD_CONST_INLINE_WITH_NULL, 31, 8},
    [_LOAD_DEREF] = {emit__LOAD_DEREF, 72, 32},
    [_LOAD_FAST] = {emit__LOAD_FAST, 28, 8},
    [_LOAD_FAST_0] = {emit__LOAD_FAST_0, 20, 0},
    [_LOAD_FAST_1] = {emit__LOAD_FAST_1, 20, 0},
    [_LOAD_FAST_2] = {emit__LOAD_FAST_2, 20, 0},
    [_LOAD_FAST_3] = {emit__LOAD_FAST_3, 20, 0},
    [_LOAD_FAST_4] = {emit__LOAD_FAST_4, 20, 0},
    [_LOAD_FAST_5] = {emit__LOAD_FAST_5, 20, 0},
    [_LOAD_FAST_6] = {emit__LOAD_FAST_6, 20, 0},
    [_LOAD_FAST_7] = {emit__LOAD_FAST_7, 23, 0},
    [_LOAD_FAST_AND_CLEAR] = {emit__LOAD_FAST_AND_CLEAR, 29, 8},
    [_LOAD_FAST_CHECK] = {emit__LOAD_FAST_CHECK, 100, 128},
    [_LOAD_FROM_DICT_OR_DEREF] = {emit__LOAD_FROM_DICT_OR_DEREF, 183, 48},
    [_LOAD_GLOBAL] = {emit__LOAD_GLOBAL, 256, 96},
    [_LOAD_GLOBAL_BUILTINS] = {emit__LOAD_GLOBAL_BUILTINS, 121, 32},
    [_LOAD_GLOBAL_MODULE] = {emit__LOAD_GLOBAL_MODULE, 121, 32},
    [_LOAD_LOCALS] = {emit__LOAD_LOCALS, 66, 48},
    [_LOAD_SUPER_ATTR_ATTR] = {emit__LOAD_SUPER_ATTR_ATTR, 192, 56},
    [_LOAD_SUPER_ATTR_METHOD] = {emit__LOAD_SUPER_ATTR_METHOD, 267, 64},
    [_MAKE_CELL] = {emit__MAKE_CELL, 81, 40},
    [_MAKE_FUNCTION] = {emit__MAKE_FUNCTION, 85, 40},
    [_MAP_ADD] = {emit__MAP_ADD, 53, 24},
    [_MATCH_CLASS] = {emit__MATCH_CLASS, 190, 48},
    [_MATCH_KEYS] = {emit__MATCH_KEYS, 45, 24},
    [_MATCH_MAPPING] = {emit__MATCH_MAPPING, 53, 24},
    [_MATCH_SEQUENCE] = {emit__MATCH_SEQUENCE, 53, 24},
    [_NOP] = {emit__NOP, 0, 0},
    [_POP_EXCEPT] = {emit__POP_EXCEPT, 67, 24},
    [_POP_FRAME] = {emit__POP_FRAME, 79, 8},
    [_POP_TOP] = {emit__POP_TOP, 38, 16},
    [_POP_TOP_LOAD_CONST_INLINE_BORROW] = {emit__POP_TOP_LOAD_CONST_INLINE_BORROW, 56, 24},
    [_PUSH_EXC_INFO] = {emit__PUSH_EXC_INFO, 47, 8},
    [_PUSH_FRAME] = {emit__PUSH_FRAME, 59, 0},
    [_PUSH_NULL] = {emit__PUSH_NULL, 12, 0},
    [_PY_FRAME_GENERAL] = {emit__PY_FRAME_GENERAL, 139, 32},
    [_REPLACE_WITH_TRUE] = {emit__REPLACE_WITH_TRUE, 56, 24},
    [_RESUME_CHECK] = {emit__RESUME_CHECK, 30, 16},
    [_RETURN_GENERATOR] = {emit__RETURN_GENERATOR, 390, 32},
    [_SAVE_RETURN_OFFSET] = {emit__SAVE_RETURN_OFFSET, 12, 8},
    [_SETUP_ANNOTATIONS] = {emit__SETUP_ANNOTATIONS, 188, 120},
    [_SET_ADD] = {emit__SET_ADD, 84, 32},
    [_SET_FUNCTION_ATTRIBUTE] = {emit__SET_FUNCTION_ATTRIBUTE, 101, 32},
    [_SET_IP] = {emit__SET_IP, 11, 8},
    [_SET_UPDATE] = {emit__SET_UPDATE, 90, 40},
    [_START_EXECUTOR] = {emit__START_EXECUTOR, 94, 32},
    [_STORE_ATTR] = {emit__STORE_ATTR, 118, 32},
    [_STORE_ATTR_INSTANCE_VALUE] = {emit__STORE_ATTR_INSTANCE_VALUE, 123, 24},
    [_STORE_ATTR_SLOT] = {emit__STORE_ATTR_SLOT, 86, 24},
    [_STORE_DEREF] = {emit__STORE_DEREF, 63, 24},
    [_STORE_FAST] = {emit__STORE_FAST, 60, 24},
    [_STORE_FAST_0] = {emit__STORE_FAST_0, 51, 16},
    [_STORE_FAST_1] = {emit__STORE_FAST_1, 51, 16},
    [_STORE_FAST_2] = {emit__STORE_FAST_2, 51, 16},
    [_STORE_FAST_3] = {emit__STORE_FAST_3, 51, 16},
    [_STORE_FAST_4] = {emit__STORE_FAST_4, 51, 16},
    [_STORE_FAST_5] = {emit__STORE_FAST_5, 51, 16},
    [_STORE_FAST_6] = {emit__STORE_FAST_6, 51, 16},
    [_STORE_FAST_7] = {emit__STORE_FAST_7, 57, 16},
    [_STORE_GLOBAL] = {emit__STORE_GLOBAL, 86, 32},
    [_STORE_NAME] = {emit__STORE_NAME, 194, 104},
    [_STORE_SLICE] = {emit__STORE_SLICE, 219, 32},
    [_STORE_SUBSCR] = {emit__STORE_SUBSCR, 146, 24},
    [_STORE_SUBSCR_DICT] = {emit__STORE_SUBSCR_DICT, 90, 40},
    [_STORE_SUBSCR_LIST_INT] = {emit__STORE_SUBSCR_LIST_INT, 207, 56},
    [_SWAP] = {emit__SWAP, 30, 8},
    [_TIER2_RESUME_CHECK] = {emit__TIER2_RESUME_CHECK, 15, 8},
    [_TO_BOOL] = {emit__TO_BOOL, 95, 48},
    [_TO_BOOL_BOOL] = {emit__TO_BOOL_BOOL, 23, 16},
    [_TO_BOOL_INT] = {emit__TO_BOOL_INT, 87, 48},
    [_TO_BOOL_LIST] = {emit__TO_BOOL_LIST, 90, 48},
    [_TO_BOOL_NONE] = {emit__TO_BOOL_NONE, 30, 24},
    [_TO_BOOL_STR] = {emit__TO_BOOL_STR, 104, 56},
    [_UNARY_INVERT] = {emit__UNARY_INVERT, 72, 32},
    [_UNARY_NEGATIVE] = {emit__UNARY_NEGATIVE, 72, 32},
    [_UNARY_NOT] = {emit__UNARY_NOT, 24, 16},
    [_UNPACK_EX] = {emit__UNPACK_EX, 93, 40},
    [_UNPACK_SEQUENCE] = {emit__UNPACK_SEQUENCE, 98, 40},
    [_UNPACK_SEQUENCE_LIST] = {emit__UNPACK_SEQUENCE_LIST, 144, 40},
    [_UNPACK_SEQUENCE_TUPLE] = {emit__UNPACK_SEQUENCE_TUPLE, 141, 40},
    [_UNPACK_SEQUENCE_TWO_TUPLE] = {emit__UNPACK_SEQUENCE_TWO_TUPLE, 112, 24},
    [_WITH_EXCEPT_START] = {emit__WITH_EXCEPT_START, 156, 48},
    [_YIELD_VALUE] = {emit__YIELD_VALUE, 107, 8},
};
