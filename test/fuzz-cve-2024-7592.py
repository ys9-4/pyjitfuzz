import atheris
import sys
import time
import os
import subprocess


def run_python(code: str, jit_enabled: bool) -> str:
    env = os.environ.copy()
    env["PYTHON_JIT"] = "1" if jit_enabled else "0"

    try:
        result = subprocess.run(
            ["python3.13", "-c", code],
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            env=env,
            timeout=5
        )
        return result.stdout.strip()
    except subprocess.TimeoutExpired:
        return "TIMEOUT"
    except Exception as e:
        return f"ERROR: {str(e)}"


def TestOneInput(data: bytes):
    if len(data) < 2000:
        return

    try:
        input_str = data.decode("utf-8", errors="ignore")
        cookie_string = f'a="{input_str}";'

        harness_code = f"""
from django.http import parse_cookie
import time

start = time.time()
try:
    parse_cookie({repr(cookie_string)})
except Exception:
    pass
end = time.time()

print("Time:", end - start)
"""

        output_jit = run_python(harness_code, jit_enabled=True)
        output_interp = run_python(harness_code, jit_enabled=False)

        if output_jit != output_interp:
            print("=== ❗ 차이 발생 ===")
            print("Input (truncated):", repr(cookie_string[:80]))
            print("[JIT 결과]")
            print(output_jit)
            print("[INTERP 결과]")
            print(output_interp)

    except Exception:
        pass


def main():
    atheris.Setup(sys.argv, TestOneInput, enable_python_coverage=True)
    atheris.Fuzz()


if __name__ == "__main__":
    main()