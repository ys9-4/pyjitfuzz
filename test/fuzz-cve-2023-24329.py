import atheris                      # Google의 퍼징 라이브러리
import sys                          # 시스템 관련 기능 (인자 처리 등)
import urllib.parse                 # URL 파싱을 위한 표준 라이브러리
import builtins                     # probe_state 내장 함수 접근용 (CPython 수정 시)

def is_allowed_url(url_str: str) -> bool:
    """차단된 scheme이나 hostname을 포함하지 않으면 True 반환"""
    blocked_schemes = ["file", "gopher", "expect", "php", "dict", "ftp", "glob", "data"]
    blocked_hosts = ["instagram.com", "youtube.com", "tiktok.com"]

    parsed = urllib.parse.urlparse(url_str)

    if parsed.scheme in blocked_schemes:
        return False
    if parsed.hostname in blocked_hosts:
        return False

    return True

def TestOneInput(fuzz_data: bytes):
    """퍼저가 전달한 입력값 하나를 테스트"""
    fdp = atheris.FuzzedDataProvider(fuzz_data)

    try:
        # URL처럼 쓸 수 있는 최대 300길이의 유니코드 문자열 생성
        candidate_url = fdp.ConsumeUnicodeNoSurrogates(300)

        if not candidate_url:
            return

        # URL 파싱 전 상태의 type hash 확인
        parsed_url = urllib.parse.urlparse(candidate_url)
        if hasattr(builtins, "probe_state"):
            hash_before = builtins.probe_state(parsed_url)

        # 필터를 우회하는 경우 → 해시값이 바뀌었는지 확인
        if is_allowed_url(candidate_url):
            parsed_again = urllib.parse.urlparse(candidate_url)
            if hasattr(builtins, "probe_state"):
                hash_after = builtins.probe_state(parsed_again)

                if hash_before != hash_after:
                    raise RuntimeError(
                        f"\n[!] 해시값 변경 발생\n"
                        f"입력 URL: {candidate_url}\n"
                        f"해시 전: {hash_before}\n"
                        f"해시 후: {hash_after}"
                    )

    except Exception:
        pass

def main():
    atheris.Setup(sys.argv, TestOneInput, enable_python_coverage=True)
    atheris.Fuzz()

if __name__ == "__main__":
    main()