
import os
import sys
import subprocess
import atheris

def run_python(code: str, jit_enabled: bool) -> str:
    env = os.environ.copy()
    env["PYTHON_JIT"] = "1" if jit_enabled else "0"

    try:
        result = subprocess.run(
            ["python3.13", "-c", code],
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            env=env,
            timeout=5
        )
        return result.stdout.strip()
    except subprocess.TimeoutExpired:
        return "TIMEOUT"
    except Exception as e:
        return f"ERROR: {str(e)}"

def make_payload(data: bytes) -> str:
    try:
        input_url = data.decode("utf-8", errors="ignore").strip()
    except Exception:
        input_url = "http://example.com"

    code = f'''
import urllib.request
from urllib.parse import urlparse

block_schemes = ["file", "gopher", "expect", "php", "dict", "ftp", "glob", "data"]
block_host = ["instagram.com", "youtube.com", "tiktok.com"]

url = {repr(input_url)}
scheme = urlparse(url).scheme
host = urlparse(url).hostname

print("SCHEME:", scheme)
print("HOST:", host)

if scheme in block_schemes:
    print("BLOCKED: scheme")
elif host in block_host:
    print("BLOCKED: host")
else:
    print("SAFE")
    try:
        with urllib.request.urlopen(url) as response:
            print("Fetched:", response.status)
    except Exception as e:
        print("Fetch error:", str(e))
'''
    return code

def TestOneInput(data: bytes):
    code = make_payload(data)

    out_jit = run_python(code, jit_enabled=True)
    out_interp = run_python(code, jit_enabled=False)

    print(out_jit + "\n" + out_interp)

    if out_jit != out_interp:
        print("\nðŸ’¥ Detected JIT/INTERP Mismatch ðŸ’¥")
        print("Input:")
        print(data.decode("utf-8", errors="ignore"))
        print("--- JIT OUTPUT ---")
        print(out_jit)
        print("--- INTERP OUTPUT ---")
        print(out_interp)
        raise RuntimeError("Mismatch between JIT and interpreter")

atheris.Setup(sys.argv, TestOneInput, enable_python_coverage=True)
atheris.Fuzz()